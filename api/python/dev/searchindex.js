Search.setIndex({"alltitles": {"ABS": [[1307, "abs"]], "ACOS": [[1310, "acos"]], "ACOSD": [[1310, "acosd"]], "ARRAY_AGG": [[1304, "array-agg"]], "ARRAY_CONTAINS": [[1304, "array-contains"]], "ARRAY_GET": [[1304, "array-get"]], "ARRAY_LENGTH": [[1304, "array-length"]], "ARRAY_LOWER": [[1304, "array-lower"]], "ARRAY_MEAN": [[1304, "array-mean"]], "ARRAY_REVERSE": [[1304, "array-reverse"]], "ARRAY_SUM": [[1304, "array-sum"]], "ARRAY_TO_STRING": [[1304, "array-to-string"]], "ARRAY_UNIQUE": [[1304, "array-unique"]], "ARRAY_UPPER": [[1304, "array-upper"]], "ASIN": [[1310, "asin"]], "ASIND": [[1310, "asind"]], "ATAN": [[1310, "atan"]], "ATAN2": [[1310, "atan2"]], "ATAN2D": [[1310, "atan2d"]], "ATAND": [[1310, "atand"]], "AVG": [[1303, "avg"]], "Aggregate": [[1303, "aggregate"]], "Aggregation": [[169, "aggregation"], [320, "aggregation"], [802, "aggregation"], [908, "aggregation"]], "Aliases": [[1303, null], [1303, null], [1307, null], [1307, null], [1308, null], [1308, null]], "Array": [[780, "array"], [1278, "array"], [1304, "array"]], "Asserts": [[1316, "asserts"]], "Attributes": [[308, "attributes"], [896, "attributes"], [1279, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[801, "avro"]], "BIT_LENGTH": [[1308, "bit-length"]], "Binary": [[781, "binary"], [794, "binary"], [1280, "binary"]], "Boolean": [[782, "boolean"], [1281, "boolean"]], "CAST": [[1311, "cast"]], "CBRT": [[1307, "cbrt"]], "CEIL": [[1307, "ceil"]], "COALESCE": [[1305, "coalesce"]], "CONCAT": [[1308, "concat"]], "CONCAT_WS": [[1308, "concat-ws"]], "COS": [[1310, "cos"]], "COSD": [[1310, "cosd"]], "COT": [[1310, "cot"]], "COTD": [[1310, "cotd"]], "COUNT": [[1303, "count"]], "CREATE TABLE": [[1315, "create-table"]], "CSV": [[801, "csv"]], "Categories": [[783, "categories"], [1282, "categories"]], "Clipboard": [[801, "clipboard"]], "Columns / names": [[785, "columns-names"]], "Comparison": [[794, "comparison"], [1290, "comparison"]], "Computation": [[309, "computation"], [786, "computation"], [1283, "computation"]], "Conditional": [[1305, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[794, "conjunction"]], "Conversion": [[799, "conversion"]], "DATE": [[1308, "date"]], "DATE_PART": [[1309, "date-part"]], "DEGREES": [[1310, "degrees"]], "DISTINCT": [[1302, "distinct"]], "DIV": [[1307, "div"]], "DROP TABLES": [[1315, "drop-tables"]], "Data types": [[318, "data-types"]], "DataFrame": [[313, "dataframe"]], "DataType": [[318, "datatype"]], "Database": [[801, "database"]], "Delta Lake": [[801, "delta-lake"]], "Descriptive": [[310, "descriptive"], [897, "descriptive"], [1284, "descriptive"]], "Documentation": [[1313, null], [1313, null], [1313, null]], "ENDS_WITH": [[1308, "ends-with"]], "EXCEPT": [[1314, "except"]], "EXP": [[1307, "exp"]], "EXPLAIN": [[1315, "explain"]], "EXTRACT": [[1309, "extract"]], "Errors": [[319, "errors"]], "Examples": [[1, "examples"], [907, "examples"], [1316, "examples"]], "Excel / ODS": [[801, "excel-ods"]], "Exceptions": [[319, "exceptions"]], "Export": [[311, "export"], [1285, "export"]], "Expression SQL": [[1313, "expression-sql"]], "Expressions": [[788, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1303, "first"]], "FLOOR": [[1307, "floor"]], "FROM": [[1302, "from"]], "Feather / IPC": [[801, "feather-ipc"]], "Frame SQL": [[1313, "frame-sql"]], "Functions": [[787, "functions"], [799, "functions"], [907, "functions"]], "GPUEngine": [[898, "gpuengine"]], "GREATEST": [[1305, "greatest"]], "GROUP BY": [[1302, "group-by"]], "Global SQL": [[1313, "global-sql"]], "GroupBy": [[312, "groupby"], [899, "groupby"]], "HAVING": [[1302, "having"]], "IF": [[1305, "if"]], "IFNULL": [[1305, "ifnull"]], "INITCAP": [[1308, "initcap"]], "INTERSECT": [[1314, "intersect"]], "Iceberg": [[801, "iceberg"]], "Importing": [[907, "importing"]], "InProcessQuery": [[900, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[801, "input-output"]], "Introduction": [[1313, "introduction"]], "JOIN": [[1302, "join"]], "JSON": [[801, "json"]], "LAST": [[1303, "last"]], "LEAST": [[1305, "least"]], "LEFT": [[1308, "left"]], "LENGTH": [[1308, "length"]], "LIMIT": [[1302, "limit"]], "LN": [[1307, "ln"]], "LOG": [[1307, "log"]], "LOG10": [[1307, "log10"]], "LOG1P": [[1307, "log1p"]], "LOG2": [[1307, "log2"]], "LOWER": [[1308, "lower"]], "LTRIM": [[1308, "ltrim"]], "LazyFrame": [[901, "lazyframe"]], "List": [[789, "list"], [1287, "list"]], "MAX": [[1303, "max"]], "MEDIAN": [[1303, "median"]], "MIN": [[1303, "min"]], "MOD": [[1307, "mod"]], "Manipulation/selection": [[315, "manipulation-selection"], [792, "manipulation-selection"], [903, "manipulation-selection"], [1289, "manipulation-selection"]], "Math": [[1307, "math"]], "Meta": [[790, "meta"]], "Metadata": [[904, "metadata"]], "Methods": [[1313, "methods"]], "Miscellaneous": [[314, "miscellaneous"], [791, "miscellaneous"], [799, "miscellaneous"], [902, "miscellaneous"], [1288, "miscellaneous"]], "NULLIF": [[1305, "nullif"]], "Name": [[793, "name"]], "Nested": [[318, "nested"]], "Numeric": [[318, "numeric"], [794, "numeric"], [1290, "numeric"]], "OCTET_LENGTH": [[1308, "octet-length"]], "OFFSET": [[1302, "offset"]], "ORDER BY": [[1302, "order-by"]], "Operators": [[794, "operators"], [1290, "operators"]], "Other": [[318, "other"]], "PI": [[1307, "pi"]], "POW": [[1307, "pow"]], "Panic": [[319, "panic"]], "Parallelization": [[799, "parallelization"]], "Parametric testing": [[1316, "parametric-testing"]], "Parquet": [[801, "parquet"]], "Plot": [[316, "plot"], [1291, "plot"]], "Plugins": [[905, "plugins"]], "Polars strategies": [[1316, "polars-strategies"]], "Profiles": [[1316, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[801, "pyarrow-datasets"]], "Python API": [[1313, "python-api"]], "Python API reference": [[800, "python-api-reference"]], "Querying": [[1313, "querying"]], "RADIANS": [[1310, "radians"]], "REGEXP_LIKE": [[1308, "regexp-like"]], "REPLACE": [[1308, "replace"]], "REVERSE": [[1308, "reverse"]], "RIGHT": [[1308, "right"]], "ROUND": [[1307, "round"]], "RTRIM": [[1308, "rtrim"]], "Random": [[799, "random"]], "SELECT": [[1302, "select"]], "SHOW TABLES": [[1315, "show-tables"]], "SIGN": [[1307, "sign"]], "SIN": [[1310, "sin"]], "SIND": [[1310, "sind"]], "SQL Clauses": [[1302, "sql-clauses"]], "SQL Functions": [[1306, "sql-functions"]], "SQL Interface": [[1312, "sql-interface"]], "SQLContext": [[1313, "sqlcontext"]], "SQRT": [[1307, "sqrt"]], "STARTS_WITH": [[1308, "starts-with"]], "STDDEV": [[1303, "stddev"]], "STRFTIME": [[1309, "strftime"]], "STRPOS": [[1308, "strpos"]], "STRPTIME": [[1308, "strptime"]], "SUBSTRING": [[1308, "substring"]], "SUM": [[1303, "sum"]], "Schema": [[906, "schema"]], "Selectors": [[907, "selectors"]], "Serialization": [[314, "serialization"], [902, "serialization"]], "Series": [[1286, "series"]], "Set Operations": [[1314, "set-operations"]], "Set operations": [[907, "set-operations"]], "Strategy helpers": [[1316, "strategy-helpers"]], "String": [[318, "string"], [795, "string"], [1292, "string"], [1308, "string"]], "StringCache": [[799, "stringcache"]], "Struct": [[796, "struct"], [1293, "struct"]], "Style": [[317, "style"]], "TAN": [[1310, "tan"]], "TAND": [[1310, "tand"]], "TIMESTAMP": [[1308, "timestamp"]], "TRUNCATE": [[1315, "truncate"]], "TRY_CAST": [[1311, "try-cast"]], "Table Operations": [[1315, "table-operations"]], "Temporal": [[318, "temporal"], [797, "temporal"], [1294, "temporal"], [1309, "temporal"]], "Testing": [[1316, "testing"]], "Trigonometry": [[1310, "trigonometry"]], "Types": [[1311, "types"]], "UNION": [[1314, "union"]], "UNION ALL": [[1314, "union-all"]], "UNION BY NAME": [[1314, "union-by-name"]], "UNNEST": [[1304, "unnest"], [1315, "unnest"]], "UPPER": [[1308, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1303, "variance"]], "WHERE": [[1302, "where"]], "Warnings": [[319, "warnings"]], "Window": [[798, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__array__": [[170, "polars-dataframe-array"]], "polars.DataFrame.__arrow_c_stream__": [[171, "polars-dataframe-arrow-c-stream"]], "polars.DataFrame.__dataframe__": [[172, "polars-dataframe-dataframe"]], "polars.DataFrame.__getitem__": [[173, "polars-dataframe-getitem"]], "polars.DataFrame.approx_n_unique": [[174, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[175, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[176, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[177, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[178, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[179, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[180, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[181, "polars-dataframe-corr"]], "polars.DataFrame.count": [[182, "polars-dataframe-count"]], "polars.DataFrame.describe": [[183, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[184, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[185, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[186, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[187, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[188, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[189, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[190, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[191, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[192, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[193, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[194, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[195, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[196, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[197, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[198, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[199, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[200, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[201, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[202, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[203, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[204, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[205, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[206, "polars-dataframe-head"]], "polars.DataFrame.height": [[207, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[208, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[209, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[210, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[211, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[212, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[213, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[214, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[215, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[216, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[217, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[218, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[219, "polars-dataframe-join-asof"]], "polars.DataFrame.join_where": [[220, "polars-dataframe-join-where"]], "polars.DataFrame.lazy": [[221, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[222, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[223, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[224, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[225, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[226, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[227, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[228, "polars-dataframe-median"]], "polars.DataFrame.melt": [[229, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[230, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[231, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[232, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[233, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[234, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[235, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[236, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[237, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[238, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[239, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[240, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[241, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[242, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[243, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[244, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[245, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[246, "polars-dataframe-row"]], "polars.DataFrame.rows": [[247, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[248, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[249, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[250, "polars-dataframe-schema"]], "polars.DataFrame.select": [[251, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[252, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[253, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[254, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[255, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[256, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[257, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[258, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[259, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[260, "polars-dataframe-sql"]], "polars.DataFrame.std": [[261, "polars-dataframe-std"]], "polars.DataFrame.sum": [[262, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[263, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[264, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[265, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[266, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[267, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[268, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[269, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[270, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[271, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[272, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[273, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[274, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[275, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[276, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[277, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[278, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[279, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[280, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[281, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[282, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[283, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[284, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[285, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[286, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[287, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[288, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[289, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[290, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[321, "polars-expr-abs"]], "polars.Expr.add": [[322, "polars-expr-add"]], "polars.Expr.agg_groups": [[323, "polars-expr-agg-groups"]], "polars.Expr.alias": [[324, "polars-expr-alias"]], "polars.Expr.all": [[325, "polars-expr-all"]], "polars.Expr.and_": [[326, "polars-expr-and"]], "polars.Expr.any": [[327, "polars-expr-any"]], "polars.Expr.append": [[328, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[329, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[330, "polars-expr-arccos"]], "polars.Expr.arccosh": [[331, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[332, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[333, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[334, "polars-expr-arctan"]], "polars.Expr.arctanh": [[335, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[336, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[337, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[338, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[339, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[340, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[341, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[342, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[343, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[344, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[345, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[346, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[347, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[348, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[349, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[350, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[351, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[352, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[353, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[354, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[355, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[356, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[357, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[358, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[359, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[360, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[361, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[362, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[363, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[364, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[365, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[366, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[367, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[368, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[369, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[370, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[371, "polars-expr-bin-starts-with"]], "polars.Expr.bitwise_and": [[372, "polars-expr-bitwise-and"]], "polars.Expr.bitwise_count_ones": [[373, "polars-expr-bitwise-count-ones"]], "polars.Expr.bitwise_count_zeros": [[374, "polars-expr-bitwise-count-zeros"]], "polars.Expr.bitwise_leading_ones": [[375, "polars-expr-bitwise-leading-ones"]], "polars.Expr.bitwise_leading_zeros": [[376, "polars-expr-bitwise-leading-zeros"]], "polars.Expr.bitwise_or": [[377, "polars-expr-bitwise-or"]], "polars.Expr.bitwise_trailing_ones": [[378, "polars-expr-bitwise-trailing-ones"]], "polars.Expr.bitwise_trailing_zeros": [[379, "polars-expr-bitwise-trailing-zeros"]], "polars.Expr.bitwise_xor": [[380, "polars-expr-bitwise-xor"]], "polars.Expr.bottom_k": [[381, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[382, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[383, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[384, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[385, "polars-expr-cbrt"]], "polars.Expr.ceil": [[386, "polars-expr-ceil"]], "polars.Expr.clip": [[387, "polars-expr-clip"]], "polars.Expr.cos": [[388, "polars-expr-cos"]], "polars.Expr.cosh": [[389, "polars-expr-cosh"]], "polars.Expr.cot": [[390, "polars-expr-cot"]], "polars.Expr.count": [[391, "polars-expr-count"]], "polars.Expr.cum_count": [[392, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[393, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[394, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[395, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[396, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[397, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[398, "polars-expr-cut"]], "polars.Expr.degrees": [[399, "polars-expr-degrees"]], "polars.Expr.deserialize": [[400, "polars-expr-deserialize"]], "polars.Expr.diff": [[401, "polars-expr-diff"]], "polars.Expr.dot": [[402, "polars-expr-dot"]], "polars.Expr.drop_nans": [[403, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[404, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[405, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[406, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[407, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[408, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[409, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[410, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[411, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[412, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[413, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[414, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[415, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[416, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[417, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[418, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[419, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[420, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[421, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[422, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[423, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[424, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[425, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[426, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[427, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[428, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[429, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[430, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[431, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[432, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[433, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[434, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[435, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[436, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[437, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[438, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[439, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[440, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[441, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[442, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[443, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[444, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[445, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[446, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[447, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[448, "polars-expr-dt-year"]], "polars.Expr.entropy": [[449, "polars-expr-entropy"]], "polars.Expr.eq": [[450, "polars-expr-eq"]], "polars.Expr.eq_missing": [[451, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[452, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[453, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[454, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[455, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[456, "polars-expr-exclude"]], "polars.Expr.exp": [[457, "polars-expr-exp"]], "polars.Expr.explode": [[458, "polars-expr-explode"]], "polars.Expr.extend_constant": [[459, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[460, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[461, "polars-expr-fill-null"]], "polars.Expr.filter": [[462, "polars-expr-filter"]], "polars.Expr.first": [[463, "polars-expr-first"]], "polars.Expr.flatten": [[464, "polars-expr-flatten"]], "polars.Expr.floor": [[465, "polars-expr-floor"]], "polars.Expr.floordiv": [[466, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[467, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[468, "polars-expr-from-json"]], "polars.Expr.gather": [[469, "polars-expr-gather"]], "polars.Expr.gather_every": [[470, "polars-expr-gather-every"]], "polars.Expr.ge": [[471, "polars-expr-ge"]], "polars.Expr.get": [[472, "polars-expr-get"]], "polars.Expr.gt": [[473, "polars-expr-gt"]], "polars.Expr.has_nulls": [[474, "polars-expr-has-nulls"]], "polars.Expr.hash": [[475, "polars-expr-hash"]], "polars.Expr.head": [[476, "polars-expr-head"]], "polars.Expr.hist": [[477, "polars-expr-hist"]], "polars.Expr.implode": [[478, "polars-expr-implode"]], "polars.Expr.inspect": [[479, "polars-expr-inspect"]], "polars.Expr.interpolate": [[480, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[481, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[482, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[483, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[484, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[485, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[486, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[487, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[488, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[489, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[490, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[491, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[492, "polars-expr-is-null"]], "polars.Expr.is_unique": [[493, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[494, "polars-expr-kurtosis"]], "polars.Expr.last": [[495, "polars-expr-last"]], "polars.Expr.le": [[496, "polars-expr-le"]], "polars.Expr.len": [[497, "polars-expr-len"]], "polars.Expr.limit": [[498, "polars-expr-limit"]], "polars.Expr.list.all": [[499, "polars-expr-list-all"]], "polars.Expr.list.any": [[500, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[501, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[502, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[503, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[504, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[505, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[506, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[507, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[508, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[509, "polars-expr-list-explode"]], "polars.Expr.list.first": [[510, "polars-expr-list-first"]], "polars.Expr.list.gather": [[511, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[512, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[513, "polars-expr-list-get"]], "polars.Expr.list.head": [[514, "polars-expr-list-head"]], "polars.Expr.list.join": [[515, "polars-expr-list-join"]], "polars.Expr.list.last": [[516, "polars-expr-list-last"]], "polars.Expr.list.len": [[517, "polars-expr-list-len"]], "polars.Expr.list.max": [[518, "polars-expr-list-max"]], "polars.Expr.list.mean": [[519, "polars-expr-list-mean"]], "polars.Expr.list.median": [[520, "polars-expr-list-median"]], "polars.Expr.list.min": [[521, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[522, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[523, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[524, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[525, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[526, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[527, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[528, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[529, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[530, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[531, "polars-expr-list-sort"]], "polars.Expr.list.std": [[532, "polars-expr-list-std"]], "polars.Expr.list.sum": [[533, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[534, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[535, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[536, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[537, "polars-expr-list-unique"]], "polars.Expr.list.var": [[538, "polars-expr-list-var"]], "polars.Expr.log": [[539, "polars-expr-log"]], "polars.Expr.log10": [[540, "polars-expr-log10"]], "polars.Expr.log1p": [[541, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[542, "polars-expr-lower-bound"]], "polars.Expr.lt": [[543, "polars-expr-lt"]], "polars.Expr.map_batches": [[544, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[545, "polars-expr-map-elements"]], "polars.Expr.max": [[546, "polars-expr-max"]], "polars.Expr.mean": [[547, "polars-expr-mean"]], "polars.Expr.median": [[548, "polars-expr-median"]], "polars.Expr.meta.eq": [[549, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[550, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[551, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[552, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[553, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[554, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[555, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[556, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[557, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[558, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[559, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[560, "polars-expr-meta-write-json"]], "polars.Expr.min": [[561, "polars-expr-min"]], "polars.Expr.mod": [[562, "polars-expr-mod"]], "polars.Expr.mode": [[563, "polars-expr-mode"]], "polars.Expr.mul": [[564, "polars-expr-mul"]], "polars.Expr.n_unique": [[565, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[566, "polars-expr-name-keep"]], "polars.Expr.name.map": [[567, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[568, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[569, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[570, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[571, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[572, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[573, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[574, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[575, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[576, "polars-expr-nan-min"]], "polars.Expr.ne": [[577, "polars-expr-ne"]], "polars.Expr.ne_missing": [[578, "polars-expr-ne-missing"]], "polars.Expr.neg": [[579, "polars-expr-neg"]], "polars.Expr.not_": [[580, "polars-expr-not"]], "polars.Expr.null_count": [[581, "polars-expr-null-count"]], "polars.Expr.or_": [[582, "polars-expr-or"]], "polars.Expr.over": [[583, "polars-expr-over"]], "polars.Expr.pct_change": [[584, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[585, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[586, "polars-expr-peak-min"]], "polars.Expr.pipe": [[587, "polars-expr-pipe"]], "polars.Expr.pow": [[588, "polars-expr-pow"]], "polars.Expr.product": [[589, "polars-expr-product"]], "polars.Expr.qcut": [[590, "polars-expr-qcut"]], "polars.Expr.quantile": [[591, "polars-expr-quantile"]], "polars.Expr.radians": [[592, "polars-expr-radians"]], "polars.Expr.rank": [[593, "polars-expr-rank"]], "polars.Expr.rechunk": [[594, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[595, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[596, "polars-expr-repeat-by"]], "polars.Expr.replace": [[597, "polars-expr-replace"]], "polars.Expr.replace_strict": [[598, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[599, "polars-expr-reshape"]], "polars.Expr.reverse": [[600, "polars-expr-reverse"]], "polars.Expr.rle": [[601, "polars-expr-rle"]], "polars.Expr.rle_id": [[602, "polars-expr-rle-id"]], "polars.Expr.rolling": [[603, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[604, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[605, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[606, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[607, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[608, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[609, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[610, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[611, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[612, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[613, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[614, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[615, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[616, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[617, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[618, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[619, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[620, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[621, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[622, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[623, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[624, "polars-expr-sample"]], "polars.Expr.search_sorted": [[625, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[626, "polars-expr-set-sorted"]], "polars.Expr.shift": [[627, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[628, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[629, "polars-expr-shuffle"]], "polars.Expr.sign": [[630, "polars-expr-sign"]], "polars.Expr.sin": [[631, "polars-expr-sin"]], "polars.Expr.sinh": [[632, "polars-expr-sinh"]], "polars.Expr.skew": [[633, "polars-expr-skew"]], "polars.Expr.slice": [[634, "polars-expr-slice"]], "polars.Expr.sort": [[635, "polars-expr-sort"]], "polars.Expr.sort_by": [[636, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[637, "polars-expr-sqrt"]], "polars.Expr.std": [[638, "polars-expr-std"]], "polars.Expr.str.concat": [[639, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[640, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[641, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[642, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[643, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[644, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[645, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[646, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[647, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[648, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[649, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[650, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[651, "polars-expr-str-find"]], "polars.Expr.str.head": [[652, "polars-expr-str-head"]], "polars.Expr.str.join": [[653, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[654, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[655, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[656, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[657, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[658, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[659, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[660, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[661, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[662, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[663, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[664, "polars-expr-str-slice"]], "polars.Expr.str.split": [[665, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[666, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[667, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[668, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[669, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[670, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[671, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[672, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[673, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[674, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[675, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[676, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[677, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[678, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[679, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[680, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[681, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[682, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[683, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[684, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[685, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[686, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[687, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.unnest": [[688, "polars-expr-struct-unnest"]], "polars.Expr.struct.with_fields": [[689, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[690, "polars-expr-sub"]], "polars.Expr.sum": [[691, "polars-expr-sum"]], "polars.Expr.tail": [[692, "polars-expr-tail"]], "polars.Expr.tan": [[693, "polars-expr-tan"]], "polars.Expr.tanh": [[694, "polars-expr-tanh"]], "polars.Expr.to_physical": [[695, "polars-expr-to-physical"]], "polars.Expr.top_k": [[696, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[697, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[698, "polars-expr-truediv"]], "polars.Expr.unique": [[699, "polars-expr-unique"]], "polars.Expr.unique_counts": [[700, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[701, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[702, "polars-expr-value-counts"]], "polars.Expr.var": [[703, "polars-expr-var"]], "polars.Expr.where": [[704, "polars-expr-where"]], "polars.Expr.xor": [[705, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[803, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[804, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[805, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[806, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[807, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[808, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[809, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[810, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[811, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[812, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[813, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[814, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[815, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[816, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[817, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[818, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[819, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[820, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[821, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[822, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[823, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[824, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[825, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[826, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[827, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[828, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[829, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[830, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[831, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[832, "polars-lazyframe-join-asof"]], "polars.LazyFrame.join_where": [[833, "polars-lazyframe-join-where"]], "polars.LazyFrame.last": [[834, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[835, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[836, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[837, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[838, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[839, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[840, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[841, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[842, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[843, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[844, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[845, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[846, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[847, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[848, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[849, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[850, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[851, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[852, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[853, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[854, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[855, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[856, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[857, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[858, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[859, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[860, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[861, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[862, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[863, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[864, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[865, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[866, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[867, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[868, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[869, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[870, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[871, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[872, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[873, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[874, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[875, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1295, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1296, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1297, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1298, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1299, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1300, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1301, "polars-sqlcontext-unregister"]], "polars.Series.__array__": [[909, "polars-series-array"]], "polars.Series.__arrow_c_stream__": [[910, "polars-series-arrow-c-stream"]], "polars.Series.__getitem__": [[911, "polars-series-getitem"]], "polars.Series.abs": [[912, "polars-series-abs"]], "polars.Series.alias": [[913, "polars-series-alias"]], "polars.Series.all": [[914, "polars-series-all"]], "polars.Series.any": [[915, "polars-series-any"]], "polars.Series.append": [[916, "polars-series-append"]], "polars.Series.approx_n_unique": [[917, "polars-series-approx-n-unique"]], "polars.Series.arccos": [[918, "polars-series-arccos"]], "polars.Series.arccosh": [[919, "polars-series-arccosh"]], "polars.Series.arcsin": [[920, "polars-series-arcsin"]], "polars.Series.arcsinh": [[921, "polars-series-arcsinh"]], "polars.Series.arctan": [[922, "polars-series-arctan"]], "polars.Series.arctanh": [[923, "polars-series-arctanh"]], "polars.Series.arg_max": [[924, "polars-series-arg-max"]], "polars.Series.arg_min": [[925, "polars-series-arg-min"]], "polars.Series.arg_sort": [[926, "polars-series-arg-sort"]], "polars.Series.arg_true": [[927, "polars-series-arg-true"]], "polars.Series.arg_unique": [[928, "polars-series-arg-unique"]], "polars.Series.arr.all": [[929, "polars-series-arr-all"]], "polars.Series.arr.any": [[930, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[931, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[932, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[933, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[934, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[935, "polars-series-arr-explode"]], "polars.Series.arr.first": [[936, "polars-series-arr-first"]], "polars.Series.arr.get": [[937, "polars-series-arr-get"]], "polars.Series.arr.join": [[938, "polars-series-arr-join"]], "polars.Series.arr.last": [[939, "polars-series-arr-last"]], "polars.Series.arr.max": [[940, "polars-series-arr-max"]], "polars.Series.arr.median": [[941, "polars-series-arr-median"]], "polars.Series.arr.min": [[942, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[943, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[944, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[945, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[946, "polars-series-arr-sort"]], "polars.Series.arr.std": [[947, "polars-series-arr-std"]], "polars.Series.arr.sum": [[948, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[949, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[950, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[951, "polars-series-arr-unique"]], "polars.Series.arr.var": [[952, "polars-series-arr-var"]], "polars.Series.bin.contains": [[953, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[954, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[955, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[956, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[957, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[958, "polars-series-bin-starts-with"]], "polars.Series.bitwise_and": [[959, "polars-series-bitwise-and"]], "polars.Series.bitwise_count_ones": [[960, "polars-series-bitwise-count-ones"]], "polars.Series.bitwise_count_zeros": [[961, "polars-series-bitwise-count-zeros"]], "polars.Series.bitwise_leading_ones": [[962, "polars-series-bitwise-leading-ones"]], "polars.Series.bitwise_leading_zeros": [[963, "polars-series-bitwise-leading-zeros"]], "polars.Series.bitwise_or": [[964, "polars-series-bitwise-or"]], "polars.Series.bitwise_trailing_ones": [[965, "polars-series-bitwise-trailing-ones"]], "polars.Series.bitwise_trailing_zeros": [[966, "polars-series-bitwise-trailing-zeros"]], "polars.Series.bitwise_xor": [[967, "polars-series-bitwise-xor"]], "polars.Series.bottom_k": [[968, "polars-series-bottom-k"]], "polars.Series.cast": [[969, "polars-series-cast"]], "polars.Series.cat.get_categories": [[970, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[971, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[972, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[973, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[974, "polars-series-cbrt"]], "polars.Series.ceil": [[975, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[976, "polars-series-chunk-lengths"]], "polars.Series.clear": [[977, "polars-series-clear"]], "polars.Series.clip": [[978, "polars-series-clip"]], "polars.Series.clone": [[979, "polars-series-clone"]], "polars.Series.cos": [[980, "polars-series-cos"]], "polars.Series.cosh": [[981, "polars-series-cosh"]], "polars.Series.cot": [[982, "polars-series-cot"]], "polars.Series.count": [[983, "polars-series-count"]], "polars.Series.cum_count": [[984, "polars-series-cum-count"]], "polars.Series.cum_max": [[985, "polars-series-cum-max"]], "polars.Series.cum_min": [[986, "polars-series-cum-min"]], "polars.Series.cum_prod": [[987, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[988, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[989, "polars-series-cumulative-eval"]], "polars.Series.cut": [[990, "polars-series-cut"]], "polars.Series.describe": [[991, "polars-series-describe"]], "polars.Series.diff": [[992, "polars-series-diff"]], "polars.Series.dot": [[993, "polars-series-dot"]], "polars.Series.drop_nans": [[994, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[995, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[996, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[997, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[998, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[999, "polars-series-dt-century"]], "polars.Series.dt.combine": [[1000, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[1001, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[1002, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[1003, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[1004, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[1005, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[1006, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[1007, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[1008, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[1009, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[1010, "polars-series-dt-max"]], "polars.Series.dt.mean": [[1011, "polars-series-dt-mean"]], "polars.Series.dt.median": [[1012, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[1013, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[1014, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[1015, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[1016, "polars-series-dt-min"]], "polars.Series.dt.minute": [[1017, "polars-series-dt-minute"]], "polars.Series.dt.month": [[1018, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[1019, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[1020, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[1021, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[1022, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[1023, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[1024, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[1025, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[1026, "polars-series-dt-round"]], "polars.Series.dt.second": [[1027, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[1028, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[1029, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[1030, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1031, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1032, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1033, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1034, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1035, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1036, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1037, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1038, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1039, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1040, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1041, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1042, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1043, "polars-series-dt-year"]], "polars.Series.dtype": [[1044, "polars-series-dtype"]], "polars.Series.entropy": [[1045, "polars-series-entropy"]], "polars.Series.eq": [[1046, "polars-series-eq"]], "polars.Series.eq_missing": [[1047, "polars-series-eq-missing"]], "polars.Series.equals": [[1048, "polars-series-equals"]], "polars.Series.estimated_size": [[1049, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1050, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1051, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1052, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1053, "polars-series-ewm-var"]], "polars.Series.exp": [[1054, "polars-series-exp"]], "polars.Series.explode": [[1055, "polars-series-explode"]], "polars.Series.extend": [[1056, "polars-series-extend"]], "polars.Series.extend_constant": [[1057, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1058, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1059, "polars-series-fill-null"]], "polars.Series.filter": [[1060, "polars-series-filter"]], "polars.Series.first": [[1061, "polars-series-first"]], "polars.Series.flags": [[1062, "polars-series-flags"]], "polars.Series.floor": [[1063, "polars-series-floor"]], "polars.Series.gather": [[1064, "polars-series-gather"]], "polars.Series.gather_every": [[1065, "polars-series-gather-every"]], "polars.Series.ge": [[1066, "polars-series-ge"]], "polars.Series.get_chunks": [[1067, "polars-series-get-chunks"]], "polars.Series.gt": [[1068, "polars-series-gt"]], "polars.Series.has_nulls": [[1069, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1070, "polars-series-has-validity"]], "polars.Series.hash": [[1071, "polars-series-hash"]], "polars.Series.head": [[1072, "polars-series-head"]], "polars.Series.hist": [[1073, "polars-series-hist"]], "polars.Series.implode": [[1074, "polars-series-implode"]], "polars.Series.interpolate": [[1075, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1076, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1077, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1078, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1079, "polars-series-is-empty"]], "polars.Series.is_finite": [[1080, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1081, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1082, "polars-series-is-in"]], "polars.Series.is_infinite": [[1083, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1084, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1085, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1086, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1087, "polars-series-is-not-null"]], "polars.Series.is_null": [[1088, "polars-series-is-null"]], "polars.Series.is_sorted": [[1089, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1090, "polars-series-is-unique"]], "polars.Series.item": [[1091, "polars-series-item"]], "polars.Series.kurtosis": [[1092, "polars-series-kurtosis"]], "polars.Series.last": [[1093, "polars-series-last"]], "polars.Series.le": [[1094, "polars-series-le"]], "polars.Series.len": [[1095, "polars-series-len"]], "polars.Series.limit": [[1096, "polars-series-limit"]], "polars.Series.list.all": [[1097, "polars-series-list-all"]], "polars.Series.list.any": [[1098, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1099, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1100, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1101, "polars-series-list-concat"]], "polars.Series.list.contains": [[1102, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1103, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1104, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1105, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1106, "polars-series-list-eval"]], "polars.Series.list.explode": [[1107, "polars-series-list-explode"]], "polars.Series.list.first": [[1108, "polars-series-list-first"]], "polars.Series.list.gather": [[1109, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1110, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1111, "polars-series-list-get"]], "polars.Series.list.head": [[1112, "polars-series-list-head"]], "polars.Series.list.join": [[1113, "polars-series-list-join"]], "polars.Series.list.last": [[1114, "polars-series-list-last"]], "polars.Series.list.len": [[1115, "polars-series-list-len"]], "polars.Series.list.max": [[1116, "polars-series-list-max"]], "polars.Series.list.mean": [[1117, "polars-series-list-mean"]], "polars.Series.list.median": [[1118, "polars-series-list-median"]], "polars.Series.list.min": [[1119, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1120, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1121, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1122, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1123, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1124, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1125, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1126, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1127, "polars-series-list-shift"]], "polars.Series.list.slice": [[1128, "polars-series-list-slice"]], "polars.Series.list.sort": [[1129, "polars-series-list-sort"]], "polars.Series.list.std": [[1130, "polars-series-list-std"]], "polars.Series.list.sum": [[1131, "polars-series-list-sum"]], "polars.Series.list.tail": [[1132, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1133, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1134, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1135, "polars-series-list-unique"]], "polars.Series.list.var": [[1136, "polars-series-list-var"]], "polars.Series.log": [[1137, "polars-series-log"]], "polars.Series.log10": [[1138, "polars-series-log10"]], "polars.Series.log1p": [[1139, "polars-series-log1p"]], "polars.Series.lower_bound": [[1140, "polars-series-lower-bound"]], "polars.Series.lt": [[1141, "polars-series-lt"]], "polars.Series.map_elements": [[1142, "polars-series-map-elements"]], "polars.Series.max": [[1143, "polars-series-max"]], "polars.Series.mean": [[1144, "polars-series-mean"]], "polars.Series.median": [[1145, "polars-series-median"]], "polars.Series.min": [[1146, "polars-series-min"]], "polars.Series.mode": [[1147, "polars-series-mode"]], "polars.Series.n_chunks": [[1148, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1149, "polars-series-n-unique"]], "polars.Series.name": [[1150, "polars-series-name"]], "polars.Series.nan_max": [[1151, "polars-series-nan-max"]], "polars.Series.nan_min": [[1152, "polars-series-nan-min"]], "polars.Series.ne": [[1153, "polars-series-ne"]], "polars.Series.ne_missing": [[1154, "polars-series-ne-missing"]], "polars.Series.new_from_index": [[1155, "polars-series-new-from-index"]], "polars.Series.not_": [[1156, "polars-series-not"]], "polars.Series.null_count": [[1157, "polars-series-null-count"]], "polars.Series.pct_change": [[1158, "polars-series-pct-change"]], "polars.Series.peak_max": [[1159, "polars-series-peak-max"]], "polars.Series.peak_min": [[1160, "polars-series-peak-min"]], "polars.Series.pow": [[1161, "polars-series-pow"]], "polars.Series.product": [[1162, "polars-series-product"]], "polars.Series.qcut": [[1163, "polars-series-qcut"]], "polars.Series.quantile": [[1164, "polars-series-quantile"]], "polars.Series.rank": [[1165, "polars-series-rank"]], "polars.Series.rechunk": [[1166, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1167, "polars-series-reinterpret"]], "polars.Series.rename": [[1168, "polars-series-rename"]], "polars.Series.replace": [[1169, "polars-series-replace"]], "polars.Series.replace_strict": [[1170, "polars-series-replace-strict"]], "polars.Series.reshape": [[1171, "polars-series-reshape"]], "polars.Series.reverse": [[1172, "polars-series-reverse"]], "polars.Series.rle": [[1173, "polars-series-rle"]], "polars.Series.rle_id": [[1174, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1175, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1176, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1177, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1178, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1179, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1180, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1181, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1182, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1183, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1184, "polars-series-rolling-var"]], "polars.Series.round": [[1185, "polars-series-round"]], "polars.Series.round_sig_figs": [[1186, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1187, "polars-series-sample"]], "polars.Series.scatter": [[1188, "polars-series-scatter"]], "polars.Series.search_sorted": [[1189, "polars-series-search-sorted"]], "polars.Series.set": [[1190, "polars-series-set"]], "polars.Series.set_sorted": [[1191, "polars-series-set-sorted"]], "polars.Series.shape": [[1192, "polars-series-shape"]], "polars.Series.shift": [[1193, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1194, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1195, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1196, "polars-series-shuffle"]], "polars.Series.sign": [[1197, "polars-series-sign"]], "polars.Series.sin": [[1198, "polars-series-sin"]], "polars.Series.sinh": [[1199, "polars-series-sinh"]], "polars.Series.skew": [[1200, "polars-series-skew"]], "polars.Series.slice": [[1201, "polars-series-slice"]], "polars.Series.sort": [[1202, "polars-series-sort"]], "polars.Series.sqrt": [[1203, "polars-series-sqrt"]], "polars.Series.std": [[1204, "polars-series-std"]], "polars.Series.str.concat": [[1205, "polars-series-str-concat"]], "polars.Series.str.contains": [[1206, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1207, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1208, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1209, "polars-series-str-decode"]], "polars.Series.str.encode": [[1210, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1211, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1212, "polars-series-str-explode"]], "polars.Series.str.extract": [[1213, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1214, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1215, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1216, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1217, "polars-series-str-find"]], "polars.Series.str.head": [[1218, "polars-series-str-head"]], "polars.Series.str.join": [[1219, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1220, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1221, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1222, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1223, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1224, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1225, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1226, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1227, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1228, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1229, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1230, "polars-series-str-slice"]], "polars.Series.str.split": [[1231, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1232, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1233, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1234, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1235, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1236, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1237, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1238, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1239, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1240, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1241, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1242, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1243, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1244, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1245, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1246, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1247, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1248, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1249, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1250, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1251, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1252, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1253, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1254, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1255, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1256, "polars-series-struct-unnest"]], "polars.Series.sum": [[1257, "polars-series-sum"]], "polars.Series.tail": [[1258, "polars-series-tail"]], "polars.Series.tan": [[1259, "polars-series-tan"]], "polars.Series.tanh": [[1260, "polars-series-tanh"]], "polars.Series.to_arrow": [[1261, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1262, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1263, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1264, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1265, "polars-series-to-jax"]], "polars.Series.to_list": [[1266, "polars-series-to-list"]], "polars.Series.to_numpy": [[1267, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1268, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1269, "polars-series-to-physical"]], "polars.Series.to_torch": [[1270, "polars-series-to-torch"]], "polars.Series.top_k": [[1271, "polars-series-top-k"]], "polars.Series.unique": [[1272, "polars-series-unique"]], "polars.Series.unique_counts": [[1273, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1274, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1275, "polars-series-value-counts"]], "polars.Series.var": [[1276, "polars-series-var"]], "polars.Series.zip_with": [[1277, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[706, "polars-all"]], "polars.all_horizontal": [[707, "polars-all-horizontal"]], "polars.any": [[708, "polars-any"]], "polars.any_horizontal": [[709, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[710, "polars-approx-n-unique"]], "polars.arange": [[711, "polars-arange"]], "polars.arctan2": [[712, "polars-arctan2"]], "polars.arctan2d": [[713, "polars-arctan2d"]], "polars.arg_sort_by": [[714, "polars-arg-sort-by"]], "polars.arg_where": [[715, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[716, "polars-business-day-count"]], "polars.coalesce": [[717, "polars-coalesce"]], "polars.col": [[784, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[718, "polars-concat-list"]], "polars.concat_str": [[719, "polars-concat-str"]], "polars.corr": [[720, "polars-corr"]], "polars.count": [[721, "polars-count"]], "polars.cov": [[722, "polars-cov"]], "polars.cum_count": [[723, "polars-cum-count"]], "polars.cum_fold": [[724, "polars-cum-fold"]], "polars.cum_reduce": [[725, "polars-cum-reduce"]], "polars.cum_sum": [[726, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[727, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[291, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[292, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[293, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[294, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[295, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[296, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[297, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[298, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[299, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[300, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[301, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[302, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[303, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[304, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[305, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[306, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[307, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[728, "polars-date"]], "polars.date_range": [[729, "polars-date-range"]], "polars.date_ranges": [[730, "polars-date-ranges"]], "polars.datetime": [[731, "polars-datetime"]], "polars.datetime_range": [[732, "polars-datetime-range"]], "polars.datetime_ranges": [[733, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[734, "polars-duration"]], "polars.element": [[735, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[736, "polars-exclude"]], "polars.first": [[737, "polars-first"]], "polars.fold": [[738, "polars-fold"]], "polars.format": [[739, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[740, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[741, "polars-groups"]], "polars.head": [[742, "polars-head"]], "polars.implode": [[743, "polars-implode"]], "polars.int_range": [[744, "polars-int-range"]], "polars.int_ranges": [[745, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[746, "polars-last"]], "polars.lazyframe.engine_config.GPUEngine": [[876, "polars-lazyframe-engine-config-gpuengine"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[877, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[878, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[879, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[880, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[881, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[882, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[883, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[884, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[885, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[886, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[887, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[888, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[889, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[890, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[891, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[892, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[893, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[894, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[895, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[747, "polars-len"]], "polars.lit": [[748, "polars-lit"]], "polars.map_batches": [[749, "polars-map-batches"]], "polars.map_groups": [[750, "polars-map-groups"]], "polars.max": [[751, "polars-max"]], "polars.max_horizontal": [[752, "polars-max-horizontal"]], "polars.mean": [[753, "polars-mean"]], "polars.mean_horizontal": [[754, "polars-mean-horizontal"]], "polars.median": [[755, "polars-median"]], "polars.min": [[756, "polars-min"]], "polars.min_horizontal": [[757, "polars-min-horizontal"]], "polars.n_unique": [[758, "polars-n-unique"]], "polars.nth": [[759, "polars-nth"]], "polars.ones": [[760, "polars-ones"]], "polars.quantile": [[761, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[762, "polars-reduce"]], "polars.repeat": [[763, "polars-repeat"]], "polars.rolling_corr": [[764, "polars-rolling-corr"]], "polars.rolling_cov": [[765, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[766, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[767, "polars-sql"]], "polars.sql_expr": [[768, "polars-sql-expr"]], "polars.std": [[769, "polars-std"]], "polars.struct": [[770, "polars-struct"]], "polars.sum": [[771, "polars-sum"]], "polars.sum_horizontal": [[772, "polars-sum-horizontal"]], "polars.tail": [[773, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[774, "polars-time"]], "polars.time_range": [[775, "polars-time-range"]], "polars.time_ranges": [[776, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[777, "polars-var"]], "polars.when": [[778, "polars-when"]], "polars.zeros": [[779, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[170, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[909, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[171, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[910, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[172, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1313, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1313, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[173, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[911, "polars.Series.__getitem__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[876, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1313, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[321, "polars.Expr.abs", false]], "abs() (polars.series method)": [[912, "polars.Series.abs", false]], "add() (polars.expr method)": [[322, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[405, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[996, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[323, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[324, "polars.Expr.alias", false]], "alias() (polars.series method)": [[913, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[706, "polars.all", false]], "all() (in module polars.selectors)": [[907, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[325, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[341, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[499, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[914, "polars.Series.all", false]], "all() (polars.series.arr method)": [[929, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1097, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[707, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[907, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[907, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[326, "polars.Expr.and_", false]], "any() (in module polars)": [[708, "polars.any", false]], "any() (polars.expr method)": [[327, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[342, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[500, "polars.Expr.list.any", false]], "any() (polars.series method)": [[915, "polars.Series.any", false]], "any() (polars.series.arr method)": [[930, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1098, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[709, "polars.any_horizontal", false]], "append() (polars.expr method)": [[328, "polars.Expr.append", false]], "append() (polars.series method)": [[916, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[710, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[174, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[329, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[803, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[917, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[711, "polars.arange", false]], "arccos() (polars.expr method)": [[330, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[918, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[331, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[919, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[332, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[920, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[333, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[921, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[334, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[922, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[712, "polars.arctan2", false]], "arctan2d() (in module polars)": [[713, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[335, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[923, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[336, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[343, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[501, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[924, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[931, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1099, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[337, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[344, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[502, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[925, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[932, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1100, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[338, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[926, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[714, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[339, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[927, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[340, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[928, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[715, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[365, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[406, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[997, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[907, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[372, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[959, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[373, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[960, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[374, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[961, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[375, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[962, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[376, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[963, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[377, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[964, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[378, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[965, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[379, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[966, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[380, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[967, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[907, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[175, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[381, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[804, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[968, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[382, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[716, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[907, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[907, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[907, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[805, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[893, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[176, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[383, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[806, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[969, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[407, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[998, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[907, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[385, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[974, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[386, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[975, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[408, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[999, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[976, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[177, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[807, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[977, "polars.Series.clear", false]], "clip() (polars.expr method)": [[387, "polars.Expr.clip", false]], "clip() (polars.series method)": [[978, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[178, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[808, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[979, "polars.Series.clone", false]], "coalesce() (in module polars)": [[717, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[809, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[810, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[179, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[811, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[180, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[812, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[409, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1000, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[503, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[639, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1101, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1205, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[718, "polars.concat_list", false]], "concat_str() (in module polars)": [[719, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[907, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[345, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[366, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[504, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[640, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[933, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[953, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1102, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1206, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[641, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1207, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[410, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1001, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[720, "polars.corr", false]], "corr() (polars.dataframe method)": [[181, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[388, "polars.Expr.cos", false]], "cos() (polars.series method)": [[980, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[389, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[981, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[390, "polars.Expr.cot", false]], "cot() (polars.series method)": [[982, "polars.Series.cot", false]], "count() (in module polars)": [[721, "polars.count", false]], "count() (polars.dataframe method)": [[182, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[391, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[813, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[983, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[346, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[505, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[642, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[934, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1103, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1208, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[722, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[723, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[392, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[984, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[724, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[393, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[985, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[394, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[986, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[395, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[987, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[725, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[726, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[396, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[988, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[727, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[397, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[989, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[398, "polars.Expr.cut", false]], "cut() (polars.series method)": [[990, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[728, "polars.date", false]], "date() (in module polars.selectors)": [[907, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[411, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1002, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[729, "polars.date_range", false]], "date_ranges() (in module polars)": [[730, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[731, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[907, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[412, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1003, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[732, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[733, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[413, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1004, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[907, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[367, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[643, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[954, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1209, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[399, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[183, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[814, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[991, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[184, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[400, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[815, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[401, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[506, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[992, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1104, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[907, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[402, "polars.Expr.dot", false]], "dot() (polars.series method)": [[993, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[185, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[816, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[186, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[403, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[994, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[187, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[404, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[507, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[817, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[995, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1105, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[414, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1005, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1044, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[188, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[818, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[734, "polars.duration", false]], "duration() (in module polars.selectors)": [[907, "polars.selectors.duration", false]], "element() (in module polars)": [[735, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[368, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[644, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[955, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1210, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[907, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[369, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[645, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[956, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1211, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[449, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1045, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[415, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1006, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[450, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[549, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1046, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[451, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1047, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[189, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1048, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[190, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1049, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[508, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1106, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[452, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1050, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[453, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1051, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[454, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1052, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[455, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1053, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[736, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[907, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[456, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1295, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1296, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[457, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1054, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[907, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[819, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[191, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[458, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[347, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[509, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[646, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[820, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1055, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[935, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1107, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1212, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[192, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1056, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[459, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1057, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[647, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1213, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[648, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1214, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[649, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1215, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[650, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1216, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[894, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[895, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[685, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1251, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1252, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[193, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[460, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[821, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1058, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[194, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[461, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[822, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1059, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[195, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[462, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[823, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1060, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[651, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1217, "polars.Series.str.find", false]], "first() (in module polars)": [[737, "polars.first", false]], "first() (in module polars.selectors)": [[907, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[463, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[348, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[510, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[824, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[880, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1061, "polars.Series.first", false]], "first() (polars.series.arr method)": [[936, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1108, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[196, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1062, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[464, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[907, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[465, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1063, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[466, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[738, "polars.fold", false]], "fold() (polars.dataframe method)": [[197, "polars.DataFrame.fold", false]], "format() (in module polars)": [[739, "polars.format", false]], "forward_fill() (polars.expr method)": [[467, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[740, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[468, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[469, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[511, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1064, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1109, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[198, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[470, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[512, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[825, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1065, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1110, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[471, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1066, "polars.Series.ge", false]], "get() (polars.expr method)": [[472, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[349, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[513, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[937, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1111, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[384, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[970, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1067, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[199, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[200, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[201, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[202, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[876, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[203, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[826, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[204, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[827, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[741, "polars.groups", false]], "gt() (polars.expr method)": [[473, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1068, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[550, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[474, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1069, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1070, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[475, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1071, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[205, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[742, "polars.head", false]], "head() (polars.dataframe method)": [[206, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[476, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[514, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[652, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[828, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[881, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1072, "polars.Series.head", false]], "head() (polars.series.list method)": [[1112, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1218, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[207, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[477, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1073, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[416, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1007, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[208, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[743, "polars.implode", false]], "implode() (polars.expr method)": [[478, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1074, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[209, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[479, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[829, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[744, "polars.int_range", false]], "int_ranges() (in module polars)": [[745, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[907, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[210, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[480, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[830, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1075, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[481, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1076, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[482, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1077, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[551, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[211, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[483, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1078, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[212, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1079, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[484, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1080, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[485, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1081, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[486, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1082, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[487, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1083, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[488, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1084, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[417, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1008, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[971, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[489, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1085, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[490, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1086, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[491, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1087, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[492, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1088, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[552, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[907, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1089, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[213, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[493, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1090, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[418, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1009, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[214, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1091, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[215, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[216, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[217, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[218, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[350, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[515, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[653, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[831, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[938, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1113, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1219, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[219, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[832, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[220, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[833, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[654, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1220, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[686, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1253, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[655, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1221, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[566, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[494, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1092, "polars.Series.kurtosis", false]], "last() (in module polars)": [[746, "polars.last", false]], "last() (in module polars.selectors)": [[907, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[495, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[351, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[516, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[834, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[882, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1093, "polars.Series.last", false]], "last() (polars.series.arr method)": [[939, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1114, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[221, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[835, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[496, "polars.Expr.le", false]], "le() (polars.series method)": [[1094, "polars.Series.le", false]], "len() (in module polars)": [[747, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[497, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[517, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[883, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1095, "polars.Series.len", false]], "len() (polars.series.list method)": [[1115, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[656, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1222, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[657, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1223, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[222, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[498, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[836, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1096, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[748, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[539, "polars.Expr.log", false]], "log() (polars.series method)": [[1137, "polars.Series.log", false]], "log10() (polars.expr method)": [[540, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1138, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[541, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1139, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[542, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1140, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[543, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1141, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[567, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[749, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[544, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[837, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[545, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1142, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[568, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[750, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[884, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[223, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[907, "polars.selectors.matches", false]], "max() (in module polars)": [[751, "polars.max", false]], "max() (polars.dataframe method)": [[224, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[546, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[352, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[518, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[838, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[885, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1143, "polars.Series.max", false]], "max() (polars.series.arr method)": [[940, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1010, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1116, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[752, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[225, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[753, "polars.mean", false]], "mean() (polars.dataframe method)": [[226, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[547, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[519, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[839, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[886, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1144, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1011, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1117, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[754, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[227, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[755, "polars.median", false]], "median() (polars.dataframe method)": [[228, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[548, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[353, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[520, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[840, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[887, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1145, "polars.Series.median", false]], "median() (polars.series.arr method)": [[941, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1012, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1118, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[229, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[841, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[230, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[842, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[419, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1013, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[420, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1014, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[421, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1015, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[756, "polars.min", false]], "min() (polars.dataframe method)": [[231, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[561, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[354, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[521, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[843, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[888, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1146, "polars.Series.min", false]], "min() (polars.series.arr method)": [[942, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1016, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1119, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[757, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[422, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1017, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[562, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[563, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1147, "polars.Series.mode", false]], "module": [[905, "module-polars.plugins", false], [907, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[423, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1018, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[424, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1019, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[425, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1020, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[564, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[233, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1148, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[758, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[234, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[565, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[355, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[522, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[889, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1149, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[943, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1120, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1150, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[575, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1151, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[576, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1152, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[426, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1021, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[577, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[553, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1153, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[578, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1154, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[579, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1155, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[580, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1156, "polars.Series.not_", false]], "nth() (in module polars)": [[759, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[235, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[581, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[844, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1157, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[907, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[427, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1022, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[760, "polars.ones", false]], "or_() (polars.expr method)": [[582, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[428, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1023, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[554, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[583, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[658, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1224, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[659, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1225, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[236, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[584, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1158, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[585, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1159, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[586, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1160, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[237, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[587, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[845, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[238, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[316, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1291, "polars.Series.plot", false]], "polars.plugins": [[905, "module-polars.plugins", false]], "polars.selectors": [[907, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[555, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[588, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1161, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[569, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[570, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[239, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[589, "polars.Expr.product", false]], "product() (polars.series method)": [[1162, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[846, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[590, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1163, "polars.Series.qcut", false]], "quantile() (in module polars)": [[761, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[240, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[591, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[847, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[890, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1164, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[429, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1024, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[592, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[593, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1165, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[241, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[594, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1166, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[762, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1297, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1298, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1299, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[905, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[595, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1167, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[242, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[848, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1168, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[687, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1254, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[763, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[596, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[597, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[660, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1169, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1226, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[661, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1227, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[243, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[662, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1228, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[598, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1170, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[430, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1025, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[599, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1171, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[244, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[600, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[356, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[523, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[663, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[849, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1172, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[944, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1121, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1229, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[601, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1173, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[602, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1174, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[245, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[603, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[850, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[764, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[765, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[604, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1175, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[605, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1176, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[606, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[607, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1177, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[608, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[609, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1178, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[610, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[611, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1179, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[612, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[613, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1180, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[614, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[615, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1181, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[616, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1182, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[617, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[618, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1183, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[619, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[620, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1184, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[621, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[556, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[622, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[431, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1185, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1026, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[623, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1186, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[246, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[247, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[248, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[249, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[624, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[524, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1187, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1122, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1188, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[250, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[851, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1255, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[625, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1189, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[432, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1027, "polars.Series.dt.second", false]], "select() (in module polars)": [[766, "polars.select", false]], "select() (polars.dataframe method)": [[251, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[852, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[252, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[853, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[253, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[557, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[854, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1190, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[525, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1123, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[526, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1124, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[254, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[626, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[855, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1191, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[527, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1125, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[528, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1126, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[255, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1192, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[256, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[627, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[357, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[529, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[856, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1193, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[945, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1127, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[857, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[628, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1194, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[257, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1195, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[629, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1196, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[630, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1197, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[907, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[631, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1198, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[632, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1199, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[370, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[957, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[633, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1200, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[258, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[634, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[530, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[664, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[858, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1201, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1128, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1230, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[259, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[635, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[358, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[531, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[859, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1202, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[946, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1129, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[636, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[665, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1231, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[666, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1232, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[667, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1233, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[767, "polars.sql", false]], "sql() (polars.dataframe method)": [[260, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[860, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[768, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1313, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[637, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1203, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[907, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[371, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[668, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[958, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1234, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[769, "polars.std", false]], "std() (polars.dataframe method)": [[261, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[638, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[359, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[532, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[861, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1204, "polars.Series.std", false]], "std() (polars.series.arr method)": [[947, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1130, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[433, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1028, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[907, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[669, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1235, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[670, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1236, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[671, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1237, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[672, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1238, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[673, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1239, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[674, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1240, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[770, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[317, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[690, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[571, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[572, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[771, "polars.sum", false]], "sum() (polars.dataframe method)": [[262, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[691, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[360, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[533, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[862, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[891, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1257, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[948, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1131, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[772, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[263, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1300, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[773, "polars.tail", false]], "tail() (polars.dataframe method)": [[264, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[692, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[534, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[675, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[863, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[892, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1258, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1132, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1241, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[693, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1259, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[694, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1260, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[907, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[774, "polars.time", false]], "time() (in module polars.selectors)": [[907, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[434, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1029, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[775, "polars.time_range", false]], "time_ranges() (in module polars)": [[776, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[435, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1030, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[535, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1133, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[265, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1261, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[676, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1242, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[677, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1243, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[678, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1244, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[266, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[267, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[268, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1262, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1263, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[269, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1264, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[679, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1245, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[270, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1265, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[361, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1266, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[949, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[972, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[573, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[680, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1246, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[271, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1267, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[272, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1268, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[695, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1269, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[273, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[436, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1031, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[274, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[362, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[536, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[950, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1134, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[681, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1247, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[682, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1248, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[275, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1270, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[574, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[683, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1249, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[276, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[696, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[864, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1271, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[697, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[437, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1032, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1033, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1034, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1035, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1036, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1037, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1038, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[277, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[558, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[698, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[444, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1039, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[559, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[278, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[699, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[363, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[537, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[865, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1272, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[951, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1135, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[700, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1273, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[279, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[688, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[866, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1256, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[280, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[867, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1301, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[907, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[281, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[282, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[868, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[701, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1274, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[283, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[973, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[702, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1275, "polars.Series.value_counts", false]], "var() (in module polars)": [[777, "polars.var", false]], "var() (polars.dataframe method)": [[284, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[703, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[364, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[538, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[869, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1276, "polars.Series.var", false]], "var() (polars.series.arr method)": [[952, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1136, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[285, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[445, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1040, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[446, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1041, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[778, "polars.when", false]], "where() (polars.expr method)": [[704, "polars.Expr.where", false]], "width (polars.dataframe property)": [[286, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[870, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[287, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[871, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[288, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[872, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[873, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[689, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[289, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[874, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[290, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[875, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[447, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1042, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[560, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[705, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[448, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1043, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[779, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[684, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1250, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1277, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1313, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [706, 4, 1, "", "all"], [707, 4, 1, "", "all_horizontal"], [708, 4, 1, "", "any"], [709, 4, 1, "", "any_horizontal"], [710, 4, 1, "", "approx_n_unique"], [711, 4, 1, "", "arange"], [712, 4, 1, "", "arctan2"], [713, 4, 1, "", "arctan2d"], [714, 4, 1, "", "arg_sort_by"], [715, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [716, 4, 1, "", "business_day_count"], [717, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [718, 4, 1, "", "concat_list"], [719, 4, 1, "", "concat_str"], [720, 4, 1, "", "corr"], [721, 4, 1, "", "count"], [722, 4, 1, "", "cov"], [723, 4, 1, "", "cum_count"], [724, 4, 1, "", "cum_fold"], [725, 4, 1, "", "cum_reduce"], [726, 4, 1, "", "cum_sum"], [727, 4, 1, "", "cum_sum_horizontal"], [728, 4, 1, "", "date"], [729, 4, 1, "", "date_range"], [730, 4, 1, "", "date_ranges"], [731, 4, 1, "", "datetime"], [732, 4, 1, "", "datetime_range"], [733, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [734, 4, 1, "", "duration"], [735, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [736, 4, 1, "", "exclude"], [737, 4, 1, "", "first"], [738, 4, 1, "", "fold"], [739, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [740, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [741, 4, 1, "", "groups"], [742, 4, 1, "", "head"], [743, 4, 1, "", "implode"], [744, 4, 1, "", "int_range"], [745, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [746, 4, 1, "", "last"], [747, 4, 1, "", "len"], [748, 4, 1, "", "lit"], [749, 4, 1, "", "map_batches"], [750, 4, 1, "", "map_groups"], [751, 4, 1, "", "max"], [752, 4, 1, "", "max_horizontal"], [753, 4, 1, "", "mean"], [754, 4, 1, "", "mean_horizontal"], [755, 4, 1, "", "median"], [756, 4, 1, "", "min"], [757, 4, 1, "", "min_horizontal"], [758, 4, 1, "", "n_unique"], [759, 4, 1, "", "nth"], [760, 4, 1, "", "ones"], [905, 6, 0, "-", "plugins"], [761, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [762, 4, 1, "", "reduce"], [763, 4, 1, "", "repeat"], [764, 4, 1, "", "rolling_corr"], [765, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [766, 4, 1, "", "select"], [907, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [767, 4, 1, "", "sql"], [768, 4, 1, "", "sql_expr"], [769, 4, 1, "", "std"], [770, 4, 1, "", "struct"], [771, 4, 1, "", "sum"], [772, 4, 1, "", "sum_horizontal"], [773, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [774, 4, 1, "", "time"], [775, 4, 1, "", "time_range"], [776, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [777, 4, 1, "", "var"], [778, 4, 1, "", "when"], [779, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__array__"], [171, 0, 1, "", "__arrow_c_stream__"], [172, 0, 1, "", "__dataframe__"], [173, 0, 1, "", "__getitem__"], [174, 0, 1, "", "approx_n_unique"], [175, 0, 1, "", "bottom_k"], [176, 0, 1, "", "cast"], [177, 0, 1, "", "clear"], [178, 0, 1, "", "clone"], [179, 0, 1, "", "collect_schema"], [180, 1, 1, "", "columns"], [181, 0, 1, "", "corr"], [182, 0, 1, "", "count"], [183, 0, 1, "", "describe"], [184, 0, 1, "", "deserialize"], [185, 0, 1, "", "drop"], [186, 0, 1, "", "drop_in_place"], [187, 0, 1, "", "drop_nulls"], [188, 1, 1, "", "dtypes"], [189, 0, 1, "", "equals"], [190, 0, 1, "", "estimated_size"], [191, 0, 1, "", "explode"], [192, 0, 1, "", "extend"], [193, 0, 1, "", "fill_nan"], [194, 0, 1, "", "fill_null"], [195, 0, 1, "", "filter"], [196, 1, 1, "", "flags"], [197, 0, 1, "", "fold"], [198, 0, 1, "", "gather_every"], [199, 0, 1, "", "get_column"], [200, 0, 1, "", "get_column_index"], [201, 0, 1, "", "get_columns"], [202, 0, 1, "", "glimpse"], [203, 0, 1, "", "group_by"], [204, 0, 1, "", "group_by_dynamic"], [205, 0, 1, "", "hash_rows"], [206, 0, 1, "", "head"], [207, 1, 1, "", "height"], [208, 0, 1, "", "hstack"], [209, 0, 1, "", "insert_column"], [210, 0, 1, "", "interpolate"], [211, 0, 1, "", "is_duplicated"], [212, 0, 1, "", "is_empty"], [213, 0, 1, "", "is_unique"], [214, 0, 1, "", "item"], [215, 0, 1, "", "iter_columns"], [216, 0, 1, "", "iter_rows"], [217, 0, 1, "", "iter_slices"], [218, 0, 1, "", "join"], [219, 0, 1, "", "join_asof"], [220, 0, 1, "", "join_where"], [221, 0, 1, "", "lazy"], [222, 0, 1, "", "limit"], [223, 0, 1, "", "map_rows"], [224, 0, 1, "", "max"], [225, 0, 1, "", "max_horizontal"], [226, 0, 1, "", "mean"], [227, 0, 1, "", "mean_horizontal"], [228, 0, 1, "", "median"], [229, 0, 1, "", "melt"], [230, 0, 1, "", "merge_sorted"], [231, 0, 1, "", "min"], [232, 0, 1, "", "min_horizontal"], [233, 0, 1, "", "n_chunks"], [234, 0, 1, "", "n_unique"], [235, 0, 1, "", "null_count"], [236, 0, 1, "", "partition_by"], [237, 0, 1, "", "pipe"], [238, 0, 1, "", "pivot"], [316, 1, 1, "", "plot"], [239, 0, 1, "", "product"], [240, 0, 1, "", "quantile"], [241, 0, 1, "", "rechunk"], [242, 0, 1, "", "rename"], [243, 0, 1, "", "replace_column"], [244, 0, 1, "", "reverse"], [245, 0, 1, "", "rolling"], [246, 0, 1, "", "row"], [247, 0, 1, "", "rows"], [248, 0, 1, "", "rows_by_key"], [249, 0, 1, "", "sample"], [250, 1, 1, "", "schema"], [251, 0, 1, "", "select"], [252, 0, 1, "", "select_seq"], [253, 0, 1, "", "serialize"], [254, 0, 1, "", "set_sorted"], [255, 1, 1, "", "shape"], [256, 0, 1, "", "shift"], [257, 0, 1, "", "shrink_to_fit"], [258, 0, 1, "", "slice"], [259, 0, 1, "", "sort"], [260, 0, 1, "", "sql"], [261, 0, 1, "", "std"], [317, 1, 1, "", "style"], [262, 0, 1, "", "sum"], [263, 0, 1, "", "sum_horizontal"], [264, 0, 1, "", "tail"], [265, 0, 1, "", "to_arrow"], [266, 0, 1, "", "to_dict"], [267, 0, 1, "", "to_dicts"], [268, 0, 1, "", "to_dummies"], [269, 0, 1, "", "to_init_repr"], [270, 0, 1, "", "to_jax"], [271, 0, 1, "", "to_numpy"], [272, 0, 1, "", "to_pandas"], [273, 0, 1, "", "to_series"], [274, 0, 1, "", "to_struct"], [275, 0, 1, "", "to_torch"], [276, 0, 1, "", "top_k"], [277, 0, 1, "", "transpose"], [278, 0, 1, "", "unique"], [279, 0, 1, "", "unnest"], [280, 0, 1, "", "unpivot"], [281, 0, 1, "", "unstack"], [282, 0, 1, "", "update"], [283, 0, 1, "", "upsample"], [284, 0, 1, "", "var"], [285, 0, 1, "", "vstack"], [286, 1, 1, "", "width"], [287, 0, 1, "", "with_columns"], [288, 0, 1, "", "with_columns_seq"], [289, 0, 1, "", "with_row_count"], [290, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[321, 0, 1, "", "abs"], [322, 0, 1, "", "add"], [323, 0, 1, "", "agg_groups"], [324, 0, 1, "", "alias"], [325, 0, 1, "", "all"], [326, 0, 1, "", "and_"], [327, 0, 1, "", "any"], [328, 0, 1, "", "append"], [329, 0, 1, "", "approx_n_unique"], [330, 0, 1, "", "arccos"], [331, 0, 1, "", "arccosh"], [332, 0, 1, "", "arcsin"], [333, 0, 1, "", "arcsinh"], [334, 0, 1, "", "arctan"], [335, 0, 1, "", "arctanh"], [336, 0, 1, "", "arg_max"], [337, 0, 1, "", "arg_min"], [338, 0, 1, "", "arg_sort"], [339, 0, 1, "", "arg_true"], [340, 0, 1, "", "arg_unique"], [365, 0, 1, "", "backward_fill"], [372, 0, 1, "", "bitwise_and"], [373, 0, 1, "", "bitwise_count_ones"], [374, 0, 1, "", "bitwise_count_zeros"], [375, 0, 1, "", "bitwise_leading_ones"], [376, 0, 1, "", "bitwise_leading_zeros"], [377, 0, 1, "", "bitwise_or"], [378, 0, 1, "", "bitwise_trailing_ones"], [379, 0, 1, "", "bitwise_trailing_zeros"], [380, 0, 1, "", "bitwise_xor"], [381, 0, 1, "", "bottom_k"], [382, 0, 1, "", "bottom_k_by"], [383, 0, 1, "", "cast"], [385, 0, 1, "", "cbrt"], [386, 0, 1, "", "ceil"], [387, 0, 1, "", "clip"], [388, 0, 1, "", "cos"], [389, 0, 1, "", "cosh"], [390, 0, 1, "", "cot"], [391, 0, 1, "", "count"], [392, 0, 1, "", "cum_count"], [393, 0, 1, "", "cum_max"], [394, 0, 1, "", "cum_min"], [395, 0, 1, "", "cum_prod"], [396, 0, 1, "", "cum_sum"], [397, 0, 1, "", "cumulative_eval"], [398, 0, 1, "", "cut"], [399, 0, 1, "", "degrees"], [400, 0, 1, "", "deserialize"], [401, 0, 1, "", "diff"], [402, 0, 1, "", "dot"], [403, 0, 1, "", "drop_nans"], [404, 0, 1, "", "drop_nulls"], [449, 0, 1, "", "entropy"], [450, 0, 1, "", "eq"], [451, 0, 1, "", "eq_missing"], [452, 0, 1, "", "ewm_mean"], [453, 0, 1, "", "ewm_mean_by"], [454, 0, 1, "", "ewm_std"], [455, 0, 1, "", "ewm_var"], [456, 0, 1, "", "exclude"], [457, 0, 1, "", "exp"], [458, 0, 1, "", "explode"], [459, 0, 1, "", "extend_constant"], [460, 0, 1, "", "fill_nan"], [461, 0, 1, "", "fill_null"], [462, 0, 1, "", "filter"], [463, 0, 1, "", "first"], [464, 0, 1, "", "flatten"], [465, 0, 1, "", "floor"], [466, 0, 1, "", "floordiv"], [467, 0, 1, "", "forward_fill"], [468, 0, 1, "", "from_json"], [469, 0, 1, "", "gather"], [470, 0, 1, "", "gather_every"], [471, 0, 1, "", "ge"], [472, 0, 1, "", "get"], [473, 0, 1, "", "gt"], [474, 0, 1, "", "has_nulls"], [475, 0, 1, "", "hash"], [476, 0, 1, "", "head"], [477, 0, 1, "", "hist"], [478, 0, 1, "", "implode"], [479, 0, 1, "", "inspect"], [480, 0, 1, "", "interpolate"], [481, 0, 1, "", "interpolate_by"], [482, 0, 1, "", "is_between"], [483, 0, 1, "", "is_duplicated"], [484, 0, 1, "", "is_finite"], [485, 0, 1, "", "is_first_distinct"], [486, 0, 1, "", "is_in"], [487, 0, 1, "", "is_infinite"], [488, 0, 1, "", "is_last_distinct"], [489, 0, 1, "", "is_nan"], [490, 0, 1, "", "is_not_nan"], [491, 0, 1, "", "is_not_null"], [492, 0, 1, "", "is_null"], [493, 0, 1, "", "is_unique"], [494, 0, 1, "", "kurtosis"], [495, 0, 1, "", "last"], [496, 0, 1, "", "le"], [497, 0, 1, "", "len"], [498, 0, 1, "", "limit"], [539, 0, 1, "", "log"], [540, 0, 1, "", "log10"], [541, 0, 1, "", "log1p"], [542, 0, 1, "", "lower_bound"], [543, 0, 1, "", "lt"], [544, 0, 1, "", "map_batches"], [545, 0, 1, "", "map_elements"], [546, 0, 1, "", "max"], [547, 0, 1, "", "mean"], [548, 0, 1, "", "median"], [561, 0, 1, "", "min"], [562, 0, 1, "", "mod"], [563, 0, 1, "", "mode"], [564, 0, 1, "", "mul"], [565, 0, 1, "", "n_unique"], [575, 0, 1, "", "nan_max"], [576, 0, 1, "", "nan_min"], [577, 0, 1, "", "ne"], [578, 0, 1, "", "ne_missing"], [579, 0, 1, "", "neg"], [580, 0, 1, "", "not_"], [581, 0, 1, "", "null_count"], [582, 0, 1, "", "or_"], [583, 0, 1, "", "over"], [584, 0, 1, "", "pct_change"], [585, 0, 1, "", "peak_max"], [586, 0, 1, "", "peak_min"], [587, 0, 1, "", "pipe"], [588, 0, 1, "", "pow"], [589, 0, 1, "", "product"], [590, 0, 1, "", "qcut"], [591, 0, 1, "", "quantile"], [592, 0, 1, "", "radians"], [593, 0, 1, "", "rank"], [594, 0, 1, "", "rechunk"], [595, 0, 1, "", "reinterpret"], [596, 0, 1, "", "repeat_by"], [597, 0, 1, "", "replace"], [598, 0, 1, "", "replace_strict"], [599, 0, 1, "", "reshape"], [600, 0, 1, "", "reverse"], [601, 0, 1, "", "rle"], [602, 0, 1, "", "rle_id"], [603, 0, 1, "", "rolling"], [604, 0, 1, "", "rolling_map"], [605, 0, 1, "", "rolling_max"], [606, 0, 1, "", "rolling_max_by"], [607, 0, 1, "", "rolling_mean"], [608, 0, 1, "", "rolling_mean_by"], [609, 0, 1, "", "rolling_median"], [610, 0, 1, "", "rolling_median_by"], [611, 0, 1, "", "rolling_min"], [612, 0, 1, "", "rolling_min_by"], [613, 0, 1, "", "rolling_quantile"], [614, 0, 1, "", "rolling_quantile_by"], [615, 0, 1, "", "rolling_skew"], [616, 0, 1, "", "rolling_std"], [617, 0, 1, "", "rolling_std_by"], [618, 0, 1, "", "rolling_sum"], [619, 0, 1, "", "rolling_sum_by"], [620, 0, 1, "", "rolling_var"], [621, 0, 1, "", "rolling_var_by"], [622, 0, 1, "", "round"], [623, 0, 1, "", "round_sig_figs"], [624, 0, 1, "", "sample"], [625, 0, 1, "", "search_sorted"], [626, 0, 1, "", "set_sorted"], [627, 0, 1, "", "shift"], [628, 0, 1, "", "shrink_dtype"], [629, 0, 1, "", "shuffle"], [630, 0, 1, "", "sign"], [631, 0, 1, "", "sin"], [632, 0, 1, "", "sinh"], [633, 0, 1, "", "skew"], [634, 0, 1, "", "slice"], [635, 0, 1, "", "sort"], [636, 0, 1, "", "sort_by"], [637, 0, 1, "", "sqrt"], [638, 0, 1, "", "std"], [690, 0, 1, "", "sub"], [691, 0, 1, "", "sum"], [692, 0, 1, "", "tail"], [693, 0, 1, "", "tan"], [694, 0, 1, "", "tanh"], [695, 0, 1, "", "to_physical"], [696, 0, 1, "", "top_k"], [697, 0, 1, "", "top_k_by"], [698, 0, 1, "", "truediv"], [699, 0, 1, "", "unique"], [700, 0, 1, "", "unique_counts"], [701, 0, 1, "", "upper_bound"], [702, 0, 1, "", "value_counts"], [703, 0, 1, "", "var"], [704, 0, 1, "", "where"], [705, 0, 1, "", "xor"]], "polars.Expr.arr": [[341, 0, 1, "", "all"], [342, 0, 1, "", "any"], [343, 0, 1, "", "arg_max"], [344, 0, 1, "", "arg_min"], [345, 0, 1, "", "contains"], [346, 0, 1, "", "count_matches"], [347, 0, 1, "", "explode"], [348, 0, 1, "", "first"], [349, 0, 1, "", "get"], [350, 0, 1, "", "join"], [351, 0, 1, "", "last"], [352, 0, 1, "", "max"], [353, 0, 1, "", "median"], [354, 0, 1, "", "min"], [355, 0, 1, "", "n_unique"], [356, 0, 1, "", "reverse"], [357, 0, 1, "", "shift"], [358, 0, 1, "", "sort"], [359, 0, 1, "", "std"], [360, 0, 1, "", "sum"], [361, 0, 1, "", "to_list"], [362, 0, 1, "", "to_struct"], [363, 0, 1, "", "unique"], [364, 0, 1, "", "var"]], "polars.Expr.bin": [[366, 0, 1, "", "contains"], [367, 0, 1, "", "decode"], [368, 0, 1, "", "encode"], [369, 0, 1, "", "ends_with"], [370, 0, 1, "", "size"], [371, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[384, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[405, 0, 1, "", "add_business_days"], [406, 0, 1, "", "base_utc_offset"], [407, 0, 1, "", "cast_time_unit"], [408, 0, 1, "", "century"], [409, 0, 1, "", "combine"], [410, 0, 1, "", "convert_time_zone"], [411, 0, 1, "", "date"], [412, 0, 1, "", "datetime"], [413, 0, 1, "", "day"], [414, 0, 1, "", "dst_offset"], [415, 0, 1, "", "epoch"], [416, 0, 1, "", "hour"], [417, 0, 1, "", "is_leap_year"], [418, 0, 1, "", "iso_year"], [419, 0, 1, "", "microsecond"], [420, 0, 1, "", "millennium"], [421, 0, 1, "", "millisecond"], [422, 0, 1, "", "minute"], [423, 0, 1, "", "month"], [424, 0, 1, "", "month_end"], [425, 0, 1, "", "month_start"], [426, 0, 1, "", "nanosecond"], [427, 0, 1, "", "offset_by"], [428, 0, 1, "", "ordinal_day"], [429, 0, 1, "", "quarter"], [430, 0, 1, "", "replace_time_zone"], [431, 0, 1, "", "round"], [432, 0, 1, "", "second"], [433, 0, 1, "", "strftime"], [434, 0, 1, "", "time"], [435, 0, 1, "", "timestamp"], [436, 0, 1, "", "to_string"], [437, 0, 1, "", "total_days"], [438, 0, 1, "", "total_hours"], [439, 0, 1, "", "total_microseconds"], [440, 0, 1, "", "total_milliseconds"], [441, 0, 1, "", "total_minutes"], [442, 0, 1, "", "total_nanoseconds"], [443, 0, 1, "", "total_seconds"], [444, 0, 1, "", "truncate"], [445, 0, 1, "", "week"], [446, 0, 1, "", "weekday"], [447, 0, 1, "", "with_time_unit"], [448, 0, 1, "", "year"]], "polars.Expr.list": [[499, 0, 1, "", "all"], [500, 0, 1, "", "any"], [501, 0, 1, "", "arg_max"], [502, 0, 1, "", "arg_min"], [503, 0, 1, "", "concat"], [504, 0, 1, "", "contains"], [505, 0, 1, "", "count_matches"], [506, 0, 1, "", "diff"], [507, 0, 1, "", "drop_nulls"], [508, 0, 1, "", "eval"], [509, 0, 1, "", "explode"], [510, 0, 1, "", "first"], [511, 0, 1, "", "gather"], [512, 0, 1, "", "gather_every"], [513, 0, 1, "", "get"], [514, 0, 1, "", "head"], [515, 0, 1, "", "join"], [516, 0, 1, "", "last"], [517, 0, 1, "", "len"], [518, 0, 1, "", "max"], [519, 0, 1, "", "mean"], [520, 0, 1, "", "median"], [521, 0, 1, "", "min"], [522, 0, 1, "", "n_unique"], [523, 0, 1, "", "reverse"], [524, 0, 1, "", "sample"], [525, 0, 1, "", "set_difference"], [526, 0, 1, "", "set_intersection"], [527, 0, 1, "", "set_symmetric_difference"], [528, 0, 1, "", "set_union"], [529, 0, 1, "", "shift"], [530, 0, 1, "", "slice"], [531, 0, 1, "", "sort"], [532, 0, 1, "", "std"], [533, 0, 1, "", "sum"], [534, 0, 1, "", "tail"], [535, 0, 1, "", "to_array"], [536, 0, 1, "", "to_struct"], [537, 0, 1, "", "unique"], [538, 0, 1, "", "var"]], "polars.Expr.meta": [[549, 0, 1, "", "eq"], [550, 0, 1, "", "has_multiple_outputs"], [551, 0, 1, "", "is_column_selection"], [552, 0, 1, "", "is_regex_projection"], [553, 0, 1, "", "ne"], [554, 0, 1, "", "output_name"], [555, 0, 1, "", "pop"], [556, 0, 1, "", "root_names"], [557, 0, 1, "", "serialize"], [558, 0, 1, "", "tree_format"], [559, 0, 1, "", "undo_aliases"], [560, 0, 1, "", "write_json"]], "polars.Expr.name": [[566, 0, 1, "", "keep"], [567, 0, 1, "", "map"], [568, 0, 1, "", "map_fields"], [569, 0, 1, "", "prefix"], [570, 0, 1, "", "prefix_fields"], [571, 0, 1, "", "suffix"], [572, 0, 1, "", "suffix_fields"], [573, 0, 1, "", "to_lowercase"], [574, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[639, 0, 1, "", "concat"], [640, 0, 1, "", "contains"], [641, 0, 1, "", "contains_any"], [642, 0, 1, "", "count_matches"], [643, 0, 1, "", "decode"], [644, 0, 1, "", "encode"], [645, 0, 1, "", "ends_with"], [646, 0, 1, "", "explode"], [647, 0, 1, "", "extract"], [648, 0, 1, "", "extract_all"], [649, 0, 1, "", "extract_groups"], [650, 0, 1, "", "extract_many"], [651, 0, 1, "", "find"], [652, 0, 1, "", "head"], [653, 0, 1, "", "join"], [654, 0, 1, "", "json_decode"], [655, 0, 1, "", "json_path_match"], [656, 0, 1, "", "len_bytes"], [657, 0, 1, "", "len_chars"], [658, 0, 1, "", "pad_end"], [659, 0, 1, "", "pad_start"], [660, 0, 1, "", "replace"], [661, 0, 1, "", "replace_all"], [662, 0, 1, "", "replace_many"], [663, 0, 1, "", "reverse"], [664, 0, 1, "", "slice"], [665, 0, 1, "", "split"], [666, 0, 1, "", "split_exact"], [667, 0, 1, "", "splitn"], [668, 0, 1, "", "starts_with"], [669, 0, 1, "", "strip_chars"], [670, 0, 1, "", "strip_chars_end"], [671, 0, 1, "", "strip_chars_start"], [672, 0, 1, "", "strip_prefix"], [673, 0, 1, "", "strip_suffix"], [674, 0, 1, "", "strptime"], [675, 0, 1, "", "tail"], [676, 0, 1, "", "to_date"], [677, 0, 1, "", "to_datetime"], [678, 0, 1, "", "to_decimal"], [679, 0, 1, "", "to_integer"], [680, 0, 1, "", "to_lowercase"], [681, 0, 1, "", "to_time"], [682, 0, 1, "", "to_titlecase"], [683, 0, 1, "", "to_uppercase"], [684, 0, 1, "", "zfill"]], "polars.Expr.struct": [[685, 0, 1, "", "field"], [686, 0, 1, "", "json_encode"], [687, 0, 1, "", "rename_fields"], [688, 0, 1, "", "unnest"], [689, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[803, 0, 1, "", "approx_n_unique"], [804, 0, 1, "", "bottom_k"], [805, 0, 1, "", "cache"], [806, 0, 1, "", "cast"], [807, 0, 1, "", "clear"], [808, 0, 1, "", "clone"], [809, 0, 1, "", "collect"], [810, 0, 1, "", "collect_async"], [811, 0, 1, "", "collect_schema"], [812, 1, 1, "", "columns"], [813, 0, 1, "", "count"], [814, 0, 1, "", "describe"], [815, 0, 1, "", "deserialize"], [816, 0, 1, "", "drop"], [817, 0, 1, "", "drop_nulls"], [818, 1, 1, "", "dtypes"], [819, 0, 1, "", "explain"], [820, 0, 1, "", "explode"], [821, 0, 1, "", "fill_nan"], [822, 0, 1, "", "fill_null"], [823, 0, 1, "", "filter"], [824, 0, 1, "", "first"], [825, 0, 1, "", "gather_every"], [826, 0, 1, "", "group_by"], [827, 0, 1, "", "group_by_dynamic"], [828, 0, 1, "", "head"], [829, 0, 1, "", "inspect"], [830, 0, 1, "", "interpolate"], [831, 0, 1, "", "join"], [832, 0, 1, "", "join_asof"], [833, 0, 1, "", "join_where"], [834, 0, 1, "", "last"], [835, 0, 1, "", "lazy"], [836, 0, 1, "", "limit"], [837, 0, 1, "", "map_batches"], [838, 0, 1, "", "max"], [839, 0, 1, "", "mean"], [840, 0, 1, "", "median"], [841, 0, 1, "", "melt"], [842, 0, 1, "", "merge_sorted"], [843, 0, 1, "", "min"], [844, 0, 1, "", "null_count"], [845, 0, 1, "", "pipe"], [846, 0, 1, "", "profile"], [847, 0, 1, "", "quantile"], [848, 0, 1, "", "rename"], [849, 0, 1, "", "reverse"], [850, 0, 1, "", "rolling"], [851, 1, 1, "", "schema"], [852, 0, 1, "", "select"], [853, 0, 1, "", "select_seq"], [854, 0, 1, "", "serialize"], [855, 0, 1, "", "set_sorted"], [856, 0, 1, "", "shift"], [857, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [858, 0, 1, "", "slice"], [859, 0, 1, "", "sort"], [860, 0, 1, "", "sql"], [861, 0, 1, "", "std"], [862, 0, 1, "", "sum"], [863, 0, 1, "", "tail"], [864, 0, 1, "", "top_k"], [865, 0, 1, "", "unique"], [866, 0, 1, "", "unnest"], [867, 0, 1, "", "unpivot"], [868, 0, 1, "", "update"], [869, 0, 1, "", "var"], [870, 1, 1, "", "width"], [871, 0, 1, "", "with_columns"], [872, 0, 1, "", "with_columns_seq"], [873, 0, 1, "", "with_context"], [874, 0, 1, "", "with_row_count"], [875, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1313, 0, 1, "", "__enter__"], [1313, 0, 1, "", "__exit__"], [1313, 0, 1, "", "__init__"], [1295, 0, 1, "", "execute"], [1296, 0, 1, "", "execute_global"], [1297, 0, 1, "", "register"], [1298, 0, 1, "", "register_globals"], [1299, 0, 1, "", "register_many"], [1300, 0, 1, "", "tables"], [1301, 0, 1, "", "unregister"]], "polars.Series": [[909, 0, 1, "", "__array__"], [910, 0, 1, "", "__arrow_c_stream__"], [911, 0, 1, "", "__getitem__"], [912, 0, 1, "", "abs"], [913, 0, 1, "", "alias"], [914, 0, 1, "", "all"], [915, 0, 1, "", "any"], [916, 0, 1, "", "append"], [917, 0, 1, "", "approx_n_unique"], [918, 0, 1, "", "arccos"], [919, 0, 1, "", "arccosh"], [920, 0, 1, "", "arcsin"], [921, 0, 1, "", "arcsinh"], [922, 0, 1, "", "arctan"], [923, 0, 1, "", "arctanh"], [924, 0, 1, "", "arg_max"], [925, 0, 1, "", "arg_min"], [926, 0, 1, "", "arg_sort"], [927, 0, 1, "", "arg_true"], [928, 0, 1, "", "arg_unique"], [959, 0, 1, "", "bitwise_and"], [960, 0, 1, "", "bitwise_count_ones"], [961, 0, 1, "", "bitwise_count_zeros"], [962, 0, 1, "", "bitwise_leading_ones"], [963, 0, 1, "", "bitwise_leading_zeros"], [964, 0, 1, "", "bitwise_or"], [965, 0, 1, "", "bitwise_trailing_ones"], [966, 0, 1, "", "bitwise_trailing_zeros"], [967, 0, 1, "", "bitwise_xor"], [968, 0, 1, "", "bottom_k"], [969, 0, 1, "", "cast"], [974, 0, 1, "", "cbrt"], [975, 0, 1, "", "ceil"], [976, 0, 1, "", "chunk_lengths"], [977, 0, 1, "", "clear"], [978, 0, 1, "", "clip"], [979, 0, 1, "", "clone"], [980, 0, 1, "", "cos"], [981, 0, 1, "", "cosh"], [982, 0, 1, "", "cot"], [983, 0, 1, "", "count"], [984, 0, 1, "", "cum_count"], [985, 0, 1, "", "cum_max"], [986, 0, 1, "", "cum_min"], [987, 0, 1, "", "cum_prod"], [988, 0, 1, "", "cum_sum"], [989, 0, 1, "", "cumulative_eval"], [990, 0, 1, "", "cut"], [991, 0, 1, "", "describe"], [992, 0, 1, "", "diff"], [993, 0, 1, "", "dot"], [994, 0, 1, "", "drop_nans"], [995, 0, 1, "", "drop_nulls"], [1044, 1, 1, "", "dtype"], [1045, 0, 1, "", "entropy"], [1046, 0, 1, "", "eq"], [1047, 0, 1, "", "eq_missing"], [1048, 0, 1, "", "equals"], [1049, 0, 1, "", "estimated_size"], [1050, 0, 1, "", "ewm_mean"], [1051, 0, 1, "", "ewm_mean_by"], [1052, 0, 1, "", "ewm_std"], [1053, 0, 1, "", "ewm_var"], [1054, 0, 1, "", "exp"], [1055, 0, 1, "", "explode"], [1056, 0, 1, "", "extend"], [1057, 0, 1, "", "extend_constant"], [1058, 0, 1, "", "fill_nan"], [1059, 0, 1, "", "fill_null"], [1060, 0, 1, "", "filter"], [1061, 0, 1, "", "first"], [1062, 1, 1, "", "flags"], [1063, 0, 1, "", "floor"], [1064, 0, 1, "", "gather"], [1065, 0, 1, "", "gather_every"], [1066, 0, 1, "", "ge"], [1067, 0, 1, "", "get_chunks"], [1068, 0, 1, "", "gt"], [1069, 0, 1, "", "has_nulls"], [1070, 0, 1, "", "has_validity"], [1071, 0, 1, "", "hash"], [1072, 0, 1, "", "head"], [1073, 0, 1, "", "hist"], [1074, 0, 1, "", "implode"], [1075, 0, 1, "", "interpolate"], [1076, 0, 1, "", "interpolate_by"], [1077, 0, 1, "", "is_between"], [1078, 0, 1, "", "is_duplicated"], [1079, 0, 1, "", "is_empty"], [1080, 0, 1, "", "is_finite"], [1081, 0, 1, "", "is_first_distinct"], [1082, 0, 1, "", "is_in"], [1083, 0, 1, "", "is_infinite"], [1084, 0, 1, "", "is_last_distinct"], [1085, 0, 1, "", "is_nan"], [1086, 0, 1, "", "is_not_nan"], [1087, 0, 1, "", "is_not_null"], [1088, 0, 1, "", "is_null"], [1089, 0, 1, "", "is_sorted"], [1090, 0, 1, "", "is_unique"], [1091, 0, 1, "", "item"], [1092, 0, 1, "", "kurtosis"], [1093, 0, 1, "", "last"], [1094, 0, 1, "", "le"], [1095, 0, 1, "", "len"], [1096, 0, 1, "", "limit"], [1137, 0, 1, "", "log"], [1138, 0, 1, "", "log10"], [1139, 0, 1, "", "log1p"], [1140, 0, 1, "", "lower_bound"], [1141, 0, 1, "", "lt"], [1142, 0, 1, "", "map_elements"], [1143, 0, 1, "", "max"], [1144, 0, 1, "", "mean"], [1145, 0, 1, "", "median"], [1146, 0, 1, "", "min"], [1147, 0, 1, "", "mode"], [1148, 0, 1, "", "n_chunks"], [1149, 0, 1, "", "n_unique"], [1150, 1, 1, "", "name"], [1151, 0, 1, "", "nan_max"], [1152, 0, 1, "", "nan_min"], [1153, 0, 1, "", "ne"], [1154, 0, 1, "", "ne_missing"], [1155, 0, 1, "", "new_from_index"], [1156, 0, 1, "", "not_"], [1157, 0, 1, "", "null_count"], [1158, 0, 1, "", "pct_change"], [1159, 0, 1, "", "peak_max"], [1160, 0, 1, "", "peak_min"], [1291, 1, 1, "", "plot"], [1161, 0, 1, "", "pow"], [1162, 0, 1, "", "product"], [1163, 0, 1, "", "qcut"], [1164, 0, 1, "", "quantile"], [1165, 0, 1, "", "rank"], [1166, 0, 1, "", "rechunk"], [1167, 0, 1, "", "reinterpret"], [1168, 0, 1, "", "rename"], [1169, 0, 1, "", "replace"], [1170, 0, 1, "", "replace_strict"], [1171, 0, 1, "", "reshape"], [1172, 0, 1, "", "reverse"], [1173, 0, 1, "", "rle"], [1174, 0, 1, "", "rle_id"], [1175, 0, 1, "", "rolling_map"], [1176, 0, 1, "", "rolling_max"], [1177, 0, 1, "", "rolling_mean"], [1178, 0, 1, "", "rolling_median"], [1179, 0, 1, "", "rolling_min"], [1180, 0, 1, "", "rolling_quantile"], [1181, 0, 1, "", "rolling_skew"], [1182, 0, 1, "", "rolling_std"], [1183, 0, 1, "", "rolling_sum"], [1184, 0, 1, "", "rolling_var"], [1185, 0, 1, "", "round"], [1186, 0, 1, "", "round_sig_figs"], [1187, 0, 1, "", "sample"], [1188, 0, 1, "", "scatter"], [1189, 0, 1, "", "search_sorted"], [1190, 0, 1, "", "set"], [1191, 0, 1, "", "set_sorted"], [1192, 1, 1, "", "shape"], [1193, 0, 1, "", "shift"], [1194, 0, 1, "", "shrink_dtype"], [1195, 0, 1, "", "shrink_to_fit"], [1196, 0, 1, "", "shuffle"], [1197, 0, 1, "", "sign"], [1198, 0, 1, "", "sin"], [1199, 0, 1, "", "sinh"], [1200, 0, 1, "", "skew"], [1201, 0, 1, "", "slice"], [1202, 0, 1, "", "sort"], [1203, 0, 1, "", "sqrt"], [1204, 0, 1, "", "std"], [1257, 0, 1, "", "sum"], [1258, 0, 1, "", "tail"], [1259, 0, 1, "", "tan"], [1260, 0, 1, "", "tanh"], [1261, 0, 1, "", "to_arrow"], [1262, 0, 1, "", "to_dummies"], [1263, 0, 1, "", "to_frame"], [1264, 0, 1, "", "to_init_repr"], [1265, 0, 1, "", "to_jax"], [1266, 0, 1, "", "to_list"], [1267, 0, 1, "", "to_numpy"], [1268, 0, 1, "", "to_pandas"], [1269, 0, 1, "", "to_physical"], [1270, 0, 1, "", "to_torch"], [1271, 0, 1, "", "top_k"], [1272, 0, 1, "", "unique"], [1273, 0, 1, "", "unique_counts"], [1274, 0, 1, "", "upper_bound"], [1275, 0, 1, "", "value_counts"], [1276, 0, 1, "", "var"], [1277, 0, 1, "", "zip_with"]], "polars.Series.arr": [[929, 0, 1, "", "all"], [930, 0, 1, "", "any"], [931, 0, 1, "", "arg_max"], [932, 0, 1, "", "arg_min"], [933, 0, 1, "", "contains"], [934, 0, 1, "", "count_matches"], [935, 0, 1, "", "explode"], [936, 0, 1, "", "first"], [937, 0, 1, "", "get"], [938, 0, 1, "", "join"], [939, 0, 1, "", "last"], [940, 0, 1, "", "max"], [941, 0, 1, "", "median"], [942, 0, 1, "", "min"], [943, 0, 1, "", "n_unique"], [944, 0, 1, "", "reverse"], [945, 0, 1, "", "shift"], [946, 0, 1, "", "sort"], [947, 0, 1, "", "std"], [948, 0, 1, "", "sum"], [949, 0, 1, "", "to_list"], [950, 0, 1, "", "to_struct"], [951, 0, 1, "", "unique"], [952, 0, 1, "", "var"]], "polars.Series.bin": [[953, 0, 1, "", "contains"], [954, 0, 1, "", "decode"], [955, 0, 1, "", "encode"], [956, 0, 1, "", "ends_with"], [957, 0, 1, "", "size"], [958, 0, 1, "", "starts_with"]], "polars.Series.cat": [[970, 0, 1, "", "get_categories"], [971, 0, 1, "", "is_local"], [972, 0, 1, "", "to_local"], [973, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[996, 0, 1, "", "add_business_days"], [997, 0, 1, "", "base_utc_offset"], [998, 0, 1, "", "cast_time_unit"], [999, 0, 1, "", "century"], [1000, 0, 1, "", "combine"], [1001, 0, 1, "", "convert_time_zone"], [1002, 0, 1, "", "date"], [1003, 0, 1, "", "datetime"], [1004, 0, 1, "", "day"], [1005, 0, 1, "", "dst_offset"], [1006, 0, 1, "", "epoch"], [1007, 0, 1, "", "hour"], [1008, 0, 1, "", "is_leap_year"], [1009, 0, 1, "", "iso_year"], [1010, 0, 1, "", "max"], [1011, 0, 1, "", "mean"], [1012, 0, 1, "", "median"], [1013, 0, 1, "", "microsecond"], [1014, 0, 1, "", "millennium"], [1015, 0, 1, "", "millisecond"], [1016, 0, 1, "", "min"], [1017, 0, 1, "", "minute"], [1018, 0, 1, "", "month"], [1019, 0, 1, "", "month_end"], [1020, 0, 1, "", "month_start"], [1021, 0, 1, "", "nanosecond"], [1022, 0, 1, "", "offset_by"], [1023, 0, 1, "", "ordinal_day"], [1024, 0, 1, "", "quarter"], [1025, 0, 1, "", "replace_time_zone"], [1026, 0, 1, "", "round"], [1027, 0, 1, "", "second"], [1028, 0, 1, "", "strftime"], [1029, 0, 1, "", "time"], [1030, 0, 1, "", "timestamp"], [1031, 0, 1, "", "to_string"], [1032, 0, 1, "", "total_days"], [1033, 0, 1, "", "total_hours"], [1034, 0, 1, "", "total_microseconds"], [1035, 0, 1, "", "total_milliseconds"], [1036, 0, 1, "", "total_minutes"], [1037, 0, 1, "", "total_nanoseconds"], [1038, 0, 1, "", "total_seconds"], [1039, 0, 1, "", "truncate"], [1040, 0, 1, "", "week"], [1041, 0, 1, "", "weekday"], [1042, 0, 1, "", "with_time_unit"], [1043, 0, 1, "", "year"]], "polars.Series.list": [[1097, 0, 1, "", "all"], [1098, 0, 1, "", "any"], [1099, 0, 1, "", "arg_max"], [1100, 0, 1, "", "arg_min"], [1101, 0, 1, "", "concat"], [1102, 0, 1, "", "contains"], [1103, 0, 1, "", "count_matches"], [1104, 0, 1, "", "diff"], [1105, 0, 1, "", "drop_nulls"], [1106, 0, 1, "", "eval"], [1107, 0, 1, "", "explode"], [1108, 0, 1, "", "first"], [1109, 0, 1, "", "gather"], [1110, 0, 1, "", "gather_every"], [1111, 0, 1, "", "get"], [1112, 0, 1, "", "head"], [1113, 0, 1, "", "join"], [1114, 0, 1, "", "last"], [1115, 0, 1, "", "len"], [1116, 0, 1, "", "max"], [1117, 0, 1, "", "mean"], [1118, 0, 1, "", "median"], [1119, 0, 1, "", "min"], [1120, 0, 1, "", "n_unique"], [1121, 0, 1, "", "reverse"], [1122, 0, 1, "", "sample"], [1123, 0, 1, "", "set_difference"], [1124, 0, 1, "", "set_intersection"], [1125, 0, 1, "", "set_symmetric_difference"], [1126, 0, 1, "", "set_union"], [1127, 0, 1, "", "shift"], [1128, 0, 1, "", "slice"], [1129, 0, 1, "", "sort"], [1130, 0, 1, "", "std"], [1131, 0, 1, "", "sum"], [1132, 0, 1, "", "tail"], [1133, 0, 1, "", "to_array"], [1134, 0, 1, "", "to_struct"], [1135, 0, 1, "", "unique"], [1136, 0, 1, "", "var"]], "polars.Series.str": [[1205, 0, 1, "", "concat"], [1206, 0, 1, "", "contains"], [1207, 0, 1, "", "contains_any"], [1208, 0, 1, "", "count_matches"], [1209, 0, 1, "", "decode"], [1210, 0, 1, "", "encode"], [1211, 0, 1, "", "ends_with"], [1212, 0, 1, "", "explode"], [1213, 0, 1, "", "extract"], [1214, 0, 1, "", "extract_all"], [1215, 0, 1, "", "extract_groups"], [1216, 0, 1, "", "extract_many"], [1217, 0, 1, "", "find"], [1218, 0, 1, "", "head"], [1219, 0, 1, "", "join"], [1220, 0, 1, "", "json_decode"], [1221, 0, 1, "", "json_path_match"], [1222, 0, 1, "", "len_bytes"], [1223, 0, 1, "", "len_chars"], [1224, 0, 1, "", "pad_end"], [1225, 0, 1, "", "pad_start"], [1226, 0, 1, "", "replace"], [1227, 0, 1, "", "replace_all"], [1228, 0, 1, "", "replace_many"], [1229, 0, 1, "", "reverse"], [1230, 0, 1, "", "slice"], [1231, 0, 1, "", "split"], [1232, 0, 1, "", "split_exact"], [1233, 0, 1, "", "splitn"], [1234, 0, 1, "", "starts_with"], [1235, 0, 1, "", "strip_chars"], [1236, 0, 1, "", "strip_chars_end"], [1237, 0, 1, "", "strip_chars_start"], [1238, 0, 1, "", "strip_prefix"], [1239, 0, 1, "", "strip_suffix"], [1240, 0, 1, "", "strptime"], [1241, 0, 1, "", "tail"], [1242, 0, 1, "", "to_date"], [1243, 0, 1, "", "to_datetime"], [1244, 0, 1, "", "to_decimal"], [1245, 0, 1, "", "to_integer"], [1246, 0, 1, "", "to_lowercase"], [1247, 0, 1, "", "to_time"], [1248, 0, 1, "", "to_titlecase"], [1249, 0, 1, "", "to_uppercase"], [1250, 0, 1, "", "zfill"]], "polars.Series.struct": [[1251, 0, 1, "", "field"], [1252, 3, 1, "", "fields"], [1253, 0, 1, "", "json_encode"], [1254, 0, 1, "", "rename_fields"], [1255, 3, 1, "", "schema"], [1256, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[291, 0, 1, "", "__iter__"], [292, 0, 1, "", "agg"], [293, 0, 1, "", "all"], [294, 0, 1, "", "count"], [295, 0, 1, "", "first"], [296, 0, 1, "", "head"], [297, 0, 1, "", "last"], [298, 0, 1, "", "len"], [299, 0, 1, "", "map_groups"], [300, 0, 1, "", "max"], [301, 0, 1, "", "mean"], [302, 0, 1, "", "median"], [303, 0, 1, "", "min"], [304, 0, 1, "", "n_unique"], [305, 0, 1, "", "quantile"], [306, 0, 1, "", "sum"], [307, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[876, 2, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[876, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[877, 0, 1, "", "agg"], [878, 0, 1, "", "all"], [879, 0, 1, "", "count"], [880, 0, 1, "", "first"], [881, 0, 1, "", "head"], [882, 0, 1, "", "last"], [883, 0, 1, "", "len"], [884, 0, 1, "", "map_groups"], [885, 0, 1, "", "max"], [886, 0, 1, "", "mean"], [887, 0, 1, "", "median"], [888, 0, 1, "", "min"], [889, 0, 1, "", "n_unique"], [890, 0, 1, "", "quantile"], [891, 0, 1, "", "sum"], [892, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[893, 0, 1, "", "cancel"], [894, 0, 1, "", "fetch"], [895, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[905, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[907, 4, 1, "", "all"], [907, 4, 1, "", "alpha"], [907, 4, 1, "", "alphanumeric"], [907, 4, 1, "", "binary"], [907, 4, 1, "", "boolean"], [907, 4, 1, "", "by_dtype"], [907, 4, 1, "", "by_index"], [907, 4, 1, "", "by_name"], [907, 4, 1, "", "categorical"], [907, 4, 1, "", "contains"], [907, 4, 1, "", "date"], [907, 4, 1, "", "datetime"], [907, 4, 1, "", "decimal"], [907, 4, 1, "", "digit"], [907, 4, 1, "", "duration"], [907, 4, 1, "", "ends_with"], [907, 4, 1, "", "exclude"], [907, 4, 1, "", "expand_selector"], [907, 4, 1, "", "first"], [907, 4, 1, "", "float"], [907, 4, 1, "", "integer"], [907, 4, 1, "", "is_selector"], [907, 4, 1, "", "last"], [907, 4, 1, "", "matches"], [907, 4, 1, "", "numeric"], [907, 4, 1, "", "signed_integer"], [907, 4, 1, "", "starts_with"], [907, 4, 1, "", "string"], [907, 4, 1, "", "temporal"], [907, 4, 1, "", "time"], [907, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 175, 176, 187, 190, 195, 198, 203, 204, 209, 215, 218, 219, 229, 236, 238, 243, 245, 248, 251, 252, 259, 268, 271, 276, 278, 279, 280, 281, 282, 287, 288, 313, 350, 382, 383, 410, 415, 433, 436, 456, 462, 466, 494, 515, 544, 545, 555, 563, 568, 575, 576, 583, 584, 595, 602, 636, 640, 647, 648, 649, 651, 652, 660, 661, 664, 665, 667, 674, 675, 676, 677, 681, 685, 687, 689, 697, 706, 707, 708, 709, 714, 720, 723, 726, 727, 736, 737, 739, 740, 746, 749, 750, 751, 752, 754, 756, 757, 759, 766, 768, 770, 771, 772, 778, 784, 788, 804, 806, 817, 826, 827, 832, 841, 852, 853, 859, 864, 865, 866, 867, 868, 871, 872, 884, 901, 906, 907, 911, 912, 913, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1020, 1023, 1026, 1027, 1028, 1031, 1039, 1041, 1042, 1043, 1044, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1286, 1291, 1295, 1299, 1302, 1308, 1309], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 209, 210, 214, 216, 217, 218, 221, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 238, 239, 240, 243, 245, 247, 248, 249, 250, 251, 258, 259, 260, 261, 263, 268, 269, 270, 271, 272, 273, 275, 277, 281, 283, 284, 287, 289, 290, 292, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 313, 316, 317, 321, 323, 324, 326, 330, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 346, 349, 359, 362, 364, 370, 383, 385, 386, 388, 389, 390, 397, 398, 399, 403, 404, 405, 411, 412, 416, 419, 421, 422, 426, 432, 434, 439, 440, 442, 443, 447, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 465, 466, 468, 470, 471, 473, 475, 477, 480, 481, 484, 487, 489, 490, 491, 492, 494, 496, 501, 502, 505, 508, 511, 512, 513, 519, 520, 532, 536, 538, 539, 540, 541, 543, 544, 546, 547, 548, 551, 555, 560, 561, 562, 564, 566, 575, 576, 577, 578, 579, 581, 582, 584, 587, 588, 590, 591, 592, 593, 597, 598, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 630, 631, 632, 633, 637, 638, 639, 642, 646, 647, 648, 651, 689, 690, 691, 693, 694, 695, 698, 703, 704, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 724, 731, 735, 738, 744, 745, 747, 750, 753, 754, 755, 759, 761, 762, 767, 774, 775, 776, 777, 778, 779, 784, 788, 803, 806, 807, 808, 811, 813, 814, 816, 818, 819, 821, 822, 823, 825, 826, 827, 830, 831, 835, 837, 840, 841, 844, 846, 847, 851, 852, 857, 859, 860, 861, 869, 871, 873, 874, 875, 877, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 901, 907, 911, 918, 919, 920, 921, 922, 923, 924, 926, 928, 931, 937, 947, 950, 952, 957, 969, 972, 974, 975, 977, 980, 981, 982, 989, 990, 991, 993, 994, 995, 996, 1003, 1007, 1011, 1012, 1013, 1015, 1017, 1021, 1027, 1034, 1035, 1037, 1038, 1042, 1045, 1050, 1051, 1052, 1053, 1058, 1063, 1065, 1070, 1071, 1073, 1075, 1076, 1080, 1083, 1085, 1086, 1087, 1088, 1091, 1092, 1099, 1100, 1103, 1106, 1109, 1110, 1111, 1117, 1118, 1130, 1134, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1151, 1152, 1158, 1161, 1163, 1164, 1165, 1169, 1170, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1189, 1197, 1198, 1199, 1200, 1203, 1204, 1205, 1208, 1212, 1213, 1214, 1217, 1221, 1259, 1260, 1262, 1265, 1267, 1268, 1269, 1270, 1274, 1276, 1286, 1291, 1295, 1301, 1303, 1304, 1307, 1308, 1310, 1311, 1313, 1315, 1316], "00": [27, 36, 62, 176, 183, 204, 283, 313, 406, 407, 410, 414, 424, 425, 427, 430, 431, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 606, 608, 610, 612, 614, 617, 619, 621, 674, 677, 681, 731, 732, 733, 734, 774, 775, 776, 788, 806, 814, 827, 901, 907, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1013, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1240, 1243, 1247, 1308], "000": [9, 10, 27, 36, 313, 1316], "0000": [275, 313, 1270, 1286, 1316], "000000": [367, 368, 643, 954, 955, 1209], "00000001": [11, 705, 788], "00000010": [705, 788], "00000011": [705, 788], "00000100": [705, 788], "00001000": [705, 788], "00001010": [705, 788], "00001011": [705, 788], "0000e": 11, "0000ff": [367, 368, 643, 954, 955, 1209], "0005": 907, "00050": 907, "001": [49, 684, 734, 1034, 1035, 1037, 1250], "002": [734, 1034, 1035, 1037], "005": [1045, 1286], "00prefix": 907, "00z": [674, 677, 1240, 1243], "01": [28, 47, 61, 62, 159, 176, 183, 202, 204, 219, 245, 283, 313, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 674, 676, 677, 681, 716, 728, 729, 730, 731, 732, 733, 734, 788, 806, 814, 827, 832, 850, 901, 907, 996, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1012, 1013, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1240, 1242, 1243, 1247, 1308, 1311], "010": [9, 679, 1245], "01000": 28, "01000010": [705, 788], "01000110": [705, 788], "012": [623, 788, 1186, 1286], "0123": [684, 1250], "01234": [623, 788, 1186, 1286], "015625": [1161, 1286], "02": [47, 176, 183, 202, 204, 245, 283, 313, 405, 407, 409, 415, 424, 425, 427, 430, 435, 438, 441, 443, 447, 603, 606, 608, 610, 612, 614, 617, 619, 621, 622, 674, 676, 677, 681, 716, 728, 729, 730, 731, 732, 733, 734, 788, 806, 814, 827, 850, 901, 907, 950, 998, 1000, 1002, 1003, 1006, 1007, 1012, 1013, 1017, 1019, 1020, 1021, 1025, 1026, 1029, 1030, 1033, 1036, 1038, 1039, 1134, 1240, 1242, 1243, 1247, 1308, 1309], "03": [47, 123, 129, 176, 204, 219, 245, 283, 313, 407, 409, 410, 415, 424, 425, 427, 430, 431, 433, 435, 436, 437, 438, 441, 443, 444, 447, 453, 466, 603, 606, 608, 610, 612, 614, 617, 619, 621, 676, 681, 728, 729, 730, 731, 732, 733, 734, 788, 806, 827, 832, 850, 901, 907, 998, 1000, 1001, 1006, 1007, 1012, 1013, 1019, 1020, 1021, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1036, 1038, 1242, 1247], "037037": [1161, 1286], "04": [149, 176, 183, 204, 283, 313, 409, 410, 424, 425, 430, 431, 433, 436, 437, 438, 441, 443, 447, 606, 608, 610, 612, 614, 617, 619, 621, 674, 716, 728, 731, 732, 734, 788, 806, 814, 827, 901, 907, 1001, 1013, 1017, 1019, 1020, 1021, 1025, 1028, 1031, 1032, 1033, 1036, 1038, 1042, 1240, 1308], "047198": 1310, "05": [16, 149, 152, 153, 154, 155, 159, 176, 183, 283, 313, 405, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 424, 425, 426, 430, 432, 433, 434, 436, 437, 716, 728, 729, 731, 732, 806, 814, 901, 907, 1000, 1001, 1002, 1003, 1025, 1026, 1028, 1029, 1031, 1032, 1039, 1308, 1309, 1311], "050545": 123, "0522623626787952": [1092, 1286], "0545": [1002, 1003, 1029], "06": [159, 176, 283, 313, 405, 409, 423, 429, 430, 431, 432, 444, 445, 728, 731, 806, 901, 907, 996, 1025, 1026, 1039], "060": [411, 412, 416, 419, 421, 422, 426, 432, 434], "0601749420166": [190, 313], "06293300616044681": [1045, 1286], "07": [16, 129, 159, 183, 313, 405, 408, 409, 420, 430, 431, 444, 674, 728, 729, 731, 732, 740, 814, 901, 907, 996, 1000, 1025, 1240, 1308, 1311], "071068": [183, 313, 814, 901], "08": [129, 152, 153, 154, 155, 183, 219, 245, 260, 313, 405, 409, 424, 425, 431, 603, 674, 732, 734, 788, 814, 832, 850, 901, 907, 996, 1026, 1039, 1240, 1308, 1309], "085537": [1054, 1286], "09": [47, 129, 183, 245, 313, 405, 409, 424, 425, 583, 603, 678, 728, 729, 731, 776, 788, 814, 850, 901, 907, 996, 1244], "090909": [584, 788], "094395": 1310, "098612": [541, 788, 1137, 1139, 1286, 1307], "0999": [408, 420], "0_": [36, 313], "0m": [414, 1005], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 666, 667, 668, 669, 670, 671, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 784, 788, 803, 804, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 911, 912, 913, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 957, 968, 969, 972, 974, 975, 976, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1213, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223, 1226, 1227, 1228, 1232, 1233, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 129, 130, 132, 143, 151, 178, 183, 192, 201, 202, 204, 206, 208, 209, 210, 215, 219, 222, 233, 237, 239, 243, 245, 251, 260, 264, 287, 292, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 328, 336, 337, 338, 340, 387, 393, 396, 401, 405, 406, 408, 409, 411, 412, 414, 416, 419, 420, 421, 422, 424, 425, 426, 430, 431, 432, 434, 444, 447, 453, 474, 475, 476, 480, 486, 498, 506, 512, 514, 520, 530, 532, 534, 538, 540, 554, 556, 566, 581, 583, 584, 587, 597, 598, 603, 634, 679, 689, 692, 705, 716, 717, 724, 729, 731, 732, 735, 738, 740, 742, 748, 749, 773, 776, 788, 809, 810, 814, 827, 828, 830, 832, 836, 845, 846, 850, 852, 862, 863, 871, 877, 880, 882, 885, 886, 887, 888, 889, 890, 891, 901, 907, 978, 992, 996, 997, 999, 1000, 1005, 1014, 1025, 1039, 1042, 1045, 1051, 1072, 1082, 1096, 1104, 1112, 1118, 1128, 1130, 1132, 1136, 1138, 1142, 1158, 1170, 1188, 1190, 1245, 1258, 1265, 1267, 1270, 1286, 1295, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1311, 1316], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 220, 238, 256, 313, 597, 598, 627, 641, 650, 654, 662, 678, 733, 788, 833, 856, 901, 907, 1047, 1138, 1154, 1169, 1170, 1176, 1177, 1179, 1193, 1207, 1220, 1228, 1244, 1286, 1305, 1316], "1000": [131, 190, 269, 290, 313, 329, 788, 875, 901, 1034, 1138, 1264, 1286, 1316], "10000": [129, 217, 313], "100000": [10, 27], "1000000": [11, 1037], "1001": [290, 313, 875, 901], "1002": [290, 313, 875, 901], "10047419486152048166": [205, 313], "1005": [329, 788], "100_000": [837, 901], "101": [9, 27, 220, 313, 409, 679, 833, 901, 907, 1245, 1316], "101000": 409, "10101": [27, 1311], "1010101": 9, "101514": [183, 313, 814, 901], "102": [220, 313, 833, 901], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 313, 370, 901, 957], "1040361802642726": [1092, 1286], "107149": 1310, "10734580197236529959": [1071, 1286], "1073741824": [628, 788], "10783150408545073287": [205, 313], "107_930_000": 1295, "10_000": [36, 313], "10i": [204, 313, 827, 901], "10m": [431, 444, 1026, 1039], "11": [10, 16, 41, 45, 151, 159, 174, 183, 219, 245, 313, 324, 424, 425, 427, 431, 444, 468, 480, 512, 560, 584, 593, 603, 604, 618, 634, 705, 771, 776, 784, 788, 803, 809, 810, 814, 828, 832, 836, 846, 850, 863, 901, 907, 1022, 1026, 1039, 1142, 1175, 1286, 1304], "110": [662, 679, 1245], "1101441246220388612": [475, 788], "111": [10, 1305], "11111": 1027, "111110": 1027, "11111001": [705, 788], "11111010": [705, 788], "11111111": 10, "112": [628, 788, 1316], "11330": 158, "1152921504606846976": [1167, 1286], "116": 158, "11638928888656214026": [475, 788], "118034": [861, 901], "11aa": 1308, "11aabb": 1308, "11h": [406, 997], "12": [26, 36, 47, 123, 129, 151, 159, 183, 204, 215, 219, 220, 245, 260, 283, 313, 324, 395, 406, 408, 409, 413, 420, 423, 424, 425, 427, 428, 429, 431, 444, 445, 446, 453, 480, 512, 544, 584, 592, 603, 618, 628, 642, 678, 725, 728, 731, 732, 733, 749, 774, 775, 776, 788, 814, 827, 828, 832, 833, 836, 850, 857, 863, 901, 907, 997, 999, 1000, 1011, 1012, 1014, 1018, 1026, 1039, 1051, 1142, 1185, 1208, 1244, 1286, 1307, 1308, 1309, 1311, 1313, 1316], "120": [220, 313, 734, 833, 901, 1310], "1200": [623, 788, 1186, 1286], "120134": [678, 1244], "121": 1316, "123": [9, 642, 648, 661, 684, 778, 907, 1208, 1214, 1250, 1263, 1286], "123000": 907, "1232e": [980, 982, 1286], "1234": [27, 623, 788, 1186, 1286], "12345": [740, 975, 1063, 1185, 1286], "1234500": 907, "123456": [9, 907], "1234567": 27, "123456780": 123, "12346": 740, "123465": 907, "123a123": 661, "123abc": [660, 1226, 1227], "125": [1, 36, 51, 313, 322, 588, 767, 788, 860, 901, 1158, 1161, 1286], "127": [1274, 1286], "128": [49, 63, 1158, 1286], "129": [628, 788], "13": [177, 178, 183, 193, 194, 201, 209, 220, 221, 233, 245, 287, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 324, 405, 411, 412, 416, 419, 421, 422, 426, 432, 434, 554, 556, 603, 678, 718, 724, 727, 731, 738, 772, 774, 777, 788, 807, 808, 814, 821, 822, 833, 835, 850, 871, 880, 882, 885, 886, 887, 888, 889, 890, 891, 901, 996, 1026, 1039, 1040, 1142, 1244, 1286], "130": [126, 220, 313, 833, 901], "13382926553367784577": [475, 788], "134821952": 1295, "134_821_952": 1295, "135": [713, 1310], "13614470193936745724": [475, 788], "13756996518000038261": [1071, 1286], "13h": [406, 997], "14": [35, 151, 183, 220, 223, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 406, 411, 412, 416, 419, 421, 422, 426, 432, 434, 480, 593, 731, 774, 775, 788, 814, 833, 880, 882, 885, 886, 887, 888, 889, 890, 891, 901, 907, 997, 1026], "140": [220, 313, 833, 901], "141592653589793": 10, "141593": [592, 788, 918, 1286, 1307, 1310], "142857": [1158, 1286], "143": [678, 1244, 1316], "1433": [34, 313], "1436e16": 159, "1438741209321515184": [205, 313], "1440": [441, 1036], "1443e235": 1316, "149": 1316, "14d": 907, "15": [10, 36, 151, 183, 204, 209, 220, 223, 245, 313, 397, 401, 425, 431, 444, 453, 587, 603, 618, 725, 731, 774, 775, 788, 814, 827, 833, 850, 901, 907, 989, 992, 1026, 1039, 1051, 1286, 1308], "150": [220, 313, 833, 901, 1177, 1286], "1500": [151, 162], "15000": [217, 313], "153061": [494, 788], "15836": 159, "15_000": [217, 313], "16": [1, 36, 49, 68, 78, 151, 165, 183, 204, 220, 245, 287, 313, 393, 396, 480, 564, 583, 588, 603, 679, 689, 724, 734, 735, 738, 788, 814, 827, 833, 850, 857, 871, 901, 907, 1026, 1039, 1158, 1198, 1245, 1259, 1286, 1307, 1308, 1313], "160": [220, 313, 833, 901], "165": [1026, 1039], "1656e15": [982, 1286], "166667": [1158, 1286], "1666683077": 740, "1666683099": 740, "167": 47, "16996": 1316, "16h": 907, "17": [151, 159, 190, 219, 292, 313, 453, 583, 604, 622, 740, 775, 788, 832, 877, 901, 980, 982, 1026, 1051, 1175, 1286, 1316], "170": [220, 313, 833, 901], "17293822569102704640": [1167, 1286], "174": 1316, "175201": [632, 788, 1199, 1286], "1755e": [156, 159], "1764": 51, "17888890": [190, 313], "179": 1316, "17_500": [217, 313], "18": [34, 123, 183, 230, 245, 313, 396, 431, 444, 447, 480, 566, 583, 603, 689, 788, 814, 842, 846, 850, 901, 907, 1042, 1303, 1310, 1313], "180": [399, 592, 788, 1310], "1844": 159, "18446744073709551614": [1167, 1286], "185_000_000": 1295, "186": 1316, "1875": [620, 788, 869, 901], "1897": [408, 420, 999, 1014], "18d": 907, "19": [134, 159, 219, 245, 313, 408, 431, 603, 608, 610, 612, 614, 678, 788, 832, 850, 901, 999, 1026, 1039, 1244], "1920": 1308, "196": 1309, "1964": [846, 901], "1969": [1308, 1309], "1970": [61, 62, 149, 1295], "1972": 1295, "1976": [418, 448], "1977": [418, 448], "1978": [411, 412, 416, 418, 419, 421, 422, 426, 432, 434, 448, 1309], "1979": [418, 448], "1985": [729, 732], "1990": [129, 1295], "1993": 1295, "1994": 1295, "1995": 129, "1998": [427, 1022], "1999": [260, 313, 427, 907, 1022, 1311], "199992": [837, 901], "199994": [837, 901], "199996": [837, 901], "199998": [837, 901], "1_000_000": [190, 313, 1049, 1286], "1_234_500": 907, "1d": [204, 219, 245, 283, 313, 407, 427, 431, 438, 441, 444, 447, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 734, 748, 775, 776, 788, 827, 832, 850, 901, 907, 998, 1006, 1012, 1022, 1026, 1030, 1033, 1036, 1039, 1051, 1286], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [204, 219, 245, 283, 313, 414, 427, 431, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1005, 1007, 1022, 1026, 1039, 1051, 1286], "1i": [204, 245, 283, 313, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 788, 827, 850, 901, 1051, 1286], "1m": [204, 219, 245, 283, 313, 427, 431, 443, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1034, 1035, 1037, 1038, 1039, 1051, 1286], "1mo": [204, 219, 245, 283, 313, 410, 424, 425, 427, 430, 431, 437, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1001, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1032, 1039, 1040, 1051, 1286], "1n": [204, 219, 245, 283, 313, 427, 431, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039, 1051, 1286], "1q": [204, 219, 245, 283, 313, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039], "1st_col": 907, "1u": [204, 219, 245, 283, 313, 427, 431, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039, 1051, 1286], "1w": [204, 219, 245, 283, 313, 427, 431, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039, 1051, 1286], "1w2d": [729, 730], "1y": [204, 219, 245, 283, 313, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039], "1y2mo": [427, 1022], "1zy3": [642, 1208], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 329, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 381, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 417, 420, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 762, 766, 767, 768, 769, 770, 771, 773, 776, 777, 778, 784, 788, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 906, 907, 911, 912, 913, 916, 919, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 957, 968, 972, 974, 975, 976, 977, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1002, 1003, 1005, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1029, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1213, 1215, 1217, 1218, 1220, 1221, 1223, 1226, 1227, 1232, 1233, 1235, 1236, 1237, 1240, 1241, 1243, 1244, 1245, 1246, 1249, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 174, 183, 192, 208, 209, 230, 237, 239, 243, 260, 270, 271, 275, 289, 294, 313, 336, 337, 338, 401, 408, 411, 412, 416, 419, 420, 421, 422, 426, 431, 432, 434, 444, 447, 468, 475, 480, 544, 551, 560, 587, 606, 608, 610, 612, 614, 617, 619, 621, 646, 689, 704, 731, 740, 748, 767, 775, 788, 803, 814, 819, 842, 845, 860, 874, 879, 901, 907, 992, 999, 1003, 1014, 1026, 1039, 1042, 1054, 1070, 1169, 1212, 1265, 1267, 1270, 1286, 1302, 1303, 1305, 1311], "200": [439, 440, 442, 597, 598, 788, 907, 1047, 1154, 1169, 1170, 1176, 1177, 1179, 1286, 1305], "2000": [408, 417, 420, 424, 425, 427, 907, 999, 1008, 1014, 1019, 1020, 1022, 1027, 1295, 1308], "200000": [439, 837, 901], "200000000": 442, "2001": [16, 407, 408, 413, 415, 417, 420, 423, 427, 428, 429, 431, 435, 444, 445, 446, 447, 606, 608, 610, 612, 614, 617, 619, 621, 674, 788, 907, 998, 999, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1030, 1039, 1040, 1041, 1042, 1043, 1240], "2002": [129, 417, 427, 1008, 1022, 1043], "2003": [427, 740, 1022], "2004": [427, 1022], "2005": [427, 1022], "2006": [427, 1022], "2008": 1295, "200m": [439, 440, 442], "2010": [260, 313, 907], "2011": [406, 997], "2012": [406, 997, 1311], "2016": [219, 313, 832, 901], "2017": [219, 313, 832, 901], "2018": [219, 313, 430, 832, 901, 1025], "2019": [219, 313, 832, 901], "202": 1309, "2020": [133, 144, 176, 183, 202, 219, 245, 313, 316, 405, 410, 414, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 453, 603, 674, 676, 677, 716, 788, 806, 814, 832, 850, 901, 907, 996, 1001, 1005, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1051, 1240, 1242, 1243, 1286, 1309], "2021": [133, 144, 176, 183, 202, 204, 283, 313, 674, 748, 806, 814, 827, 901, 907, 1002, 1003, 1009, 1029, 1240, 1308], "2022": [47, 176, 183, 202, 313, 409, 431, 444, 674, 729, 730, 732, 733, 734, 740, 806, 814, 901, 907, 1000, 1009, 1026, 1039, 1240], "2023": [16, 36, 123, 151, 217, 313, 409, 734, 748, 907, 1000], "2024": [151, 405, 411, 412, 416, 419, 421, 422, 426, 432, 434, 583, 716, 728, 729, 731, 732, 734, 788, 907, 996, 1308, 1311], "2025": [405, 716, 907, 996], "2026": 1309, "2030": 1308, "2031": 907, "2047317070637311557": [205, 313], "2055938745": 123, "2065": [411, 412, 416, 419, 421, 422, 426, 432, 434], "2068": 159, "207": 1309, "2077": [260, 313, 907, 1308, 1309], "2095": 159, "20_000": [36, 313], "20word": 132, "21": [151, 183, 230, 262, 313, 408, 606, 608, 610, 612, 614, 617, 619, 621, 731, 740, 788, 814, 842, 901, 907, 999, 1303], "213": 1316, "2147483647": 1316, "2147483648": [1140, 1286], "21d": 907, "22": [41, 45, 151, 159, 313, 413, 428, 431, 444, 446, 447, 604, 606, 608, 610, 612, 614, 617, 619, 621, 674, 731, 784, 788, 901, 907, 1026, 1039, 1042, 1175, 1240, 1286, 1308, 1309, 1316], "221": 1316, "2246e": [1198, 1259, 1286], "225": [431, 444, 1310], "22_000_000": 1295, "23": [10, 159, 183, 204, 245, 275, 313, 409, 413, 416, 428, 431, 446, 603, 606, 608, 610, 612, 614, 617, 619, 621, 731, 734, 774, 775, 776, 788, 814, 827, 850, 860, 901, 907, 1000, 1007, 1270, 1286, 1315, 1316], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1295, "2337": [36, 313], "234": 27, "2345": 907, "23456789": 10, "235": 1316, "23h": 907, "24": [49, 151, 204, 219, 223, 245, 260, 283, 313, 395, 397, 413, 427, 428, 431, 438, 444, 446, 564, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 989, 1022, 1026, 1033, 1039, 1091, 1286, 1308, 1315], "24030": 158, "249": [705, 788], "25": [1, 27, 36, 51, 123, 183, 204, 219, 245, 270, 275, 283, 287, 313, 370, 401, 413, 414, 428, 431, 444, 446, 453, 588, 590, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 698, 731, 732, 733, 734, 740, 750, 775, 776, 788, 814, 827, 832, 839, 850, 869, 871, 901, 907, 957, 991, 992, 1005, 1026, 1039, 1045, 1051, 1073, 1158, 1163, 1286, 1303, 1307, 1313, 1314], "250": [705, 788, 1177, 1286, 1305, 1316], "2500": [217, 275, 313], "254508": [453, 788, 1051, 1286], "255": 1316, "256": [223, 313, 370, 957, 1158, 1286, 1307], "2560": 957, "259921": [385, 788, 974, 1286, 1307], "25_000_000": 1295, "26": [34, 36, 151, 156, 157, 158, 159, 163, 183, 313, 414, 445, 814, 901, 1005], "266667": [183, 313, 814, 901], "27": [1, 51, 270, 306, 313, 396, 423, 429, 445, 689, 788, 891, 907, 1161, 1265, 1286, 1315, 1316], "270": 1310, "28": [266, 271, 313, 322, 430, 447, 788, 1025, 1042, 1267, 1286, 1308, 1310, 1315, 1316], "283185": [592, 788], "2846": 313, "285714": [481, 788, 1076, 1286], "289962": 1310, "28_341_469": 1295, "29": [16, 151, 406, 424, 997, 1019], "29096": 1316, "290994": [861, 901], "292432": [919, 1286], "292893": [453, 788, 1051, 1286], "2_color_scal": [36, 313], "2d": [245, 270, 271, 313, 427, 603, 748, 788, 850, 901, 997, 1004], "2h": [606, 608, 610, 612, 614, 617, 619, 621, 788], "2i": [204, 313, 827, 901], "2m": [907, 1017], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 324, 325, 327, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 384, 385, 386, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 562, 563, 564, 565, 566, 567, 569, 571, 573, 574, 577, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 635, 636, 637, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 681, 682, 685, 686, 687, 688, 689, 690, 692, 696, 697, 700, 701, 702, 704, 705, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 912, 913, 916, 918, 920, 921, 922, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 968, 969, 970, 972, 974, 975, 976, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1023, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1039, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1095, 1096, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1207, 1209, 1210, 1211, 1213, 1214, 1215, 1218, 1219, 1220, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1234, 1241, 1242, 1247, 1248, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1266, 1267, 1268, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316], "30": [36, 183, 192, 204, 208, 237, 243, 266, 287, 313, 336, 337, 338, 401, 409, 411, 412, 416, 419, 421, 422, 423, 424, 426, 429, 430, 431, 432, 434, 437, 444, 445, 475, 551, 628, 731, 748, 774, 775, 788, 814, 819, 827, 845, 871, 901, 907, 992, 1000, 1019, 1025, 1026, 1032, 1039, 1070, 1286, 1302, 1303, 1305, 1307, 1308, 1310, 1311, 1314, 1316], "300": [266, 313, 474, 581, 598, 788, 907, 1170, 1176, 1177, 1179, 1286, 1305], "3000": 907, "3002": [408, 420, 999, 1014], "30103": [540, 788, 1307], "3022416320763508302": [1071, 1286], "30_000": [36, 313], "30m": [204, 313, 431, 444, 827, 901, 1026, 1039], "31": [51, 183, 260, 313, 408, 409, 413, 420, 424, 427, 437, 646, 674, 728, 731, 740, 748, 767, 814, 901, 907, 997, 999, 1000, 1004, 1014, 1019, 1032, 1169, 1212, 1240, 1286, 1309, 1311, 1316], "32": [49, 61, 66, 69, 79, 214, 219, 245, 313, 564, 603, 628, 788, 832, 850, 901, 993, 1023, 1158, 1180, 1286, 1303, 1308], "321": [27, 1316], "3212": [678, 1244], "321cba": 1308, "3265500": 907, "32971": [447, 1042], "32974": [447, 1042], "32976": [447, 1042], "32bit": [270, 313], "33": [183, 230, 313, 622, 788, 814, 842, 901, 1180, 1286, 1309], "333": [16, 623, 788, 1047, 1154, 1186, 1286], "33333": 1311, "333333": [210, 313, 566, 830, 901, 1158, 1184, 1286, 1303], "34": [183, 313, 674, 814, 901, 1240], "3420": [678, 1244], "343622": [633, 788], "345": [656, 657, 1222, 1223], "3456": 907, "34776706224699483": [1200, 1286], "35": [36, 313, 401, 731, 788, 992, 1286], "350": [474, 581, 788, 1177, 1286], "356": [413, 428, 446], "356194": [712, 713, 1310], "357": [413, 428, 446], "358": [413, 428, 446], "359": [413, 428, 446], "36": [183, 313, 814, 901, 1313], "360": [399, 592, 788, 1310], "361": 1316, "363961": [532, 1130], "366": [428, 1023], "37": [12, 907], "370h": [453, 788, 1051, 1286], "37338": 1316, "38": [36, 123, 156, 159, 313], "38180177416060584": [615, 788, 1181, 1286], "381802": [615, 788, 1181, 1286], "386294": [541, 788, 1139, 1286, 1307], "389056": [457, 788, 1054, 1286, 1307], "39": [619, 740, 788], "39m": 907, "3_color_scal": [36, 313], "3d12h4m25": [204, 219, 245, 283, 313, 431, 444, 453, 603, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1026, 1039, 1051, 1286], "3f": [132, 674, 677, 1240, 1243], "3i": [204, 245, 313, 827, 901], "3rd": [1218, 1241], "3xy": [642, 1208], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 172, 173, 174, 175, 176, 177, 178, 182, 184, 187, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 232, 233, 234, 236, 237, 238, 239, 245, 247, 248, 255, 256, 259, 263, 264, 265, 266, 267, 268, 271, 274, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 292, 293, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 326, 328, 340, 347, 348, 349, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 364, 365, 370, 381, 382, 383, 385, 386, 387, 391, 392, 395, 396, 397, 399, 402, 409, 412, 413, 420, 428, 429, 430, 431, 432, 433, 436, 438, 441, 443, 444, 446, 450, 451, 453, 457, 458, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 491, 492, 496, 497, 498, 505, 506, 507, 508, 509, 511, 512, 514, 522, 524, 525, 526, 527, 528, 529, 530, 534, 535, 540, 543, 544, 545, 562, 564, 566, 567, 569, 571, 573, 574, 577, 578, 579, 582, 583, 585, 586, 587, 588, 591, 593, 597, 598, 599, 600, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 627, 630, 634, 635, 636, 637, 640, 642, 648, 651, 652, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 672, 673, 674, 675, 679, 684, 685, 687, 688, 689, 690, 692, 695, 696, 697, 698, 704, 705, 707, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 731, 732, 733, 735, 737, 738, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 784, 788, 803, 804, 806, 807, 808, 809, 810, 813, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 845, 846, 847, 850, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 874, 875, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 911, 916, 919, 926, 933, 935, 936, 937, 939, 940, 941, 942, 943, 945, 947, 948, 949, 950, 951, 952, 957, 968, 975, 976, 978, 984, 989, 991, 993, 1003, 1007, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1031, 1033, 1036, 1038, 1039, 1040, 1041, 1048, 1051, 1055, 1056, 1058, 1059, 1064, 1065, 1067, 1072, 1073, 1075, 1076, 1077, 1078, 1082, 1085, 1086, 1087, 1088, 1090, 1096, 1103, 1104, 1105, 1106, 1107, 1112, 1116, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1132, 1133, 1148, 1151, 1152, 1155, 1158, 1159, 1160, 1161, 1165, 1166, 1169, 1170, 1171, 1174, 1178, 1180, 1181, 1182, 1183, 1184, 1187, 1189, 1193, 1194, 1197, 1200, 1201, 1202, 1206, 1208, 1214, 1217, 1218, 1222, 1223, 1224, 1225, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1245, 1250, 1251, 1254, 1256, 1258, 1264, 1267, 1269, 1271, 1277, 1286, 1291, 1295, 1296, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1313, 1314, 1315, 1316], "40": [36, 183, 192, 219, 237, 313, 431, 444, 475, 538, 678, 689, 788, 814, 832, 845, 901, 907, 1009, 1039, 1136, 1244, 1302, 1303, 1305, 1308], "400": [282, 313, 439, 440, 442, 868, 901, 1176, 1177, 1179, 1286, 1305], "4000000": [1049, 1286], "404": [220, 313, 647, 649, 833, 901, 1213, 1215], "4096": 1307, "41": [183, 313, 619, 788, 814, 901, 1303, 1316], "412277": 159, "414214": [637, 788, 1203, 1286, 1307], "4160": 51, "416147": 1310, "4164": [219, 313, 832, 901], "42": [51, 183, 205, 230, 245, 313, 603, 788, 814, 842, 850, 901, 1071, 1286, 1302, 1315], "424778": [592, 788], "428571": [452, 788, 1050, 1286], "429101": 1303, "4294967296": [41, 313], "43": [183, 245, 313, 396, 603, 619, 788, 814, 850, 901], "4321": 907, "433013": [616, 788, 861, 901], "434949": 1310, "44": [10, 230, 313, 402, 788, 842, 901], "4411": [219, 313, 832, 901], "44225": [974, 1286], "444": 10, "44444444444": 10, "45": [36, 183, 245, 313, 409, 431, 444, 603, 619, 642, 648, 686, 713, 731, 748, 774, 775, 788, 814, 850, 901, 907, 1000, 1026, 1039, 1208, 1214, 1253, 1307, 1308, 1310, 1314, 1316], "450": [1177, 1286], "4500000": 907, "456": [9, 10, 409, 907, 1000, 1263, 1286], "456000": [409, 1000], "456001\u00b5": 907, "4566": [219, 313, 832, 901], "456789": [907, 1027], "456789\u00b5": 907, "456m": 907, "457658": 1310, "459148": [449, 788], "46": 907, "4696": [219, 313, 832, 901], "47": [47, 183, 313, 619, 788, 814, 901, 907], "470": [846, 901], "47033": [615, 788, 1181, 1286], "47033046033698594": [615, 788, 1181, 1286], "475": [846, 901], "48": [12, 159, 245, 313, 603, 689, 788, 850, 901, 907], "4827": [219, 313, 832, 901], "485": 1316, "49": [183, 313, 814, 901, 907], "492474": [453, 788, 1051, 1286], "498": [220, 313, 833, 901], "4_500_000": 907, "4ab4a": 1308, "4d": [453, 788, 1051, 1286], "4f6228": [36, 313], "4f71": [36, 313], "4x": [216, 313], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 176, 177, 178, 183, 184, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 232, 233, 234, 236, 238, 239, 240, 245, 248, 255, 256, 259, 260, 263, 264, 265, 266, 267, 268, 270, 271, 274, 275, 277, 280, 281, 282, 283, 286, 287, 289, 290, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 322, 323, 326, 341, 342, 347, 348, 349, 351, 353, 357, 362, 364, 370, 381, 382, 383, 386, 387, 397, 398, 399, 401, 402, 405, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 426, 430, 432, 433, 434, 436, 437, 443, 447, 451, 453, 455, 456, 459, 461, 465, 466, 470, 471, 473, 476, 478, 480, 482, 485, 488, 489, 490, 491, 492, 496, 498, 505, 508, 509, 511, 512, 514, 517, 519, 520, 524, 525, 526, 527, 528, 529, 533, 534, 538, 544, 562, 564, 566, 578, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 613, 616, 618, 619, 620, 621, 622, 625, 636, 642, 651, 652, 655, 656, 657, 675, 679, 690, 692, 696, 697, 698, 710, 712, 713, 715, 716, 717, 718, 720, 722, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 737, 738, 742, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 767, 769, 771, 772, 773, 777, 784, 788, 806, 807, 808, 809, 810, 814, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 839, 840, 846, 850, 856, 857, 858, 859, 860, 861, 862, 863, 867, 868, 870, 871, 874, 875, 877, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 916, 919, 923, 926, 929, 930, 933, 935, 936, 937, 939, 941, 945, 950, 951, 952, 957, 968, 976, 978, 985, 989, 990, 991, 992, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1014, 1025, 1027, 1028, 1029, 1031, 1032, 1038, 1040, 1041, 1042, 1048, 1051, 1053, 1055, 1056, 1057, 1067, 1072, 1073, 1075, 1077, 1081, 1084, 1096, 1103, 1106, 1107, 1112, 1115, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1131, 1132, 1136, 1140, 1148, 1155, 1158, 1159, 1160, 1163, 1164, 1165, 1166, 1170, 1171, 1174, 1175, 1176, 1177, 1179, 1180, 1183, 1187, 1189, 1194, 1200, 1203, 1208, 1217, 1218, 1221, 1222, 1241, 1245, 1258, 1265, 1267, 1270, 1271, 1274, 1277, 1286, 1291, 1296, 1299, 1301, 1303, 1304, 1307, 1308, 1309, 1310, 1313, 1315, 1316], "50": [12, 27, 36, 183, 192, 202, 313, 387, 431, 444, 729, 730, 788, 814, 901, 907, 978, 991, 1039, 1286, 1302], "500": [36, 282, 313, 411, 412, 416, 419, 421, 422, 426, 432, 434, 868, 901, 1013, 1015, 1021, 1176, 1177, 1179, 1286], "5000": [275, 313, 1270, 1286], "50000": 130, "500000": [419, 1013], "500000000": [426, 1021], "5000555": 907, "500_000": [411, 412, 416, 419, 421, 422, 426, 432, 434], "500m": [1013, 1015, 1021], "51": 907, "512": [41, 131, 216, 313, 370, 588, 788, 957, 1158, 1286], "51966": [679, 1245], "52": [287, 313, 445, 622, 788, 871, 901], "523599": 1310, "527525": [1182, 1286], "53": [445, 1040, 1313], "533316061": 1295, "533_316_061": 1295, "54": [457, 788, 1092, 1286, 1307, 1316], "540": [399, 592, 788], "540302": 1310, "543": 9, "543081": [389, 788, 981, 1286], "5432": 131, "54321": 9, "544": 1316, "544705": 720, "549306": [923, 1286], "55": [36, 49, 313, 1308, 1309], "5555": 907, "55550": 907, "56": [123, 693, 788], "566371": [592, 788], "567": 27, "56789": [975, 1063, 1185, 1286], "57": [619, 788, 1185, 1286, 1310, 1316], "570796": [330, 332, 788, 918, 920, 1286, 1310], "575050513": [156, 159], "58": [238, 313], "581139": [991, 1286], "584963": [539, 788], "587401": [385, 788, 1307], "59": [123, 183, 313, 409, 422, 432, 466, 731, 774, 775, 776, 788, 814, 901, 907, 1000, 1017, 1027], "59815": [457, 788, 1307], "5_000_555": 907, "5th": [36, 313], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 179, 180, 184, 185, 186, 187, 188, 189, 191, 192, 195, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 212, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 296, 306, 307, 313, 316, 317, 322, 326, 347, 348, 349, 351, 357, 365, 382, 383, 395, 396, 402, 405, 409, 413, 423, 427, 428, 429, 439, 440, 442, 445, 446, 449, 451, 460, 461, 466, 467, 470, 476, 478, 480, 498, 499, 500, 509, 512, 525, 526, 527, 528, 532, 544, 545, 578, 582, 589, 592, 593, 594, 599, 601, 603, 605, 607, 609, 611, 613, 616, 618, 619, 620, 625, 630, 636, 642, 646, 656, 657, 679, 690, 692, 697, 705, 707, 709, 716, 724, 725, 726, 728, 731, 735, 738, 744, 749, 750, 754, 767, 771, 784, 788, 806, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 830, 831, 832, 834, 836, 837, 844, 846, 848, 850, 851, 852, 854, 856, 857, 858, 859, 860, 863, 866, 867, 870, 871, 874, 875, 881, 891, 892, 901, 907, 933, 935, 936, 937, 939, 945, 976, 980, 982, 987, 988, 993, 996, 1022, 1041, 1048, 1055, 1067, 1073, 1097, 1098, 1107, 1110, 1123, 1124, 1125, 1126, 1130, 1148, 1162, 1165, 1166, 1171, 1173, 1178, 1180, 1182, 1184, 1189, 1194, 1197, 1208, 1212, 1222, 1245, 1257, 1267, 1286, 1291, 1296, 1299, 1301, 1303, 1304, 1307, 1313, 1314, 1316], "60": [36, 126, 192, 238, 313, 416, 421, 422, 432, 443, 466, 619, 674, 788, 1023, 1027, 1038, 1167, 1240, 1286, 1310], "600": [282, 313, 439, 440, 442, 868, 901, 907], "60000": 419, "600000": 907, "60000000": 426, "60206": [540, 788, 1307], "605551": 769, "605551275463989": 769, "609438": 1307, "60_000": [411, 412, 416, 419, 421, 422, 426, 432, 434], "61": [238, 313], "625": [613, 788], "626172": [644, 1210], "63": [619, 788], "63204": 1316, "6331e16": [1259, 1286, 1310], "636253": 1310, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 172, 275, 313, 390, 564, 588, 788, 1158, 1161, 1286, 1307], "64030": [679, 1245], "642093": 1310, "647961": 159, "64bit": [151, 595, 788, 1167, 1286], "65": [1045, 1286], "650": [474, 581, 788], "65280": [679, 1245], "654": [27, 767, 860, 901], "65432": 1311, "65536": 1307, "66": [219, 282, 313, 619, 705, 788, 832, 868, 901, 1092, 1180, 1286], "663053": 123, "666": 907, "666000": 907, "666667": [183, 210, 284, 301, 313, 452, 753, 788, 814, 830, 869, 886, 901, 1050, 1286], "666f6f": [644, 1210], "676": [220, 313, 833, 901], "678": [642, 648, 1208, 1214], "6789": [28, 907], "67890": 28, "686241": 1303, "69": [619, 788, 1092, 1286], "693147": [541, 788, 1137, 1139, 1286, 1307], "6_000_000": 1295, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 179, 180, 181, 183, 185, 186, 188, 189, 191, 195, 198, 200, 204, 206, 208, 210, 218, 222, 224, 226, 228, 230, 231, 235, 238, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 261, 262, 263, 264, 269, 271, 272, 273, 281, 283, 284, 285, 313, 316, 317, 322, 326, 348, 349, 351, 360, 396, 408, 409, 413, 420, 428, 430, 431, 444, 446, 457, 470, 476, 480, 481, 498, 512, 525, 526, 527, 528, 582, 583, 593, 599, 603, 618, 619, 636, 651, 678, 692, 716, 724, 725, 728, 731, 732, 738, 743, 749, 750, 767, 771, 788, 806, 811, 812, 814, 816, 818, 820, 823, 825, 827, 828, 830, 831, 836, 842, 844, 847, 848, 850, 851, 852, 856, 860, 863, 901, 907, 923, 936, 937, 939, 948, 999, 1000, 1004, 1009, 1014, 1025, 1026, 1039, 1041, 1054, 1076, 1091, 1110, 1123, 1124, 1125, 1126, 1170, 1171, 1183, 1189, 1217, 1244, 1286, 1291, 1296, 1301, 1303, 1304, 1307, 1309, 1313, 1316], "70": [183, 313, 705, 732, 788, 814, 901, 1092, 1286], "700": [282, 313, 868, 901], "702963": [36, 313], "707107": [359, 454, 616, 617, 712, 788, 947, 1052, 1286, 1310], "712389": 1310, "714": 1316, "714286": [481, 788, 1076, 1286], "718281828459045": [10, 449, 539, 788, 1045, 1137, 1286], "718282": [457, 788, 1054, 1286, 1307], "720": [399, 592, 788], "7264": 1316, "732051": [1203, 1286], "7415e16": 159, "742": [220, 313, 833, 901], "75": [36, 183, 313, 326, 582, 590, 605, 607, 609, 611, 616, 618, 620, 750, 788, 814, 901, 907, 991, 1073, 1092, 1163, 1286, 1310, 1316], "7500": [217, 313], "7508": 1316, "754": [698, 788], "754888": [449, 788], "761594": [694, 788, 1260, 1286], "7654": 907, "765431": 1027, "7654321": 27, "76933c": [36, 313], "78": 9, "780": 9, "784": [219, 313, 832, 901], "785398": [334, 712, 713, 788, 922, 1286, 1310], "789": [10, 907], "79": [1092, 1286], "7d": 907, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 179, 180, 181, 183, 185, 186, 187, 188, 189, 191, 195, 198, 200, 202, 206, 208, 215, 218, 219, 220, 222, 223, 224, 226, 228, 231, 240, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 260, 261, 262, 264, 269, 271, 272, 273, 281, 284, 285, 287, 313, 326, 328, 340, 348, 349, 351, 393, 396, 397, 409, 470, 477, 480, 481, 506, 508, 512, 525, 526, 527, 528, 564, 582, 583, 588, 599, 600, 604, 628, 634, 636, 658, 659, 674, 705, 710, 716, 720, 722, 725, 727, 735, 737, 742, 743, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 767, 769, 772, 773, 777, 788, 806, 811, 812, 814, 816, 817, 818, 820, 823, 825, 828, 831, 832, 833, 836, 837, 846, 848, 851, 852, 856, 860, 863, 871, 901, 907, 936, 937, 939, 982, 989, 1009, 1073, 1076, 1091, 1104, 1106, 1110, 1123, 1124, 1125, 1126, 1158, 1161, 1171, 1174, 1175, 1178, 1180, 1182, 1184, 1224, 1225, 1240, 1286, 1295, 1296, 1301, 1303, 1304, 1307, 1308, 1309, 1313, 1316], "80": [36, 313], "800": [439, 440, 442], "8000": 131, "803065983": 123, "81": 1307, "814697265625": [1049, 1286], "816497": [261, 313], "8192": 129, "82": [219, 313, 832, 901], "8257e14": 1316, "83": [219, 313, 832, 901], "833": [219, 313, 832, 901], "833333": [301, 886], "848062": 1310, "848808": 159, "85": [36, 313, 1092, 1286, 1316], "850": [474, 581, 788], "8568409950394724": [1045, 1286], "8589934592": [628, 788], "86": 1316, "8601": 1308, "87": 1316, "876": 9, "88": [183, 313, 814, 901], "881374": [333, 788, 921, 1286], "888": [767, 860, 901], "8_000_000": 1295, "8a": [954, 955], "8nin": 1316, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 173, 181, 183, 195, 197, 206, 210, 220, 222, 223, 238, 245, 247, 248, 251, 263, 264, 281, 285, 287, 306, 313, 322, 326, 328, 340, 348, 349, 351, 356, 358, 393, 396, 399, 409, 462, 470, 480, 486, 506, 512, 523, 531, 566, 582, 583, 592, 599, 603, 604, 615, 618, 619, 630, 634, 648, 678, 686, 689, 718, 724, 725, 728, 731, 743, 776, 788, 814, 823, 828, 830, 833, 836, 850, 852, 863, 871, 891, 901, 907, 931, 932, 936, 937, 939, 944, 946, 991, 1004, 1013, 1015, 1021, 1026, 1039, 1040, 1082, 1091, 1104, 1110, 1121, 1129, 1171, 1175, 1181, 1183, 1185, 1197, 1214, 1244, 1253, 1286, 1295, 1296, 1301, 1304, 1313], "90": [183, 220, 313, 678, 814, 833, 901, 1244, 1310], "901234": [975, 1063, 1185, 1286], "909": [219, 313, 832, 901], "910": [219, 313, 648, 832, 901, 1214], "910t": [642, 648, 1208, 1214], "914": [219, 313, 832, 901], "9223372036854775807": [701, 788], "9223372036854775808": [542, 788], "927295": 1310, "928571": [455, 788, 1053, 1286], "93": [1092, 1286], "94": [323, 788], "9477376373212048": [1092, 1286], "95": [17, 323, 788, 907], "95b3d7": [36, 313], "96": [17, 183, 313, 323, 788, 814, 901, 1092, 1286], "961": 51, "963624": [454, 788, 1052, 1286], "963757": 1310, "964028": [238, 313], "96_067_179": 1295, "97": [17, 209, 313, 323, 788, 1092, 1286], "9774092659964970114": [475, 788], "978307200": [415, 1006], "978307200000": 435, "978307200000000": [415, 435, 1006, 1030], "978307200000000000": 1030, "978393600": [415, 1006], "978393600000": 435, "978393600000000": [415, 435, 1006, 1030], "978393600000000000": 1030, "978480000": [415, 1006], "978480000000": 435, "978480000000000": [415, 435, 1006, 1030], "978480000000000000": 1030, "98": [17, 209, 238, 313, 381, 469, 472, 635, 678, 696, 788, 1244], "987": 27, "987000": 907, "9876": 9, "987654": [27, 907], "987654321": 10, "9876543210": 123, "987m": 907, "988": 10, "99": [17, 36, 193, 194, 209, 212, 238, 282, 313, 323, 381, 459, 461, 469, 472, 635, 696, 778, 788, 821, 822, 868, 901, 1045, 1057, 1286, 1307], "9914e218": 159, "993": [1073, 1286], "998347": [238, 313], "999": [408, 420, 907, 999, 1014, 1305, 1316], "999000": 907, "999954": [238, 313], "999999": [684, 731, 774, 775, 776, 907, 1250], "999999\u00b5": 907, "9bbb59": [36, 313], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 180, 188, 197, 204, 218, 219, 225, 227, 232, 238, 263, 266, 281, 282, 283, 287, 288, 313, 321, 403, 404, 409, 433, 436, 450, 451, 459, 471, 473, 484, 487, 489, 490, 496, 536, 543, 544, 555, 568, 577, 578, 600, 605, 607, 609, 611, 613, 616, 618, 620, 640, 641, 642, 647, 648, 649, 650, 651, 652, 655, 657, 660, 661, 662, 664, 675, 684, 718, 734, 735, 739, 788, 812, 818, 827, 831, 832, 848, 868, 871, 872, 901, 907, 994, 995, 1000, 1028, 1031, 1047, 1057, 1154, 1176, 1177, 1179, 1182, 1183, 1184, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1223, 1226, 1227, 1228, 1230, 1241, 1250, 1286, 1295, 1296, 1299, 1311, 1313], "AND": [706, 707, 767, 907], "ANDs": [372, 788, 959, 1286], "AS": [260, 313, 767, 768, 860, 901, 1295, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1315], "And": [682, 1248], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 195, 270, 275, 313, 536, 778, 823, 901], "At": [41, 238, 313], "BY": [767, 860, 901, 1295, 1298, 1304, 1312, 1313], "Be": 901, "By": [5, 12, 14, 30, 47, 129, 130, 143, 204, 218, 219, 245, 247, 256, 261, 283, 284, 313, 357, 427, 431, 444, 529, 532, 538, 583, 598, 603, 606, 608, 610, 612, 614, 617, 619, 621, 627, 638, 703, 720, 722, 729, 730, 732, 733, 734, 748, 769, 775, 776, 777, 788, 809, 827, 831, 832, 850, 856, 861, 869, 901, 945, 1022, 1026, 1039, 1127, 1170, 1193, 1204, 1276, 1286], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 187, 192, 218, 219, 238, 245, 270, 299, 313, 424, 425, 452, 454, 455, 466, 536, 545, 555, 595, 633, 640, 647, 648, 649, 651, 652, 675, 724, 734, 738, 739, 784, 788, 817, 832, 850, 884, 901, 905, 1050, 1052, 1053, 1056, 1142, 1167, 1200, 1206, 1213, 1214, 1215, 1217, 1218, 1241, 1265, 1286], "IF": 1306, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 172, 187, 192, 195, 202, 204, 206, 214, 215, 216, 219, 222, 223, 227, 234, 238, 245, 247, 248, 249, 253, 256, 258, 260, 263, 264, 267, 268, 270, 271, 277, 278, 280, 281, 282, 313, 316, 325, 327, 350, 357, 362, 383, 405, 409, 410, 424, 425, 433, 436, 462, 477, 482, 494, 515, 524, 529, 530, 536, 544, 545, 551, 557, 558, 583, 588, 590, 593, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 627, 629, 633, 634, 639, 648, 649, 651, 652, 653, 654, 664, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 681, 684, 702, 706, 708, 711, 715, 716, 719, 720, 724, 729, 730, 732, 733, 734, 737, 738, 744, 745, 746, 748, 750, 760, 763, 764, 765, 770, 775, 776, 778, 779, 788, 809, 810, 817, 819, 823, 827, 831, 832, 837, 841, 848, 850, 854, 856, 858, 860, 865, 867, 868, 876, 884, 894, 901, 905, 907, 914, 915, 938, 945, 950, 969, 978, 996, 1000, 1001, 1019, 1020, 1028, 1031, 1056, 1072, 1073, 1077, 1091, 1092, 1096, 1113, 1122, 1127, 1128, 1134, 1142, 1161, 1163, 1165, 1167, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1189, 1191, 1193, 1196, 1200, 1201, 1205, 1214, 1215, 1217, 1218, 1219, 1220, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1247, 1250, 1258, 1261, 1265, 1267, 1275, 1286, 1291, 1295, 1296, 1298, 1305, 1313], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 173, 190, 192, 195, 204, 219, 220, 223, 234, 238, 245, 271, 280, 313, 316, 544, 545, 603, 788, 810, 823, 827, 832, 833, 850, 867, 901, 1049, 1056, 1161, 1166, 1286, 1291], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 170, 183, 220, 230, 237, 260, 270, 275, 281, 282, 290, 299, 313, 316, 317, 397, 398, 431, 477, 545, 554, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 764, 765, 784, 788, 805, 809, 810, 814, 819, 833, 837, 842, 860, 868, 875, 884, 901, 909, 973, 989, 990, 1026, 1073, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1190, 1265, 1270, 1286, 1291], "Its": [205, 313, 475, 788, 1071, 1286], "NO": 907, "NOT": [119, 215, 254, 313, 536, 553, 626, 788, 855, 901, 1313], "No": 20, "Not": [193, 313, 460, 489, 490, 788, 809, 821, 901, 1058, 1286], "ON": 1313, "OR": [708, 709, 823, 901, 907], "ORs": [377, 788, 964, 1286], "On": [698, 788, 835, 901], "One": [47, 183, 234, 270, 275, 313, 326, 582, 710, 721, 737, 743, 746, 753, 755, 758, 759, 768, 788, 814, 901, 907, 991, 1286], "Or": [203, 204, 219, 245, 259, 283, 292, 313, 453, 603, 636, 729, 730, 732, 733, 775, 776, 778, 784, 788, 826, 827, 832, 850, 859, 877, 901, 1051, 1286], "That": [135, 837, 901], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 175, 183, 184, 186, 187, 188, 191, 192, 195, 202, 203, 204, 205, 210, 216, 219, 220, 223, 230, 236, 238, 245, 246, 247, 248, 251, 252, 253, 260, 270, 271, 276, 279, 283, 287, 288, 290, 291, 292, 299, 313, 324, 365, 366, 367, 368, 381, 382, 398, 400, 403, 404, 405, 413, 423, 427, 428, 431, 433, 444, 445, 456, 459, 462, 466, 467, 475, 507, 511, 544, 545, 557, 583, 590, 593, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 630, 633, 639, 643, 644, 647, 652, 653, 654, 658, 659, 660, 661, 669, 670, 671, 672, 673, 674, 675, 685, 689, 696, 697, 716, 718, 736, 740, 748, 750, 764, 765, 766, 767, 770, 778, 780, 781, 783, 784, 788, 789, 790, 793, 795, 796, 797, 804, 809, 814, 815, 817, 819, 820, 823, 826, 827, 830, 832, 833, 837, 842, 846, 850, 852, 853, 854, 860, 864, 866, 871, 872, 875, 877, 884, 901, 905, 906, 907, 913, 916, 953, 954, 955, 968, 977, 990, 991, 994, 995, 996, 1004, 1018, 1022, 1023, 1026, 1028, 1039, 1040, 1056, 1057, 1060, 1071, 1105, 1109, 1142, 1161, 1163, 1165, 1169, 1170, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1197, 1200, 1205, 1209, 1210, 1218, 1219, 1220, 1224, 1225, 1226, 1227, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1267, 1271, 1278, 1280, 1282, 1286, 1287, 1292, 1293, 1294, 1295, 1300, 1313, 1314, 1316], "Then": 148, "There": 1313, "These": [1, 36, 125, 131, 132, 168, 277, 313, 444, 787, 788, 905, 1026, 1039], "To": [35, 54, 193, 313, 387, 403, 404, 460, 461, 640, 646, 647, 648, 651, 660, 661, 670, 671, 672, 673, 682, 788, 821, 901, 978, 994, 995, 1058, 1206, 1212, 1213, 1214, 1217, 1226, 1227, 1248, 1267, 1286, 1313], "Will": [53, 54, 809, 810, 819, 846, 857, 901, 1286], "With": [138, 214, 256, 313, 357, 529, 627, 788, 809, 856, 901, 945, 1091, 1127, 1193, 1286], "_": [1, 47, 51, 238, 268, 272, 313, 350, 515, 641, 648, 650, 656, 657, 662, 665, 666, 857, 901, 972, 1207, 1214, 1222, 1223, 1228, 1232, 1262, 1286], "__array_ufunc__": 909, "__call__": 784, "__dataframe__": 117, "__enter__": 1313, "__exit__": 1313, "__getattr__": 784, "__getitem__": 685, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 876, 1313], "__name__": [217, 313], "_bar_": 739, "_btm_by_a": [382, 788], "_btm_by_b": [382, 788], "_by_ca": [382, 697, 788], "_by_cb": [382, 697, 788], "_df": [1, 48], "_diff": [287, 313, 871, 901], "_eager": [809, 901], "_expr": [1, 49], "_foo": 550, "_geventdataframeresult": [54, 810, 901], "_is_not_nan": [490, 788], "_is_odd": [251, 313, 852, 901], "_isnan": [489, 788], "_isnul": [492, 788], "_kwarg": [809, 901], "_ldf": 1, "_lf": 50, "_lower_boundari": [204, 313, 827, 901], "_mean_squar": [292, 877], "_not_nul": [491, 788], "_o": [656, 657, 1222, 1223], "_revers": [567, 571, 600, 788], "_right": [218, 219, 220, 313, 831, 832, 833, 901], "_suffix": 572, "_sum": [292, 877], "_top_by_a": [697, 788], "_top_by_b": [697, 788], "_train": [873, 901], "_upper_boundari": [204, 313, 827, 901], "_world": 739, "a1": [36, 48, 50, 313], "a101": 1316, "a123": [36, 313], "a2": [36, 48, 50, 313], "a_1": [666, 1232, 1262, 1286], "a_2": [1262, 1286], "a_3": [1262, 1286], "a_a": 768, "a_agg_list": [204, 313, 827, 901], "a_b_doubl": 735, "a_btm_by_a": [382, 788], "a_btm_by_b": [382, 788], "a_by_ca": [382, 697, 788], "a_by_cb": [382, 697, 788], "a_div_2": 1307, "a_div_5": 1307, "a_interpol": [481, 788], "a_is_even": [260, 313, 767, 860, 901], "a_isnul": [492, 788], "a_lag_": 718, "a_log2": 1307, "a_mod_2": 1307, "a_not_nul": [491, 788], "a_revers": [567, 571, 600, 788], "a_rol": 718, "a_suffix": 572, "a_times_2": [545, 788], "a_times_b": [544, 788], "a_top_by_a": [697, 788], "a_top_by_b": [697, 788], "a_txt": 768, "aa": [456, 640, 651, 736, 788, 907, 991, 1206, 1217, 1286, 1308], "aaa": [1, 36, 313, 640, 651, 685, 687, 688, 907, 1206, 1217], "aaaa": [954, 955], "aabcdef": 671, "aad": [954, 955], "aag": 26, "aazz": 1308, "ab": [206, 222, 264, 287, 313, 685, 687, 688, 788, 871, 901, 907, 1072, 1096, 1258, 1286, 1306, 1308], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 648, 660, 670, 788, 907, 1214, 1226, 1227], "abc123": 1308, "abc456": [660, 1226, 1227, 1308], "abcabc": 661, "abcd": 1308, "abcdeff": 670, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 633, 640, 647, 648, 651, 660, 661, 788, 905, 1200, 1206, 1213, 1214, 1217, 1226, 1227, 1286, 1316], "abov": [36, 219, 238, 313, 778, 832, 901], "abs_a": 1307, "absolut": [133, 144, 145, 152, 153, 154, 155, 321, 452, 454, 455, 788, 912, 1050, 1052, 1053, 1286, 1307], "acc": [724, 725, 738, 762], "accent": 907, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 175, 185, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 322, 382, 387, 456, 482, 583, 597, 598, 636, 662, 689, 697, 705, 707, 709, 714, 717, 718, 719, 727, 736, 752, 754, 757, 766, 770, 772, 778, 784, 788, 804, 816, 826, 852, 853, 856, 859, 864, 871, 872, 877, 901, 905, 906, 978, 1077, 1161, 1169, 1170, 1193, 1228, 1286], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 172, 179, 216, 246, 247, 260, 313, 649, 685, 811, 860, 873, 901, 906, 1215, 1316], "accord": [246, 313, 590, 729, 730, 732, 733, 775, 776, 788, 1009, 1163, 1286], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 313, 427, 452, 454, 455, 788, 1022, 1050, 1052, 1053, 1286], "accumul": [724, 725, 738, 762], "acg": 26, "achiev": [223, 238, 299, 313, 545, 657, 788, 1142, 1223, 1286], "aco": 1306, "acosd": 1306, "across": [36, 47, 132, 184, 205, 225, 227, 232, 253, 263, 313, 400, 475, 557, 707, 709, 724, 725, 727, 752, 754, 757, 772, 788, 815, 854, 901, 1071, 1286], "action": [35, 313], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 508, 648, 1106, 1214], "actual": [36, 119, 159, 163, 248, 313, 1195, 1286, 1308, 1315], "ad": [34, 36, 119, 134, 204, 260, 270, 275, 277, 282, 287, 288, 313, 328, 459, 551, 689, 724, 725, 767, 788, 827, 860, 868, 871, 872, 901, 907, 1057, 1265, 1270, 1286], "adbc": [34, 131, 132, 313], "adbc_driver_manag": 151, "adbc_ingest": [34, 313], "add": [35, 36, 130, 192, 204, 223, 287, 288, 289, 290, 313, 316, 398, 569, 570, 571, 572, 590, 689, 734, 738, 778, 788, 827, 831, 871, 872, 873, 874, 875, 901, 1056, 1286, 1291], "add_calendar_dai": 734, "add_calendar_month": 734, "add_calendar_year": 734, "add_chart": [36, 313], "add_dai": 734, "add_format": [36, 313], "add_hour": 734, "add_milli": 734, "add_second": 734, "add_seri": [36, 313], "add_week": 734, "add_worksheet": [36, 313], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 187, 191, 203, 221, 236, 251, 252, 259, 272, 279, 287, 288, 292, 313, 322, 414, 456, 459, 583, 636, 640, 647, 648, 651, 660, 661, 685, 689, 714, 717, 718, 719, 736, 766, 767, 770, 784, 788, 820, 826, 852, 853, 859, 866, 871, 872, 877, 901, 907, 997, 1005, 1057, 1206, 1213, 1214, 1217, 1226, 1227, 1268, 1286, 1296, 1313], "addition": [55, 246, 313, 907], "address": 648, "adjac": [36, 313], "adjust": [452, 454, 455, 633, 788, 1050, 1052, 1053, 1200, 1286], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 238, 313, 362, 536, 566, 569, 571, 573, 574, 950, 1134, 1316], "advantag": [36, 168, 237, 313], "advis": [36, 46, 85, 313], "aedt": 731, "aeiuo": [651, 1217], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 313], "afm": 145, "afoo": [873, 901], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 175, 192, 276, 279, 313, 381, 382, 456, 583, 593, 684, 696, 697, 788, 804, 864, 866, 901, 968, 1056, 1165, 1250, 1271, 1286, 1301], "afterward": [46, 778], "ag": [230, 313, 842, 901, 1314], "again": [545, 788], "against": [34, 93, 129, 131, 195, 260, 313, 508, 651, 767, 823, 860, 901, 1106, 1217, 1295, 1313, 1315, 1316], "agg": [203, 204, 238, 245, 313, 323, 382, 462, 464, 469, 472, 544, 545, 583, 635, 636, 697, 704, 729, 732, 750, 788, 809, 810, 819, 826, 827, 846, 850, 857, 901, 907], "agg_group": [741, 788], "agg_list": [544, 788], "aggreg": [129, 130, 133, 141, 197, 203, 204, 224, 226, 228, 231, 234, 238, 239, 240, 245, 261, 262, 281, 284, 292, 293, 295, 297, 313, 323, 372, 377, 380, 462, 478, 544, 545, 583, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 706, 707, 708, 709, 724, 725, 726, 727, 738, 743, 751, 752, 754, 756, 757, 762, 771, 772, 788, 827, 837, 838, 839, 840, 843, 844, 847, 850, 861, 862, 869, 877, 878, 880, 882, 901, 905, 959, 964, 967, 1074, 1175, 1176, 1177, 1179, 1182, 1183, 1184, 1286, 1302, 1304, 1306, 1312], "aggregate_funct": [238, 313, 907], "aho": [641, 650, 662, 1207, 1216, 1228], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [174, 313, 329, 641, 650, 662, 710, 788, 803, 901, 917, 1207, 1216, 1228, 1286], "alia": [1, 12, 47, 49, 51, 83, 179, 204, 222, 238, 245, 279, 287, 290, 313, 316, 322, 326, 366, 367, 368, 369, 371, 381, 392, 393, 394, 395, 396, 398, 401, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 450, 451, 464, 466, 471, 473, 479, 482, 485, 488, 496, 498, 520, 532, 538, 543, 545, 549, 551, 553, 555, 559, 562, 564, 566, 577, 578, 582, 584, 588, 590, 593, 595, 623, 625, 640, 641, 642, 643, 645, 647, 648, 650, 651, 652, 656, 657, 662, 663, 664, 665, 666, 667, 668, 672, 673, 675, 685, 686, 687, 688, 690, 695, 696, 698, 704, 705, 711, 712, 713, 717, 718, 719, 729, 732, 734, 735, 738, 739, 744, 747, 749, 750, 762, 770, 775, 778, 788, 827, 829, 836, 850, 866, 871, 875, 901, 990, 997, 998, 1001, 1004, 1005, 1006, 1007, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1096, 1163, 1168, 1213, 1214, 1232, 1233, 1286], "alias": [260, 313, 551, 860, 901], "alic": [129, 1314], "align": [10, 15, 16, 36, 47, 55, 313, 1314], "align_fram": 55, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 173, 174, 176, 183, 185, 187, 194, 206, 211, 213, 215, 216, 217, 218, 220, 221, 222, 227, 229, 233, 234, 238, 241, 242, 246, 247, 248, 252, 258, 259, 263, 264, 268, 270, 271, 275, 278, 280, 281, 282, 283, 288, 290, 313, 316, 326, 328, 350, 365, 382, 391, 397, 403, 404, 405, 406, 456, 461, 467, 474, 475, 478, 480, 484, 487, 491, 492, 497, 507, 508, 515, 533, 536, 544, 563, 566, 567, 569, 570, 571, 572, 573, 574, 581, 583, 593, 598, 600, 604, 628, 634, 636, 642, 648, 649, 652, 655, 661, 669, 670, 671, 675, 697, 707, 716, 724, 725, 726, 727, 736, 738, 743, 744, 747, 754, 762, 770, 771, 772, 778, 784, 788, 794, 800, 803, 806, 809, 810, 814, 816, 817, 819, 822, 831, 833, 837, 841, 846, 848, 853, 857, 858, 859, 865, 867, 868, 872, 873, 875, 901, 907, 938, 989, 991, 994, 995, 996, 997, 1072, 1078, 1090, 1096, 1105, 1106, 1113, 1131, 1134, 1165, 1170, 1175, 1201, 1208, 1214, 1215, 1218, 1221, 1227, 1235, 1236, 1237, 1241, 1258, 1267, 1286, 1290, 1291, 1296, 1298, 1303, 1304, 1308, 1312, 1313, 1315, 1316], "all_compat": 1298, "all_data": 1313, "all_horizont": [187, 313, 706, 817, 901], "all_stat": 30, "alloc": [129, 130, 190, 241, 313, 788, 876, 905, 1049, 1286], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 172, 216, 219, 221, 246, 247, 249, 271, 272, 275, 278, 291, 313, 427, 433, 436, 524, 544, 545, 551, 595, 624, 674, 676, 677, 788, 831, 832, 837, 841, 865, 873, 901, 905, 907, 1022, 1028, 1031, 1122, 1142, 1167, 1187, 1240, 1242, 1243, 1267, 1268, 1286, 1308, 1316], "allow_alias": 551, "allow_chunk": [159, 163], "allow_copi": [117, 172, 271, 313, 1267, 1286], "allow_dupl": [590, 788, 1163, 1286], "allow_infin": [159, 163], "allow_missing_column": [141, 148], "allow_nul": [156, 159, 163, 1316], "allow_object": 748, "allow_parallel": [219, 313, 831, 832, 901], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1316], "almost": [54, 223, 299, 313, 674, 676, 677, 810, 901, 1142, 1240, 1242, 1243, 1286], "alpha": [452, 454, 455, 788, 819, 846, 857, 901, 907, 1050, 1052, 1053, 1286], "alpha_i": [453, 788, 1051, 1286], "alphabet": [907, 1316], "alphanumer": [682, 907, 1248], "alreadi": [34, 35, 92, 270, 313, 397, 508, 702, 788, 857, 901, 989, 1106, 1275, 1286], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 141, 143, 148, 158, 159, 162, 163, 168, 188, 203, 204, 230, 234, 238, 245, 247, 251, 259, 270, 282, 287, 290, 313, 393, 396, 405, 427, 430, 462, 482, 545, 551, 583, 593, 597, 598, 636, 660, 661, 662, 669, 670, 685, 716, 724, 725, 728, 731, 738, 740, 762, 778, 787, 788, 794, 826, 827, 842, 850, 852, 859, 868, 871, 873, 875, 901, 907, 996, 1025, 1077, 1165, 1169, 1170, 1208, 1226, 1227, 1228, 1235, 1286, 1290, 1296, 1298, 1301, 1308, 1311, 1313, 1314], "alt": [313, 316, 1286, 1291], "altair": [151, 313, 316, 1286, 1291], "altern": [36, 313, 784, 1305], "although": [260, 313, 860, 901], "alwai": [13, 33, 35, 42, 63, 65, 129, 175, 195, 203, 218, 219, 223, 276, 299, 313, 381, 382, 544, 554, 674, 696, 697, 778, 788, 804, 823, 831, 832, 837, 864, 901, 907, 968, 1142, 1240, 1271, 1286, 1295, 1296, 1313, 1316], "am": [663, 1229], "amarillo": 1308, "ambigu": [430, 431, 444, 674, 677, 731, 1025, 1026, 1039, 1240, 1243], "america": 732, "amount": [46, 64, 85, 139, 143, 146, 147, 545, 734, 788, 1303], "amsterdam": [430, 1025], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 176, 177, 178, 179, 185, 190, 193, 197, 199, 204, 215, 216, 217, 219, 220, 223, 234, 238, 242, 243, 245, 246, 250, 260, 265, 271, 275, 277, 281, 282, 287, 290, 299, 313, 316, 324, 346, 349, 361, 367, 372, 375, 377, 378, 380, 393, 394, 395, 396, 397, 398, 405, 409, 410, 427, 430, 433, 447, 453, 461, 462, 468, 469, 472, 505, 508, 511, 513, 535, 536, 544, 545, 555, 557, 566, 567, 588, 589, 590, 598, 599, 603, 604, 605, 607, 609, 611, 613, 616, 618, 620, 639, 640, 643, 648, 651, 654, 674, 676, 677, 679, 681, 698, 706, 711, 715, 729, 730, 732, 733, 735, 737, 740, 744, 745, 746, 747, 748, 760, 762, 763, 766, 770, 775, 776, 778, 779, 784, 788, 806, 807, 808, 810, 814, 816, 819, 823, 827, 832, 833, 837, 846, 848, 850, 851, 857, 860, 868, 871, 873, 875, 876, 884, 898, 901, 905, 906, 907, 934, 937, 949, 954, 959, 962, 964, 965, 967, 977, 979, 985, 986, 987, 988, 989, 996, 1000, 1028, 1042, 1049, 1051, 1091, 1103, 1106, 1109, 1111, 1133, 1142, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1188, 1190, 1205, 1206, 1209, 1214, 1217, 1220, 1240, 1242, 1243, 1245, 1247, 1267, 1286, 1304, 1305, 1308, 1312, 1313, 1315], "ana": [663, 1229], "anan": [663, 1229], "ananab": 1308, "and_": 788, "ang": 1308, "angl": [712, 713], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 173, 175, 181, 185, 187, 192, 194, 195, 197, 199, 214, 216, 217, 218, 219, 220, 223, 227, 237, 242, 246, 247, 248, 260, 263, 266, 267, 270, 271, 272, 275, 276, 278, 281, 282, 290, 313, 316, 317, 322, 325, 326, 350, 381, 382, 383, 397, 398, 431, 432, 450, 451, 461, 462, 466, 469, 471, 473, 477, 486, 496, 503, 508, 515, 543, 544, 545, 551, 559, 562, 564, 566, 567, 569, 571, 573, 574, 577, 578, 582, 587, 590, 597, 598, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 629, 639, 641, 653, 670, 671, 672, 673, 674, 676, 677, 679, 681, 690, 696, 697, 698, 705, 706, 707, 709, 719, 720, 721, 748, 750, 764, 765, 778, 788, 804, 809, 810, 816, 817, 819, 822, 823, 831, 832, 833, 845, 848, 860, 864, 865, 868, 875, 876, 901, 905, 907, 909, 911, 914, 938, 968, 973, 989, 990, 1026, 1027, 1046, 1047, 1056, 1059, 1064, 1066, 1068, 1073, 1082, 1091, 1094, 1101, 1106, 1113, 1141, 1142, 1153, 1154, 1163, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1189, 1205, 1207, 1219, 1240, 1242, 1243, 1245, 1247, 1265, 1266, 1267, 1268, 1270, 1271, 1286, 1291, 1313, 1316], "anna": [230, 313, 842, 901], "anoth": [86, 158, 176, 184, 189, 203, 219, 253, 313, 397, 400, 407, 481, 511, 549, 553, 557, 597, 606, 608, 610, 612, 614, 617, 619, 621, 651, 788, 806, 815, 826, 832, 854, 873, 901, 989, 998, 1048, 1056, 1076, 1109, 1169, 1170, 1217, 1286, 1307, 1308], "anti": [218, 313, 831, 884, 901, 1188, 1190, 1286, 1302], "any_horizont": 708, "anyth": [35, 246, 313], "anywher": [369, 371, 674, 676, 677, 1240, 1242, 1243], "ap": 1308, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 171, 313, 910], "apaya": [675, 1241], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 172, 223, 299, 313, 545, 750, 788, 884, 1142, 1286, 1312], "apia": [406, 997], "app": [668, 1234], "appear": [36, 59, 119, 154, 155, 313, 700, 788, 907, 1273, 1286, 1314], "append": [34, 35, 159, 192, 218, 219, 220, 313, 594, 778, 788, 831, 832, 833, 901, 1056, 1286], "appl": [180, 208, 218, 242, 243, 266, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 313, 382, 600, 645, 668, 697, 788, 831, 848, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 901, 1211, 1234, 1302, 1308], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 183, 197, 220, 223, 237, 259, 260, 270, 299, 313, 338, 408, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 432, 434, 445, 446, 448, 454, 455, 544, 545, 587, 605, 606, 607, 608, 611, 612, 618, 619, 636, 660, 661, 674, 676, 677, 681, 714, 724, 725, 738, 749, 750, 762, 767, 778, 788, 814, 833, 837, 845, 859, 860, 884, 901, 978, 999, 1002, 1003, 1004, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1027, 1029, 1040, 1041, 1043, 1052, 1053, 1142, 1176, 1177, 1179, 1183, 1226, 1227, 1240, 1242, 1243, 1247, 1286, 1295], "applic": [271, 313, 545, 788], "appropri": [36, 149, 195, 271, 313, 593, 788, 823, 901, 1165, 1286], "approx": [329, 788], "approx_n_uniqu": [313, 788, 901, 1286], "approxim": [41, 174, 313, 329, 453, 710, 788, 803, 901, 917, 1051, 1286, 1307, 1316], "april": [433, 436, 1028, 1031, 1308, 1309], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 172, 175, 181, 183, 187, 190, 193, 195, 196, 197, 202, 203, 204, 216, 218, 219, 220, 221, 223, 229, 230, 236, 238, 245, 246, 247, 248, 251, 252, 254, 256, 259, 266, 270, 271, 272, 275, 276, 280, 282, 283, 287, 288, 291, 292, 313, 325, 327, 341, 357, 362, 381, 382, 387, 393, 395, 396, 405, 431, 444, 449, 451, 452, 453, 454, 455, 460, 462, 482, 484, 486, 487, 489, 490, 491, 492, 494, 499, 529, 536, 544, 578, 583, 590, 593, 596, 597, 598, 599, 603, 606, 608, 610, 612, 614, 615, 617, 619, 621, 627, 630, 633, 635, 636, 641, 649, 652, 654, 655, 658, 659, 660, 661, 662, 664, 675, 677, 679, 684, 689, 691, 696, 697, 706, 707, 709, 714, 717, 718, 719, 720, 727, 729, 730, 732, 733, 752, 754, 757, 766, 770, 772, 775, 776, 778, 780, 781, 783, 787, 788, 789, 790, 793, 794, 795, 796, 797, 800, 804, 809, 810, 814, 817, 821, 823, 826, 827, 831, 832, 833, 837, 841, 842, 846, 848, 850, 852, 853, 855, 856, 859, 864, 867, 868, 871, 872, 873, 877, 901, 905, 907, 914, 915, 929, 945, 950, 968, 971, 978, 987, 988, 996, 1026, 1039, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1058, 1060, 1062, 1077, 1080, 1082, 1083, 1085, 1086, 1087, 1088, 1092, 1097, 1127, 1134, 1154, 1163, 1165, 1169, 1170, 1171, 1181, 1193, 1197, 1200, 1207, 1215, 1218, 1220, 1224, 1225, 1226, 1227, 1230, 1241, 1243, 1245, 1250, 1257, 1265, 1267, 1268, 1271, 1278, 1280, 1282, 1286, 1287, 1290, 1292, 1293, 1294, 1296, 1298, 1301, 1305, 1313, 1316], "arbitrari": [74, 199, 313, 400, 788, 815, 901, 907], "arbitrarili": [223, 313], "arcco": [788, 1286], "arccosh": [788, 1286], "arcsin": [788, 1286], "arcsinh": [788, 1286], "arctan": [712, 713, 788, 1286], "arctan2": 713, "arctanh": [788, 1286], "aren": [33, 42, 313, 901], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 195, 237, 313, 338, 587, 714, 739, 788, 823, 845, 901, 905, 1142, 1286, 1299], "arg_max": [788, 1286], "arg_min": [788, 1286], "arg_sort": [788, 1286], "arg_tru": [715, 788, 1286], "arg_uniqu": [788, 1286], "arg_wher": [339, 788], "argmax": [544, 788], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 181, 185, 191, 203, 204, 219, 236, 237, 245, 251, 252, 259, 272, 279, 283, 287, 288, 292, 313, 431, 444, 456, 462, 482, 544, 583, 587, 603, 636, 669, 670, 671, 689, 706, 712, 713, 714, 717, 718, 719, 721, 736, 766, 770, 778, 784, 788, 816, 820, 826, 827, 832, 845, 850, 852, 853, 859, 866, 871, 872, 877, 898, 901, 905, 907, 1026, 1039, 1077, 1235, 1236, 1237, 1268, 1286, 1307, 1308], "aris": 131, "arithmet": [197, 313], "arm": 151, "arm64": 151, "around": [33, 42, 313, 901], "arr": [271, 313, 780, 1267, 1278, 1286], "arr_bar": 1304, "arr_foo": 1304, "arrai": [116, 120, 129, 130, 133, 141, 170, 190, 191, 265, 270, 271, 272, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 393, 394, 395, 396, 503, 518, 519, 520, 521, 523, 532, 533, 535, 538, 540, 544, 599, 605, 607, 609, 611, 613, 616, 618, 620, 626, 735, 767, 788, 820, 901, 909, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 985, 986, 987, 988, 993, 1049, 1101, 1116, 1117, 1118, 1119, 1121, 1129, 1130, 1131, 1133, 1136, 1138, 1139, 1171, 1176, 1177, 1179, 1182, 1183, 1184, 1191, 1195, 1261, 1265, 1267, 1268, 1286, 1306, 1312, 1315], "array_agg": 1306, "array_contain": 1306, "array_get": 1306, "array_length": 1306, "array_low": 1306, "array_mean": 1306, "array_revers": 1306, "array_sum": 1306, "array_to_str": 1306, "array_uniqu": 1306, "array_upp": 1306, "arraylik": [993, 1286], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 171, 216, 247, 248, 265, 267, 271, 313, 901, 910, 1261, 1267, 1286], "arrowinvaliderror": [35, 313], "as_": [1286, 1291], "as_dict": [130, 236, 313], "as_expr": 907, "as_seri": [176, 266, 313, 806, 901, 907], "asarrai": [170, 909], "ascend": [204, 245, 313, 603, 788, 827, 850, 901], "ascii": [7, 20, 641, 650, 652, 656, 657, 662, 664, 675, 684, 907, 1207, 1216, 1218, 1222, 1223, 1228, 1230, 1241, 1250], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [641, 650, 662, 1207, 1216, 1228], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1316, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 907, "ascii_uppercas": [281, 313], "asd": [642, 648, 1208, 1214], "asia": [123, 907, 1002, 1003, 1029], "asin": 1306, "asind": 1306, "asof": [219, 313, 832, 901], "asof_join": [219, 313], "asofjoinstrategi": [219, 313, 832, 901], "assert": [152, 153, 154, 155, 159, 163, 245, 313, 800, 907], "assert_frame_equ": [153, 154, 189, 313, 1316], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1048, 1286, 1316], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 204, 298, 313, 362, 536, 583, 593, 666, 667, 788, 827, 883, 901, 950, 1134, 1165, 1232, 1233, 1286], "associ": [34, 36, 47, 132, 134, 158, 161, 248, 313, 906, 1297, 1299], "assum": [248, 313, 837, 884, 901, 1308], "assumpt": [544, 788], "async": [131, 810, 901], "async_engin": 131, "asynchron": [54, 131, 810, 901], "asyncio": [54, 131, 810, 901], "asyncresult": [54, 810, 901], "ata": 26, "atan": 1306, "atan2": [712, 713, 1306], "atan2_ab": 1310, "atan2d": [713, 1306], "atan2d_ab": 1310, "atand": 1306, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [636, 788], "attempt": [1, 400, 788, 815, 901], "attr": [313, 316, 1286, 1291], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 313, 316, 780, 781, 783, 784, 789, 790, 793, 795, 796, 797, 876, 901, 1278, 1280, 1282, 1286, 1287, 1291, 1292, 1293, 1294], "attributeerror": 1, "audi": [266, 313, 600, 788], "australia": 731, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 313], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 277, 313, 901, 1316], "auto_structifi": [251, 287, 313, 852, 871, 901], "autofilt": [36, 313], "autofit": [36, 313], "autogener": [129, 130, 134, 140, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 251, 260, 287, 313, 544, 598, 669, 670, 671, 767, 788, 852, 860, 871, 901, 905, 1169, 1170, 1235, 1236, 1237, 1270, 1286, 1296, 1298, 1301, 1313], "autumn": [660, 661], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 238, 260, 312, 313, 593, 767, 780, 781, 783, 787, 788, 789, 790, 793, 794, 795, 796, 797, 800, 860, 899, 900, 901, 905, 907, 991, 1165, 1278, 1280, 1282, 1286, 1287, 1290, 1292, 1293, 1294], "available_timezon": [62, 907], "averag": [36, 313, 452, 453, 454, 455, 593, 788, 1050, 1051, 1052, 1053, 1165, 1286, 1303], "avg": 1306, "avocado": 1308, "avoid": [133, 159, 163, 195, 247, 313, 324, 788, 823, 901], "avro": [31, 127, 313, 800], "avrocompress": [31, 313], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1307, "await": [54, 131, 810, 895, 901], "awar": [10, 131, 216, 247, 248, 267, 313, 453, 641, 650, 662, 677, 788, 901, 1051, 1207, 1216, 1228, 1243, 1286], "aws_access_key_id": [35, 133, 144, 148, 313], "aws_region": [35, 144, 148, 313], "aws_secret_access_kei": [35, 133, 144, 148, 313], "axi": [229, 280, 313, 712, 713, 841, 867, 901], "aya": [664, 1230, 1241], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 313], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 322, 324, 325, 327, 328, 338, 340, 345, 350, 365, 366, 367, 368, 369, 370, 371, 382, 383, 391, 398, 402, 433, 436, 456, 458, 460, 461, 462, 464, 467, 474, 475, 478, 480, 481, 482, 484, 487, 489, 490, 491, 492, 497, 503, 508, 515, 525, 526, 527, 528, 544, 545, 550, 557, 563, 566, 567, 568, 569, 570, 571, 572, 580, 581, 583, 587, 590, 593, 597, 598, 600, 602, 628, 634, 636, 643, 646, 651, 654, 660, 661, 685, 686, 697, 700, 704, 706, 707, 708, 709, 710, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 735, 736, 737, 738, 739, 742, 743, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 767, 769, 770, 771, 772, 773, 777, 784, 788, 803, 804, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 913, 916, 938, 953, 954, 955, 956, 957, 958, 971, 972, 973, 990, 993, 1028, 1031, 1045, 1048, 1049, 1056, 1059, 1077, 1082, 1101, 1123, 1124, 1125, 1126, 1163, 1168, 1209, 1212, 1217, 1220, 1226, 1227, 1251, 1253, 1254, 1256, 1268, 1273, 1286, 1296, 1298, 1299, 1301, 1302, 1303, 1304, 1308, 1309, 1310, 1313], "b1": [48, 50], "b2": [48, 50], "b345": [36, 313], "b4": [36, 313], "b_b": [260, 313], "b_btm_by_a": [382, 788], "b_btm_by_b": [382, 788], "b_by_ca": [382, 697, 788], "b_by_cb": [382, 697, 788], "b_is_not_nan": [490, 788], "b_isnan": [489, 788], "b_isnul": [492, 788], "b_not_nul": [491, 788], "b_revers": [567, 571, 600, 788], "b_suffix": 572, "b_sum": [292, 877], "b_top_by_a": [697, 788], "b_top_by_b": [697, 788], "ba": [400, 456, 557, 668, 736, 788, 907], "back": [4, 47, 148, 192, 204, 253, 271, 272, 313, 557, 583, 788, 809, 827, 854, 876, 901, 1056, 1268, 1286], "backend": [35, 131, 132, 133, 144, 145, 313, 316, 1286, 1291], "background": [313, 317, 809, 900, 901], "backward": [41, 45, 194, 219, 313, 365, 405, 425, 461, 788, 822, 832, 901, 996, 1020, 1059, 1286], "backward_fil": [467, 627, 788], "bad": [660, 661, 1226, 1227], "balanc": [162, 164, 1316], "ballon_dor": [647, 649, 1213, 1215], "banana": [180, 266, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 382, 600, 645, 668, 697, 788, 880, 882, 885, 886, 887, 888, 889, 890, 891, 1308], "banded_column": [36, 313], "banded_row": [36, 313], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 206, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 278, 279, 284, 285, 286, 291, 313, 316, 384, 400, 479, 549, 551, 553, 554, 555, 556, 557, 558, 559, 633, 642, 644, 646, 648, 649, 663, 665, 667, 672, 673, 710, 720, 721, 722, 737, 742, 743, 746, 747, 751, 753, 755, 756, 758, 759, 766, 769, 773, 777, 778, 784, 788, 806, 811, 812, 816, 817, 818, 823, 829, 830, 831, 844, 848, 851, 852, 865, 866, 870, 901, 906, 907, 970, 1113, 1200, 1208, 1210, 1212, 1214, 1215, 1229, 1233, 1238, 1239, 1286, 1300, 1302, 1303, 1304, 1305, 1308, 1311], "bar2": 1308, "bar22": [197, 313], "bar_": 665, "bar_3": [268, 313], "bar_4": [268, 313], "bar_a": [238, 313], "bar_at_2": 1304, "bar_avg": 1303, "bar_b": [238, 313], "bar_color": [36, 313], "bar_max": 1303, "bar_median": 1303, "bar_min": 1303, "bar_negative_border_color_sam": [36, 313], "bar_negative_color_sam": [36, 313], "bar_std": 1303, "bar_sum": 1303, "bar_var": 1303, "bare": [551, 907], "base": [36, 60, 102, 104, 161, 187, 195, 204, 220, 245, 313, 406, 414, 449, 452, 453, 454, 455, 462, 477, 481, 539, 540, 544, 545, 588, 590, 598, 603, 606, 608, 610, 612, 614, 617, 619, 621, 679, 788, 817, 823, 827, 833, 850, 901, 907, 997, 1005, 1045, 1050, 1051, 1052, 1053, 1073, 1076, 1137, 1138, 1142, 1161, 1163, 1169, 1170, 1245, 1277, 1286, 1302, 1307, 1316], "base64": [367, 368, 643, 644, 954, 955, 1209, 1210], "base_nam": [277, 313], "base_utc_offset": [414, 1005], "baseexcept": 1313, "basi": [36, 134, 159, 313], "basic": [36, 170, 313, 909, 1316], "basic_chart": [36, 313], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 247, 275, 313, 809, 810, 837, 901], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 275, 313, 901], "batchedcsvread": 130, "baz": [199, 209, 210, 279, 313, 649, 665, 667, 737, 746, 759, 784, 830, 866, 901, 907, 1215, 1233, 1300, 1305, 1308], "bb": [907, 991, 1286, 1308, 1313], "bbb": [1, 36, 313, 685, 687, 688, 907], "bc": [651, 661, 771, 1217], "bcbc45": 1308, "bea": 12, "bear": 907, "beauti": 12, "becaus": [139, 147, 190, 204, 221, 223, 281, 299, 313, 466, 508, 788, 827, 884, 901, 1049, 1106, 1142, 1286], "becom": [161, 312, 899, 900], "bed3": [36, 313], "been": [5, 30, 36, 166, 172, 294, 313, 468, 545, 560, 593, 788, 879, 1165, 1286], "beetl": [266, 313, 600, 788], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 192, 204, 219, 260, 270, 275, 279, 313, 375, 376, 378, 379, 395, 396, 397, 544, 583, 584, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 646, 684, 691, 718, 764, 765, 788, 827, 829, 832, 866, 901, 905, 962, 963, 965, 966, 987, 988, 989, 1056, 1158, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1212, 1250, 1257, 1286, 1302], "beforehand": [674, 676, 677, 1240, 1242, 1243], "begin": [12, 36, 313, 452, 454, 455, 647, 675, 788, 1050, 1052, 1053, 1213, 1241, 1286], "behav": [195, 313, 462, 545, 670, 671, 788, 823, 901], "behavior": [41, 45, 141, 148, 187, 195, 218, 219, 313, 349, 468, 511, 513, 646, 737, 746, 788, 817, 823, 831, 832, 898, 901, 937, 1109, 1111, 1212], "behaviour": [10, 47, 55, 187, 260, 313, 640, 647, 648, 651, 660, 661, 698, 767, 788, 817, 860, 901, 1206, 1213, 1214, 1217, 1226, 1227], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 134, 140, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 176, 191, 220, 260, 268, 270, 275, 281, 282, 313, 316, 317, 397, 398, 431, 477, 545, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 646, 716, 735, 764, 765, 788, 806, 809, 810, 819, 820, 833, 860, 868, 901, 973, 989, 990, 1026, 1073, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1212, 1262, 1265, 1270, 1286, 1291, 1316], "belong": [1, 204, 313, 827, 901], "below": [19, 35, 133, 134, 144, 145, 187, 195, 238, 313, 461, 652, 675, 729, 730, 732, 733, 775, 776, 778, 784, 788, 817, 823, 901, 1218, 1241], "benchmark": 129, "best": [223, 299, 313, 545, 788, 1142, 1286], "better": [223, 270, 271, 299, 313, 545, 657, 788, 805, 884, 901, 1188, 1190, 1223, 1286], "between": [24, 55, 87, 156, 157, 159, 163, 173, 181, 240, 247, 305, 313, 350, 383, 401, 402, 482, 506, 515, 525, 526, 527, 528, 584, 590, 591, 613, 614, 639, 653, 712, 713, 716, 720, 722, 761, 764, 765, 788, 847, 890, 901, 938, 969, 972, 992, 993, 1077, 1104, 1113, 1123, 1124, 1125, 1126, 1158, 1163, 1164, 1180, 1205, 1219, 1286, 1310], "between_ab": [482, 788], "beyond": [682, 1248], "bia": [454, 455, 494, 615, 633, 788, 1052, 1053, 1092, 1181, 1200, 1286], "bias": [494, 633, 788, 1092, 1200, 1286], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [398, 477, 590, 679, 705, 781, 788, 990, 1073, 1163, 1245, 1280, 1286, 1291], "bin_count": [477, 788, 1073, 1286], "bin_i": [705, 788], "bin_x": [705, 788], "bin_xor_xi": [705, 788], "binari": [37, 131, 184, 253, 313, 366, 367, 368, 369, 370, 371, 400, 557, 643, 788, 815, 854, 901, 907, 953, 954, 956, 957, 958, 1209], "binary_str": [705, 788], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 373, 374, 375, 376, 378, 379, 595, 640, 788, 960, 962, 963, 965, 966, 1167, 1206, 1286, 1308], "bit_length": 1306, "bitmap": [190, 313, 1049, 1286], "bitwis": [326, 372, 377, 380, 582, 705, 706, 707, 708, 709, 788, 959, 964, 967, 1286], "bitwise_and": [788, 1286], "bitwise_count_on": [788, 1286], "bitwise_count_zero": [788, 1286], "bitwise_leading_on": [788, 1286], "bitwise_leading_zero": [788, 1286], "bitwise_or": [788, 1286], "bitwise_trailing_on": [788, 1286], "bitwise_trailing_zero": [788, 1286], "bitwise_xor": [788, 1286], "bla": [642, 648, 1208, 1214], "black": [223, 313, 366, 367, 368, 369, 371], "blindli": [508, 1106], "block": [20, 54, 203, 278, 313, 778, 810, 826, 848, 865, 874, 875, 884, 901, 1188, 1190, 1286], "blue": [46, 84, 85, 366, 367, 368, 369, 371, 702, 788, 1275, 1286], "bob": [129, 230, 313, 842, 901, 1314], "bodi": [36, 313, 317], "bold": [36, 313], "bom": [33, 42, 313, 901], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 175, 176, 177, 178, 183, 185, 189, 194, 195, 196, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 227, 236, 238, 242, 246, 247, 248, 249, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 279, 282, 283, 285, 287, 295, 297, 300, 303, 313, 324, 325, 326, 327, 328, 338, 341, 342, 345, 349, 350, 358, 363, 366, 367, 369, 371, 382, 383, 392, 393, 394, 395, 396, 397, 398, 405, 417, 432, 449, 450, 451, 452, 454, 455, 471, 473, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 504, 508, 511, 513, 515, 524, 531, 537, 543, 544, 545, 549, 550, 551, 552, 553, 554, 558, 577, 578, 580, 582, 585, 586, 590, 593, 595, 604, 605, 607, 609, 611, 613, 615, 616, 618, 620, 624, 626, 628, 633, 635, 636, 639, 640, 641, 642, 643, 645, 650, 651, 653, 660, 661, 662, 665, 666, 668, 674, 676, 677, 679, 681, 685, 687, 688, 697, 699, 702, 705, 706, 707, 708, 709, 711, 714, 715, 716, 719, 720, 723, 724, 729, 730, 732, 733, 744, 745, 748, 750, 760, 763, 767, 770, 775, 776, 778, 779, 788, 804, 806, 807, 809, 810, 814, 816, 819, 822, 823, 826, 827, 831, 832, 837, 841, 846, 848, 855, 857, 859, 860, 864, 865, 866, 867, 868, 871, 876, 880, 882, 885, 888, 901, 905, 907, 909, 914, 915, 926, 929, 930, 933, 937, 938, 946, 951, 953, 954, 956, 958, 969, 971, 973, 977, 984, 985, 986, 987, 988, 989, 990, 996, 1008, 1027, 1045, 1047, 1048, 1050, 1052, 1053, 1060, 1062, 1069, 1070, 1073, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1097, 1098, 1102, 1106, 1109, 1111, 1113, 1122, 1129, 1135, 1142, 1154, 1156, 1159, 1160, 1163, 1165, 1166, 1167, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1190, 1191, 1195, 1200, 1202, 1205, 1206, 1207, 1208, 1209, 1211, 1216, 1217, 1219, 1226, 1227, 1228, 1231, 1232, 1234, 1240, 1242, 1243, 1245, 1247, 1262, 1267, 1268, 1272, 1275, 1286, 1295, 1296, 1298, 1304, 1308, 1313], "boolean": [47, 159, 175, 195, 197, 259, 276, 313, 325, 326, 327, 341, 342, 345, 366, 369, 371, 382, 417, 462, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 499, 500, 504, 580, 582, 585, 586, 636, 654, 697, 704, 705, 714, 715, 770, 778, 788, 804, 823, 859, 864, 901, 907, 914, 915, 927, 929, 930, 933, 953, 1008, 1060, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1097, 1098, 1102, 1156, 1159, 1160, 1190, 1206, 1277, 1286, 1305], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 148, 179, 204, 218, 219, 220, 230, 245, 246, 272, 282, 313, 328, 387, 398, 456, 482, 590, 603, 606, 608, 610, 612, 614, 617, 619, 621, 664, 729, 730, 732, 733, 775, 776, 784, 788, 799, 827, 831, 832, 833, 842, 850, 868, 901, 907, 978, 1077, 1230, 1268, 1286, 1313, 1314], "bottom": [175, 313, 382, 788, 804, 901], "bottom_k": [276, 313, 382, 696, 697, 788, 864, 901, 1271, 1286], "bottom_k_bi": [381, 696, 697, 788], "bound": [98, 129, 130, 190, 204, 313, 349, 387, 482, 511, 513, 536, 542, 701, 711, 729, 730, 732, 733, 775, 776, 788, 827, 901, 937, 978, 1049, 1077, 1109, 1111, 1140, 1274, 1286, 1304], "boundari": [204, 313, 387, 477, 682, 788, 827, 901, 978, 1073, 1248, 1286], "box": [20, 223, 313], "box_draw": 20, "branch": [53, 54, 809, 810, 819, 846, 857, 901], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 313, 316, 317, 397, 398, 431, 477, 545, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 764, 765, 788, 809, 810, 819, 833, 860, 868, 901, 973, 989, 990, 1026, 1073, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1265, 1270, 1286, 1291], "breakpoint": [398, 477, 590, 788, 990, 1073, 1163, 1286], "breezah": 143, "breviti": 168, "broadcast": [662, 907, 1228], "broader": 907, "brotli": [41, 45, 313, 901], "brussel": [430, 1025], "bst": [410, 414, 430, 1001, 1005, 1025], "bucket": [35, 133, 144, 145, 148, 313, 431, 444, 477, 788, 1026, 1039, 1073, 1286], "bud": [660, 661, 1226, 1227], "budget": 1295, "buffer": [129, 130, 131, 190, 216, 313, 1049, 1286], "buffer_s": [216, 313], "bug": [544, 545, 788, 837, 884, 901, 1142, 1286], "build": [52, 117, 907, 1316], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 400, 788, 815, 901], "busi": [405, 716, 996], "business_day_count": [405, 996], "by_alternate_row": 1, "by_dtyp": 907, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 907, "by_left": [219, 313, 832, 901], "by_nam": 907, "by_pred": [246, 313], "by_right": [219, 313, 832, 901], "bye": 1, "byi": 1308, "bys": [204, 313, 827, 901], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 184, 190, 253, 313, 400, 557, 652, 656, 657, 664, 675, 788, 815, 854, 901, 1049, 1218, 1222, 1223, 1230, 1241, 1286, 1308], "bytesio": [36, 37, 38, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 253, 313, 400, 557, 788, 815, 854, 901], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 191, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 217, 218, 221, 222, 224, 226, 228, 231, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 246, 249, 250, 251, 258, 259, 260, 261, 262, 264, 265, 268, 269, 270, 271, 272, 273, 276, 280, 281, 282, 284, 285, 287, 292, 295, 296, 297, 300, 301, 303, 306, 307, 313, 317, 322, 324, 325, 327, 345, 365, 382, 398, 462, 474, 482, 503, 515, 545, 551, 566, 567, 581, 583, 587, 590, 628, 666, 674, 697, 700, 707, 709, 710, 712, 713, 714, 717, 719, 720, 721, 722, 724, 725, 727, 737, 738, 739, 742, 743, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 767, 769, 771, 772, 773, 777, 784, 788, 804, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 826, 827, 831, 835, 844, 846, 848, 849, 851, 852, 857, 858, 859, 860, 864, 867, 868, 871, 873, 877, 880, 881, 882, 885, 886, 888, 891, 892, 901, 905, 907, 972, 990, 1077, 1101, 1163, 1232, 1240, 1254, 1273, 1286, 1296, 1298, 1299, 1301, 1302, 1303, 1304, 1308, 1313], "c00": 907, "c01": 907, "c02": 907, "c03": 907, "c05": 907, "c1": 362, "c123": 1308, "c2": 362, "c20": 907, "c25": 907, "c3": 362, "c40": 907, "c45": 1308, "c4d79b": [36, 313], "c50": 907, "c567": [36, 313], "c60": 907, "c75": 907, "c80": 907, "c8ae6d2b276": [36, 313], "c93": 907, "c95": 907, "c96": 907, "c97": 907, "c98": 907, "c99": 907, "c_btm_by_a": [382, 788], "c_btm_by_b": [382, 788], "c_by_ca": [382, 697, 788], "c_by_cb": [382, 697, 788], "c_c_c": [767, 860, 901], "c_contigu": [271, 313], "c_max": [583, 788], "c_mean_squar": [292, 877], "c_min": [583, 788], "c_top_by_a": [697, 788], "c_top_by_b": [697, 788], "c_total": 1313, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 597, 598, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 674, 676, 677, 681, 788, 799, 809, 810, 819, 846, 857, 901, 971, 1169, 1170, 1240, 1242, 1243, 1247, 1286], "cadi": [238, 313], "cafe": [679, 1245], "caf\u00e9": [656, 657, 907, 1222, 1223], "calamin": 134, "calcul": [36, 41, 45, 47, 183, 204, 261, 284, 313, 401, 452, 453, 454, 455, 494, 506, 525, 532, 538, 542, 615, 633, 638, 701, 703, 720, 722, 764, 765, 769, 777, 788, 814, 827, 861, 869, 901, 991, 992, 1050, 1051, 1052, 1053, 1092, 1104, 1123, 1181, 1200, 1204, 1276, 1286], "calendar": [61, 62, 204, 219, 245, 283, 313, 408, 418, 420, 427, 431, 444, 448, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 999, 1009, 1014, 1022, 1026, 1039, 1043, 1051, 1286], "calendar_year": [418, 448], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 175, 203, 204, 221, 223, 245, 260, 271, 276, 312, 313, 381, 382, 393, 396, 405, 544, 545, 566, 567, 569, 571, 573, 574, 597, 598, 629, 696, 697, 716, 721, 784, 788, 804, 809, 810, 819, 826, 827, 846, 850, 857, 860, 864, 898, 899, 900, 901, 905, 907, 968, 996, 1142, 1170, 1196, 1267, 1271, 1286, 1296, 1300, 1313], "callabl": [48, 49, 50, 51, 143, 197, 223, 237, 242, 299, 313, 362, 536, 544, 545, 567, 568, 587, 604, 724, 725, 738, 749, 750, 762, 788, 837, 845, 848, 884, 901, 950, 1134, 1142, 1175, 1286], "caller": [132, 230, 313, 536, 837, 842, 884, 901], "cam": [242, 313, 848, 901], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 170, 175, 177, 187, 188, 197, 199, 203, 204, 211, 213, 215, 219, 223, 234, 238, 245, 247, 248, 251, 253, 254, 259, 270, 271, 275, 276, 277, 281, 287, 290, 299, 313, 325, 362, 382, 393, 396, 397, 400, 405, 424, 425, 427, 430, 433, 436, 444, 453, 459, 462, 482, 508, 536, 544, 545, 551, 554, 557, 563, 566, 567, 569, 571, 573, 574, 583, 588, 590, 595, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 626, 628, 633, 636, 641, 649, 655, 660, 661, 662, 669, 670, 671, 674, 685, 697, 714, 716, 728, 731, 738, 740, 744, 745, 750, 767, 778, 784, 787, 788, 799, 804, 805, 809, 810, 815, 817, 819, 827, 832, 850, 852, 854, 855, 857, 859, 860, 864, 871, 874, 875, 901, 907, 909, 950, 989, 996, 1019, 1020, 1022, 1025, 1026, 1028, 1031, 1039, 1051, 1057, 1077, 1106, 1134, 1142, 1147, 1161, 1163, 1167, 1170, 1188, 1190, 1191, 1194, 1200, 1207, 1208, 1215, 1221, 1226, 1227, 1228, 1235, 1236, 1237, 1240, 1265, 1267, 1286, 1301, 1313], "cancel": [809, 901], "candid": [647, 649, 1213, 1215], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 148, 165, 223, 248, 249, 271, 290, 299, 313, 367, 456, 524, 545, 624, 643, 666, 687, 750, 788, 857, 875, 876, 884, 901, 907, 954, 1122, 1142, 1187, 1209, 1232, 1267, 1286], "capabl": [1, 36, 313], "capac": [190, 257, 313, 1049, 1195, 1286], "capit": [682, 1248, 1308], "captur": [647, 649, 660, 661, 1213, 1215, 1226, 1227], "car": [242, 266, 313, 600, 788, 848, 901], "cardin": [174, 313, 329, 710, 788, 803, 901, 917, 1286], "care": [36, 254, 313, 545, 583, 626, 788, 855, 901, 1191, 1286], "cars_revers": [600, 788], "cartesian": [218, 313, 831, 901], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 192, 204, 216, 223, 238, 245, 247, 248, 267, 270, 271, 313, 406, 453, 544, 554, 555, 567, 603, 640, 641, 648, 650, 651, 660, 661, 662, 682, 788, 810, 827, 850, 901, 905, 907, 997, 1051, 1056, 1206, 1207, 1214, 1216, 1217, 1226, 1227, 1228, 1248, 1265, 1286], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 197, 204, 237, 245, 270, 271, 275, 287, 313, 328, 395, 396, 407, 433, 436, 447, 582, 587, 588, 595, 597, 603, 654, 655, 684, 691, 695, 718, 719, 768, 788, 827, 845, 850, 871, 901, 905, 907, 973, 987, 988, 998, 1028, 1031, 1042, 1161, 1167, 1220, 1221, 1250, 1257, 1263, 1267, 1269, 1270, 1286, 1306], "cast_str_to_int": [237, 313, 845, 901], "cast_to_supertyp": [788, 905], "cat": [26, 46, 84, 85, 398, 590, 640, 642, 680, 683, 695, 719, 783, 788, 907, 990, 1073, 1163, 1206, 1208, 1246, 1249, 1282, 1286], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 218, 268, 313, 384, 398, 590, 597, 598, 695, 788, 907, 970, 971, 972, 973, 990, 1163, 1169, 1170, 1269, 1286], "categori": [36, 46, 65, 85, 268, 313, 384, 398, 477, 590, 788, 970, 990, 1073, 1163, 1262, 1286], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [265, 313], "caus": [99, 108, 117, 129, 130, 131, 143, 172, 192, 271, 313, 544, 788, 1056, 1267, 1286], "cba": 671, "cbrt": [788, 1286, 1306], "cbrt_a": 1307, "cc": [456, 736, 788, 907, 991, 1286, 1308], "ccc": [1, 36, 313, 685, 687, 688, 907, 1308], "ccy": 1316, "cd": [685, 687, 688, 907], "cdatainterfac": [171, 910], "cde": [907, 1308], "cdt": [431, 444, 1026, 1039], "ceil": [49, 788, 1286, 1306], "ceil_a": 1307, "cell": [15, 16, 36, 238, 313], "cent": 408, "center": [15, 16, 36, 313, 452, 454, 455, 604, 605, 607, 609, 611, 613, 616, 618, 620, 788, 1050, 1052, 1053, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1286], "central": [144, 145, 494, 633, 788, 1092, 1200, 1286], "centuri": 1309, "certain": [42, 43, 44, 45, 54, 133, 144, 209, 283, 313, 670, 671, 784, 809, 810, 846, 901, 1286], "certainli": [674, 676, 677, 1240, 1242, 1243], "cest": [430, 1025], "cet": [430, 1025], "cfg": [2, 4, 17, 168], "cfoo": [873, 901], "chain": [566, 567, 569, 571, 573, 574, 778], "chanc": [156, 159, 163, 1316], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 275, 281, 282, 289, 313, 316, 317, 397, 398, 401, 431, 477, 545, 583, 584, 590, 597, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 764, 765, 788, 809, 810, 819, 833, 860, 868, 874, 901, 905, 907, 972, 973, 989, 990, 1026, 1073, 1158, 1163, 1169, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1195, 1265, 1270, 1286, 1291], "changes_length": [788, 905], "char": [27, 648, 1214], "char_length": 1308, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 313, 427, 646, 648, 652, 656, 657, 658, 659, 660, 661, 664, 665, 666, 669, 670, 671, 672, 673, 675, 682, 684, 846, 901, 907, 1022, 1212, 1214, 1218, 1222, 1223, 1224, 1225, 1226, 1227, 1230, 1231, 1232, 1235, 1236, 1237, 1241, 1248, 1250, 1308], "character_length": 1308, "characterist": [159, 163], "charli": [129, 1314], "chart": [36, 313, 316, 846, 901, 1286, 1291], "cheap": [177, 178, 252, 288, 313, 807, 808, 853, 872, 901, 977, 979, 1286], "cheaper": [511, 1109], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 189, 214, 218, 313, 345, 366, 369, 371, 474, 482, 486, 504, 640, 645, 651, 668, 788, 831, 837, 901, 933, 953, 956, 958, 1048, 1069, 1070, 1079, 1082, 1089, 1091, 1102, 1206, 1211, 1217, 1234, 1286], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1048, 1286], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1048, 1286], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 204, 238, 313, 827, 901], "chrono": [33, 42, 87, 313, 433, 436, 674, 676, 677, 681, 901, 1028, 1031, 1240, 1242, 1243, 1247, 1308, 1309], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 192, 217, 233, 271, 313, 328, 594, 788, 901, 916, 976, 1056, 1067, 1148, 1166, 1261, 1267, 1286], "chunk_length": 1286, "chunkedarrai": [116, 233, 313], "citi": [660, 661], "clang": 151, "clariti": [246, 313], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 248, 313, 775, 784, 788, 794, 800, 812, 818, 851, 870, 876, 901, 906, 1266, 1286, 1290, 1298, 1313], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 184, 313, 400, 468, 788, 815, 901, 1296, 1313], "claus": [800, 1304, 1312], "clean": [674, 676, 677, 1240, 1242, 1243], "cleaner": 168, "cleanli": [10, 202, 313, 1313], "clear": [46, 84, 178, 313, 808, 901, 979, 1286], "clearer": 119, "clickhous": 132, "client": 131, "clip": [788, 1286], "clipboard": [32, 128, 313, 800], "clone": [118, 119, 120, 121, 122, 177, 271, 313, 807, 901, 977, 1286], "close": [36, 131, 204, 245, 260, 313, 398, 482, 541, 590, 603, 606, 608, 610, 612, 614, 617, 619, 621, 633, 729, 730, 732, 733, 775, 776, 788, 827, 850, 860, 901, 990, 1077, 1163, 1200, 1286], "closedinterv": [204, 245, 313, 482, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 850, 901, 1077, 1286], "closest": [116, 219, 313, 832, 901, 1307], "closur": [606, 608, 617, 619, 621, 788], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 313], "cloudi": [660, 661], "cloudpickl": 151, "cluster": 148, "cluster_with_column": [53, 54, 809, 810, 819, 846, 857, 901], "co": [648, 788, 1214, 1286, 1306], "coalesc": [218, 219, 282, 313, 480, 650, 674, 788, 831, 832, 868, 901, 1240, 1302, 1306], "code": [179, 313, 366, 367, 368, 369, 371, 400, 545, 626, 788, 815, 835, 901, 1191, 1286, 1296], "coeffici": [181, 313, 633, 788, 1200, 1286], "coerc": [55, 596, 788], "coercion": [42, 43, 44, 45, 53, 54, 596, 788, 809, 810, 819, 846, 857, 901], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 195, 203, 204, 212, 214, 218, 219, 220, 223, 234, 237, 238, 245, 246, 251, 259, 270, 275, 279, 281, 287, 292, 313, 317, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 568, 570, 572, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 714, 715, 717, 718, 719, 721, 723, 726, 728, 729, 731, 732, 734, 738, 739, 740, 741, 742, 743, 751, 753, 755, 756, 758, 761, 762, 767, 769, 771, 773, 774, 777, 778, 788, 823, 826, 827, 829, 831, 832, 833, 845, 850, 852, 859, 860, 866, 871, 873, 877, 901, 907, 1022, 1025, 1106, 1188, 1190, 1221, 1240, 1286, 1316], "col0": [159, 1316], "col1": [159, 238, 313, 901, 1316], "col2": [159, 238, 313, 901, 1316], "col3": [238, 313, 1316], "col4": 1316, "col_nam": [237, 313, 545, 778, 788, 845, 901], "cole": 126, "coli": [36, 313, 573, 574, 907, 1316], "collaps": [42, 43, 44, 45, 53, 54, 809, 810, 819, 846, 857, 901], "collapse_join": [42, 43, 44, 45, 53, 54, 809, 810, 819, 846, 857, 901], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 187, 221, 238, 260, 265, 278, 279, 313, 456, 486, 545, 718, 736, 740, 767, 770, 788, 803, 804, 806, 807, 810, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 898, 900, 901, 907, 1082, 1286, 1296, 1297, 1298, 1301, 1302, 1313, 1314, 1316], "collect_al": [50, 54, 809, 810, 901], "collect_all_async": [810, 901], "collect_async": [54, 901], "collect_schema": [50, 221, 313, 812, 818, 845, 851, 870, 901], "collis": 55, "colnam": [36, 143, 313], "color": [46, 84, 85, 299, 313, 316, 366, 367, 368, 369, 371, 643, 702, 788, 884, 953, 954, 955, 956, 958, 1209, 1275, 1286, 1308], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 173, 175, 176, 179, 181, 182, 185, 186, 187, 188, 191, 195, 196, 199, 200, 202, 203, 204, 208, 209, 214, 215, 216, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250, 251, 252, 254, 259, 261, 262, 263, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 298, 313, 316, 317, 324, 325, 327, 338, 347, 356, 358, 361, 382, 387, 391, 392, 398, 408, 409, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 432, 433, 434, 436, 445, 446, 448, 456, 458, 462, 464, 477, 481, 482, 497, 503, 509, 511, 531, 535, 536, 545, 551, 552, 554, 556, 566, 568, 569, 570, 571, 572, 573, 574, 583, 590, 594, 596, 597, 598, 599, 601, 602, 603, 606, 608, 610, 612, 614, 617, 619, 621, 628, 629, 635, 636, 639, 646, 651, 652, 653, 662, 666, 667, 674, 675, 676, 677, 678, 679, 681, 686, 689, 697, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 804, 806, 813, 816, 817, 818, 820, 823, 826, 827, 831, 832, 833, 837, 838, 839, 840, 841, 843, 844, 847, 848, 850, 851, 852, 853, 855, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 883, 884, 901, 906, 907, 914, 915, 935, 944, 946, 949, 971, 972, 978, 983, 984, 990, 999, 1002, 1003, 1004, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1027, 1028, 1029, 1031, 1040, 1041, 1043, 1055, 1073, 1076, 1101, 1107, 1109, 1129, 1133, 1163, 1170, 1171, 1174, 1194, 1205, 1212, 1217, 1219, 1232, 1233, 1240, 1242, 1243, 1244, 1245, 1247, 1253, 1256, 1262, 1263, 1275, 1286, 1302, 1304, 1305, 1307, 1308, 1310, 1311, 1314, 1315, 1316], "column_0": [1, 223, 277, 313], "column_1": [223, 277, 313, 1310], "column_2": [277, 313, 1310], "column_abc": 15, "column_format": [36, 313], "column_nam": [242, 277, 313, 848, 901], "column_tot": [36, 313], "column_width": [36, 313], "column_x": [129, 130, 134, 140, 143], "column_xyz": 15, "columnar": [120, 122, 216, 247, 313], "columnformatdict": [36, 313], "columnnameorselector": [176, 185, 187, 229, 236, 238, 248, 268, 278, 279, 280, 281, 313, 806, 816, 817, 841, 865, 866, 867, 901], "columnnotfounderror": [199, 200, 313], "columntotalsdefinit": [36, 313], "columnwidthsdefinit": [36, 313], "colx": [36, 313, 573, 574, 907, 1301, 1316], "colz": [907, 1316], "com": [36, 132, 313, 452, 454, 455, 647, 648, 649, 788, 1050, 1052, 1053, 1213, 1214, 1215, 1286], "combin": [41, 45, 53, 54, 55, 195, 204, 205, 219, 238, 245, 283, 313, 326, 339, 444, 453, 466, 582, 598, 603, 669, 670, 671, 729, 730, 732, 733, 775, 776, 778, 788, 809, 810, 819, 827, 832, 846, 850, 857, 901, 1026, 1039, 1051, 1170, 1235, 1236, 1237, 1286, 1302, 1314], "come": [111, 132, 204, 278, 280, 313, 405, 424, 425, 494, 536, 716, 788, 827, 865, 867, 901, 996, 1019, 1020, 1092, 1286], "comm_subexpr_elim": [53, 54, 809, 810, 819, 846, 857, 901], "comm_subplan_elim": [53, 54, 809, 810, 819, 846, 857, 901], "comma": [32, 33, 129, 130, 143, 313], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 282, 313, 567, 794, 809, 810, 819, 846, 857, 868, 901, 1290], "compact": 1311, "compani": 132, "compar": [148, 152, 153, 154, 155, 189, 195, 313, 450, 451, 471, 473, 482, 496, 543, 577, 578, 788, 823, 901, 972, 1047, 1048, 1154, 1286], "comparison": [149, 195, 313, 823, 901], "compat": [20, 36, 37, 38, 41, 45, 86, 265, 313, 640, 642, 647, 648, 649, 651, 660, 661, 901, 907, 1206, 1208, 1213, 1214, 1215, 1217, 1226, 1227, 1261, 1286, 1296, 1308, 1309, 1313], "compat_level": [37, 38, 265, 313, 1261, 1286], "compatibleframetyp": [1297, 1299, 1313], "compatlevel": [37, 38, 265, 313, 1261, 1286], "competit": [593, 788, 1165, 1286], "compil": [52, 343, 344, 501, 502, 931, 932, 1099, 1100], "complement": 907, "complet": [129, 131, 143, 1314], "complex": [160, 381, 382, 397, 696, 697, 788, 968, 989, 1271, 1286], "compliant": [36, 313], "compon": [409, 432, 674, 677, 734, 1000, 1027, 1240, 1243], "compos": 1314, "composit": [76, 1316], "compound": [123, 248, 313, 907], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 313, 601, 788, 901, 1173, 1286], "compression_level": [41, 45, 313, 901], "comput": [53, 55, 89, 190, 203, 219, 238, 272, 278, 292, 305, 313, 321, 330, 331, 332, 333, 334, 335, 352, 353, 354, 359, 360, 364, 385, 388, 389, 390, 393, 394, 395, 396, 402, 449, 452, 453, 454, 455, 457, 494, 518, 519, 520, 521, 525, 526, 527, 528, 532, 538, 539, 540, 541, 563, 583, 584, 589, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 630, 631, 632, 633, 637, 693, 694, 702, 707, 709, 712, 713, 714, 720, 722, 735, 754, 764, 765, 778, 788, 809, 826, 829, 831, 832, 865, 873, 877, 890, 901, 912, 918, 919, 920, 921, 922, 923, 940, 941, 942, 947, 948, 952, 974, 980, 981, 982, 985, 986, 987, 988, 993, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1092, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1126, 1130, 1136, 1137, 1138, 1139, 1147, 1158, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1197, 1198, 1199, 1200, 1203, 1259, 1260, 1268, 1275, 1286, 1307, 1310], "computeerror": [554, 679, 1245], "concat": [46, 84, 85, 92, 130, 219, 313, 832, 873, 901, 976, 1067, 1148, 1166, 1286, 1306], "concat_list": [508, 735], "concat_w": [260, 313, 767, 860, 901, 1306, 1313], "concaten": [46, 55, 84, 85, 197, 237, 313, 587, 639, 653, 718, 719, 788, 845, 901, 976, 1148, 1205, 1219, 1286, 1308], "concatmethod": 55, "conclus": [120, 122, 313, 901], "concret": [159, 163], "condit": [36, 187, 195, 220, 246, 313, 462, 482, 645, 668, 715, 738, 778, 788, 817, 823, 833, 901, 1077, 1286, 1302, 1306, 1312], "conditional_format": [36, 313], "conditionalformatdict": [36, 313], "config": [0, 47, 183, 251, 270, 287, 313, 641, 650, 662, 729, 730, 732, 733, 734, 800, 809, 814, 852, 871, 901, 1207, 1228], "configur": [5, 35, 133, 144, 145, 168, 313, 809, 876, 901], "conflat": [482, 788], "conform": 1316, "confus": [91, 325, 489, 490, 662, 788], "conjunct": [36, 84, 131, 134, 140, 157, 313, 744, 747, 901], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 313, 801], "connectionorcursor": [34, 131, 313], "connector": 132, "connectorx": [131, 132, 151], "consecut": [194, 313, 365, 461, 467, 639, 653, 788, 822, 901, 1059, 1205, 1219, 1286], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 175, 187, 189, 215, 220, 223, 229, 247, 260, 270, 275, 276, 278, 280, 281, 282, 313, 316, 317, 382, 387, 397, 398, 431, 466, 477, 544, 545, 551, 565, 566, 569, 571, 573, 574, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 697, 724, 738, 764, 765, 784, 788, 804, 809, 810, 817, 819, 833, 841, 860, 864, 865, 867, 868, 884, 901, 907, 971, 973, 978, 989, 990, 1026, 1048, 1073, 1142, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1190, 1265, 1270, 1286, 1291, 1296], "consider": 126, "consist": [203, 236, 271, 313, 674, 729, 730, 826, 901, 907, 916, 1056, 1240, 1267, 1286], "consola": [36, 313], "const": 10, "constant": [190, 245, 313, 406, 453, 459, 788, 850, 901, 997, 1049, 1051, 1057, 1286], "constrain": [47, 143, 187, 313, 817, 901, 907], "constraint": [195, 313, 462, 566, 567, 569, 571, 573, 574, 778, 788, 823, 901, 907], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 313, 468, 760, 763, 779, 784, 788, 815, 901, 971, 1286, 1301], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 141, 144, 145, 148, 158, 159, 161, 163, 175, 180, 187, 188, 204, 212, 217, 234, 270, 271, 275, 276, 282, 294, 313, 325, 327, 350, 369, 371, 400, 474, 486, 515, 545, 639, 641, 645, 647, 649, 651, 653, 655, 667, 668, 684, 706, 707, 708, 709, 719, 750, 788, 804, 812, 815, 817, 818, 827, 846, 864, 868, 879, 901, 905, 907, 914, 915, 938, 1069, 1070, 1113, 1148, 1205, 1207, 1211, 1213, 1215, 1217, 1219, 1221, 1233, 1234, 1250, 1261, 1267, 1286, 1304], "contains_with_expr": 366, "contains_with_lit": 366, "content": [13, 629, 788, 1196, 1286], "context": [46, 84, 85, 165, 234, 260, 313, 323, 462, 508, 544, 545, 554, 635, 636, 702, 721, 737, 740, 746, 747, 750, 759, 763, 766, 787, 788, 799, 800, 860, 873, 901, 1106, 1275, 1286, 1301, 1313, 1315], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 241, 271, 313], "continu": [129, 398, 590, 633, 788, 990, 1163, 1200, 1286], "contrast": 734, "control": [10, 11, 36, 54, 55, 134, 157, 159, 259, 260, 270, 313, 598, 636, 767, 788, 809, 810, 819, 859, 860, 876, 898, 901, 1170, 1265, 1286, 1298, 1301, 1313], "conveni": [192, 275, 313, 893, 916, 1056, 1286, 1296], "convers": [117, 134, 172, 216, 217, 247, 248, 267, 271, 272, 313, 410, 674, 676, 677, 681, 800, 1001, 1240, 1242, 1243, 1247, 1267, 1268, 1286, 1311, 1313], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 172, 266, 267, 268, 269, 270, 271, 272, 274, 275, 313, 361, 362, 399, 410, 433, 436, 535, 536, 544, 567, 592, 649, 674, 676, 677, 678, 679, 681, 686, 788, 901, 905, 949, 950, 972, 1001, 1028, 1031, 1133, 1134, 1215, 1240, 1242, 1243, 1244, 1245, 1247, 1253, 1256, 1264, 1265, 1266, 1267, 1268, 1270, 1286, 1308, 1310, 1311, 1313], "convert_time_zon": [430, 1025], "coo": [242, 313, 848, 901], "coord": 689, "coordin": [36, 313], "copi": [32, 116, 117, 128, 170, 172, 177, 178, 217, 265, 271, 272, 287, 313, 459, 788, 807, 808, 871, 901, 909, 977, 979, 1057, 1261, 1266, 1267, 1268, 1286, 1313], "corasick": [641, 650, 662, 1207, 1216, 1228], "core": [1, 220, 313, 833, 901, 1313, 1316], "cores_right": [220, 313, 833, 901], "corner": [20, 36, 123, 313], "corr": 313, "corrcoef": [181, 313], "correct": [134, 140, 454, 455, 494, 615, 633, 788, 837, 901, 905, 1052, 1053, 1092, 1181, 1200, 1286], "correctli": [36, 313, 544, 788], "correl": [181, 313, 720, 764], "correlationmethod": 720, "correspond": [204, 219, 245, 271, 283, 313, 382, 418, 427, 431, 444, 545, 593, 603, 606, 608, 610, 612, 614, 617, 619, 621, 697, 729, 730, 732, 733, 775, 776, 788, 809, 827, 832, 850, 901, 1009, 1022, 1026, 1039, 1165, 1286], "cosd": 1306, "cosh": [788, 1286], "cosin": [330, 331, 388, 389, 544, 788, 918, 919, 980, 981, 1286, 1310], "cost": [220, 248, 313, 833, 901], "cot": [788, 1286, 1306], "cotang": [390, 788, 982, 1286, 1310], "cotd": 1306, "could": [35, 82, 89, 176, 313, 630, 724, 734, 738, 788, 806, 814, 817, 901, 1197, 1286], "count": [36, 149, 174, 183, 204, 234, 235, 245, 277, 283, 289, 304, 313, 329, 346, 355, 392, 405, 453, 477, 497, 505, 517, 522, 545, 565, 581, 603, 606, 608, 610, 612, 614, 617, 619, 621, 642, 700, 702, 710, 716, 723, 747, 758, 788, 803, 814, 827, 844, 850, 874, 889, 901, 907, 917, 934, 943, 984, 991, 996, 1051, 1073, 1095, 1103, 1115, 1120, 1149, 1157, 1208, 1273, 1275, 1286, 1291, 1295, 1306], "count_digit": 642, "count_num": [36, 313], "counterpart": 126, "countri": [219, 313, 406, 832, 901, 997], "country_holidai": [405, 716, 996], "covari": [722, 765, 788, 905], "cover": 10, "cow": [658, 659, 1224, 1225], "cpu": [129, 130, 151, 270, 313, 809, 876, 901, 1265, 1286], "crab": [640, 651, 1206, 1217], "crate": [33, 42, 87, 313, 640, 642, 647, 648, 649, 651, 660, 661, 674, 676, 677, 681, 901, 907, 1206, 1208, 1213, 1214, 1215, 1217, 1226, 1227, 1240, 1242, 1243, 1247], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 177, 178, 204, 235, 238, 245, 270, 271, 283, 287, 290, 313, 316, 317, 409, 431, 444, 453, 536, 544, 594, 603, 606, 608, 610, 612, 614, 617, 619, 621, 718, 728, 729, 730, 731, 732, 733, 734, 774, 775, 776, 784, 788, 807, 808, 814, 819, 827, 850, 871, 875, 901, 977, 979, 990, 1000, 1026, 1039, 1051, 1155, 1163, 1166, 1265, 1267, 1286, 1291, 1312, 1313, 1316], "create_async_engin": 131, "create_engin": [34, 313], "creation": 130, "cross": [218, 313, 831, 901, 1302], "crustacean": [651, 1217], "cst": [431, 444, 1026, 1039], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 313, 800, 901], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 313, 901], "ctx": [1295, 1297, 1298, 1299, 1300, 1301, 1313], "cube": [1, 51, 385, 588, 788, 974, 1286, 1307], "cuda": 876, "cum_count": [788, 1286], "cum_count_revers": [392, 788], "cum_max": [788, 1286], "cum_max_all_fil": [393, 788], "cum_max_revers": [393, 788], "cum_min": [788, 1286], "cum_min_revers": [394, 788], "cum_prod": [322, 788, 1286], "cum_prod_revers": [395, 788], "cum_reduc": 724, "cum_sum": [479, 583, 690, 727, 788, 829, 901, 1091, 1286], "cum_sum_revers": [396, 788], "cumsum_horizont": 726, "cumul": [392, 393, 394, 395, 396, 723, 724, 725, 726, 727, 788, 984, 985, 986, 987, 988, 1286], "cumulative_ev": [788, 1286], "cumulative_sal": [583, 788], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 177, 178, 185, 218, 219, 242, 260, 270, 275, 313, 316, 317, 414, 536, 584, 788, 807, 808, 816, 831, 832, 848, 860, 876, 901, 907, 977, 979, 997, 1005, 1158, 1265, 1270, 1286, 1291, 1298, 1313], "cursor": [34, 131, 313], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 183, 223, 238, 299, 313, 362, 405, 433, 436, 536, 544, 545, 604, 702, 716, 749, 750, 788, 814, 837, 884, 901, 950, 996, 1028, 1031, 1134, 1142, 1175, 1275, 1286, 1316], "customis": [36, 313], "cut": [590, 788, 1163, 1286], "cxx": 1308, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 173, 195, 202, 204, 205, 206, 209, 218, 222, 264, 265, 275, 281, 285, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 322, 324, 392, 415, 433, 436, 482, 587, 628, 642, 648, 660, 661, 666, 674, 676, 677, 717, 734, 740, 767, 788, 823, 827, 831, 860, 880, 882, 885, 886, 887, 888, 889, 890, 891, 901, 907, 972, 984, 1006, 1028, 1031, 1077, 1101, 1208, 1214, 1226, 1227, 1232, 1240, 1242, 1243, 1254, 1286, 1302, 1304, 1305, 1308, 1309], "d1": [36, 313, 409], "d2": 409, "d3": 409, "d789": [36, 313], "d_4": [666, 1232], "dai": [61, 62, 77, 204, 217, 219, 245, 283, 313, 316, 405, 424, 425, 427, 428, 431, 433, 436, 437, 444, 446, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 716, 728, 729, 730, 731, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 907, 996, 1019, 1020, 1022, 1023, 1026, 1028, 1031, 1032, 1039, 1041, 1051, 1286, 1309], "dark": 1295, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 172, 178, 179, 188, 191, 192, 202, 203, 204, 216, 217, 218, 221, 223, 236, 237, 241, 246, 247, 248, 250, 254, 257, 265, 270, 271, 272, 275, 277, 287, 291, 311, 313, 317, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 341, 342, 343, 344, 345, 347, 350, 352, 353, 354, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 383, 384, 387, 388, 389, 390, 391, 398, 399, 400, 405, 406, 407, 408, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 458, 469, 471, 472, 473, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 496, 497, 501, 502, 504, 509, 515, 517, 524, 535, 537, 543, 545, 577, 578, 582, 583, 590, 592, 593, 596, 597, 598, 599, 601, 602, 622, 624, 626, 631, 632, 633, 639, 642, 643, 644, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 674, 675, 676, 677, 679, 681, 684, 693, 694, 695, 698, 699, 702, 705, 711, 718, 721, 728, 729, 730, 731, 732, 733, 734, 744, 745, 747, 748, 749, 750, 760, 763, 774, 775, 776, 779, 784, 788, 800, 807, 808, 809, 810, 815, 818, 820, 826, 827, 851, 855, 871, 901, 906, 909, 914, 915, 927, 929, 930, 931, 932, 933, 935, 937, 938, 949, 951, 953, 954, 955, 957, 969, 970, 977, 978, 979, 990, 991, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1051, 1055, 1056, 1073, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1097, 1098, 1099, 1100, 1102, 1107, 1113, 1115, 1122, 1133, 1135, 1142, 1156, 1163, 1165, 1169, 1170, 1171, 1173, 1174, 1185, 1187, 1195, 1200, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1223, 1230, 1231, 1232, 1233, 1240, 1241, 1242, 1243, 1245, 1247, 1250, 1261, 1266, 1267, 1268, 1269, 1272, 1285, 1286, 1295, 1302, 1308, 1313, 1315], "data_bar": [36, 313], "data_bar_2010": [36, 313], "data_label": [36, 313], "data_page_s": [41, 45, 313, 901], "databas": [34, 115, 131, 132, 313, 800], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 311, 312, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 784, 788, 800, 809, 810, 812, 814, 816, 818, 820, 824, 827, 831, 832, 833, 834, 835, 837, 841, 842, 846, 849, 851, 858, 860, 865, 866, 867, 868, 870, 873, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 901, 907, 990, 991, 1025, 1051, 1073, 1142, 1163, 1221, 1232, 1233, 1256, 1262, 1263, 1275, 1286, 1295, 1296, 1297, 1298, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1316], "dataframeplot": [313, 316], "dataload": [275, 313], "datapoint": [204, 313, 827, 901], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 218, 275, 313, 494, 788, 800, 831, 837, 901, 1092, 1286, 1314], "datat": [36, 313], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 141, 142, 147, 148, 160, 161, 163, 188, 197, 313, 383, 456, 628, 695, 736, 748, 784, 788, 800, 818, 901, 906, 907, 969, 991, 1044, 1142, 1194, 1269, 1286, 1311], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 176, 183, 202, 204, 217, 219, 245, 260, 313, 316, 345, 405, 407, 408, 409, 410, 413, 415, 417, 418, 420, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 504, 583, 603, 606, 608, 610, 612, 614, 617, 619, 621, 674, 676, 695, 716, 729, 730, 732, 733, 740, 748, 774, 788, 806, 814, 827, 832, 850, 901, 907, 933, 996, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1051, 1102, 1151, 1152, 1240, 1242, 1269, 1286, 1306, 1309, 1311], "date32": [217, 313], "date_format": [33, 42, 313, 901], "date_min": 427, "date_minus_1y_2mon": 1022, "date_part": 1306, "date_plus_1i": [427, 1022], "date_rang": [219, 283, 313, 413, 415, 428, 435, 446, 732, 733, 832, 901, 1004, 1018, 1023, 1024, 1040, 1041], "date_right": [219, 313, 832, 901], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 176, 183, 202, 204, 217, 219, 245, 260, 283, 313, 316, 345, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 504, 583, 603, 606, 608, 610, 612, 614, 617, 619, 621, 674, 677, 695, 716, 728, 729, 730, 732, 733, 734, 740, 748, 775, 776, 788, 806, 814, 827, 832, 850, 901, 906, 907, 933, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1051, 1102, 1151, 1152, 1240, 1243, 1267, 1269, 1286, 1308, 1309], "datetime_format": [33, 42, 313, 901], "datetime_rang": [204, 313, 407, 410, 424, 425, 427, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 447, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 788, 827, 901, 997, 998, 1001, 1005, 1006, 1007, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "datetime_str": [433, 436], "datetimeindex": 121, "david": 1314, "day_nam": [433, 436], "day_of_month": [413, 428, 446], "day_of_year": [413, 428, 446], "daylight": [204, 219, 245, 283, 313, 406, 414, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 1005, 1022, 1026, 1039], "dayofweek": 1309, "dayofyear": 1309, "days_diff": 437, "db": [34, 131, 132, 313], "dbapi2": 131, "dbc": [642, 1208], "dbreadengin": 132, "dbwriteengin": [34, 313], "dbwritemod": [34, 313], "dd": [36, 313, 1308], "ddd": [1, 36, 313, 685, 687, 688], "dddd": 1308, "ddof": [261, 284, 313, 359, 364, 532, 538, 616, 617, 620, 621, 638, 703, 720, 722, 764, 765, 769, 777, 788, 861, 869, 901, 947, 952, 1130, 1136, 1182, 1184, 1204, 1276, 1286], "ddww": 1308, "de": 1308, "deal": [41, 45, 216, 313, 325, 327, 430, 593, 674, 677, 706, 707, 708, 709, 731, 788, 901, 914, 915, 1025, 1165, 1240, 1243, 1286], "debug": [29, 837, 901, 1316], "decad": [1295, 1309], "decai": [452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 313, 317, 622, 678, 788, 901, 907, 1185, 1244, 1286, 1307], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 270, 275, 313, 901, 907, 1295], "decod": [129, 130, 654], "decompos": [279, 313, 866, 901], "decompress": [41, 43, 45, 313, 901], "decor": [46, 48, 49, 50, 51, 159, 163, 223, 313, 545, 788, 799, 800, 1142, 1286], "dedic": [1, 117, 216, 247, 313, 907, 1313], "deem": [183, 313, 814, 901], "deepcopi": [177, 313, 807, 901, 977, 1286], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 237, 277, 313, 322, 587, 648, 671, 705, 749, 788, 810, 845, 901, 907, 1214, 1316], "default": [4, 5, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 183, 184, 187, 190, 199, 203, 204, 205, 216, 218, 219, 227, 229, 236, 238, 245, 246, 247, 248, 249, 253, 256, 260, 261, 263, 268, 270, 271, 275, 278, 280, 281, 282, 284, 289, 298, 313, 324, 325, 327, 350, 357, 362, 398, 400, 405, 430, 449, 451, 452, 454, 455, 475, 511, 515, 524, 529, 530, 532, 536, 538, 539, 544, 551, 554, 557, 575, 576, 578, 583, 584, 590, 593, 597, 598, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 627, 629, 638, 639, 647, 653, 664, 669, 670, 671, 674, 676, 677, 679, 681, 702, 703, 706, 708, 711, 715, 716, 719, 720, 722, 729, 730, 731, 732, 733, 734, 737, 740, 744, 745, 746, 748, 760, 763, 769, 770, 775, 776, 777, 779, 788, 809, 810, 814, 815, 817, 819, 826, 827, 831, 832, 841, 850, 854, 856, 860, 861, 865, 867, 868, 869, 874, 876, 883, 901, 907, 914, 915, 938, 945, 950, 978, 990, 991, 996, 1025, 1045, 1049, 1050, 1052, 1053, 1071, 1109, 1113, 1122, 1127, 1128, 1134, 1151, 1152, 1158, 1163, 1165, 1169, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1187, 1193, 1196, 1204, 1205, 1206, 1213, 1217, 1219, 1230, 1235, 1236, 1237, 1240, 1242, 1243, 1245, 1247, 1265, 1267, 1275, 1276, 1286, 1307, 1316], "default_match": [640, 651], "defaultdict": [248, 313], "defer": [313, 316, 317, 1286, 1291], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 176, 187, 191, 204, 223, 234, 237, 245, 282, 299, 313, 482, 511, 545, 587, 590, 602, 603, 606, 608, 610, 612, 614, 617, 619, 621, 652, 657, 664, 675, 682, 729, 730, 732, 733, 750, 770, 775, 776, 788, 806, 817, 820, 827, 845, 850, 868, 884, 901, 906, 907, 1077, 1109, 1142, 1163, 1174, 1218, 1223, 1230, 1241, 1248, 1286], "definit": [36, 313, 494, 788, 906, 907, 1092, 1286], "deflat": [31, 313], "deg": 1310, "degre": [261, 284, 313, 532, 538, 592, 616, 617, 620, 621, 638, 703, 713, 720, 722, 764, 765, 769, 777, 788, 861, 869, 901, 1182, 1184, 1204, 1276, 1286, 1306], "delet": [1302, 1315], "delimit": [40, 42, 139, 147, 238, 268, 313, 639, 653, 901, 1205, 1219, 1262, 1286], "delta": [35, 133, 144, 261, 284, 313, 532, 538, 616, 617, 620, 621, 638, 703, 720, 722, 764, 765, 769, 777, 788, 800, 861, 869, 901, 1182, 1184, 1204, 1276, 1286], "delta_merge_opt": [35, 313], "delta_table_opt": [133, 144], "delta_write_opt": [35, 313], "deltalak": [35, 133, 144, 151, 313], "deltat": [35, 313], "demo": [36, 313], "demonstr": [129, 466, 788, 907], "dens": [20, 202, 313, 593, 788, 1165, 1286], "densiti": [1286, 1291], "depend": [41, 46, 52, 85, 131, 151, 173, 313, 343, 344, 501, 502, 545, 554, 590, 593, 734, 737, 740, 746, 788, 911, 931, 932, 1099, 1100, 1163, 1165, 1286, 1316], "deploi": [159, 163], "deprec": [35, 129, 130, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 412, 447, 468, 560, 597, 639, 646, 704, 713, 721, 788, 803, 819, 841, 854, 867, 873, 874, 879, 901, 1003, 1011, 1012, 1042, 1070, 1169, 1205, 1212, 1267, 1286], "depth": 126, "desc": [907, 1295, 1298, 1302, 1304], "descend": [47, 254, 259, 313, 338, 358, 531, 593, 626, 635, 636, 702, 714, 788, 855, 859, 901, 926, 946, 1089, 1129, 1165, 1191, 1202, 1275, 1286], "describ": [159, 202, 313, 901, 1286], "descript": [204, 313, 827, 901, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1311, 1314, 1315], "deseri": [126, 253, 313, 468, 557, 788, 854, 901], "deserializ": [184, 253, 313, 400, 557, 788, 815, 854, 901], "design": [270, 275, 313], "desir": [159, 362, 447, 536, 950, 1042, 1134], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 172, 204, 313, 827, 876, 901, 1316], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 175, 179, 197, 204, 216, 217, 223, 245, 276, 277, 283, 313, 382, 417, 430, 477, 536, 554, 590, 596, 598, 633, 641, 652, 674, 675, 677, 678, 697, 731, 760, 763, 779, 788, 804, 811, 812, 818, 827, 850, 864, 870, 901, 1008, 1025, 1073, 1134, 1163, 1169, 1170, 1200, 1207, 1240, 1243, 1244, 1286], "dev": [171, 910, 1182, 1286], "develop": [132, 159, 163], "deviat": [261, 313, 454, 616, 617, 638, 769, 788, 861, 901, 1052, 1204, 1286, 1303], "devic": [270, 313, 809, 876, 901, 1265, 1286], "devicememoryresourc": 876, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 609, 611, 613, 615, 616, 618, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 784, 788, 827, 850, 866, 868, 881, 884, 892, 901, 907, 1025, 1051, 1221, 1232, 1233, 1263, 1286, 1291, 1295, 1296, 1297, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1316], "df0": [230, 313, 842, 901, 1301], "df1": [47, 55, 152, 153, 189, 192, 230, 260, 285, 313, 842, 901, 1298, 1300, 1301, 1302, 1313], "df2": [47, 55, 152, 153, 189, 192, 285, 313, 1298, 1300, 1301, 1302, 1313], "df3": [47, 313], "df4": 313, "df5": 313, "df6": 313, "df_a": 1313, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [234, 313], "df_b": 1313, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [269, 313], "df_h1": 55, "df_h2": 55, "df_new_grid": [480, 788], "df_nuniqu": [234, 313], "df_original_grid": [480, 788], "df_panda": 1296, "df_pd": 117, "df_tempor": [606, 608, 610, 612, 614, 617, 619, 621, 788], "dfi": [117, 172], "diagon": [55, 277, 313], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 196, 216, 236, 242, 246, 247, 248, 266, 267, 270, 275, 277, 313, 788, 848, 901, 905, 906, 907, 1062, 1286, 1299], "dictat": [427, 788, 905, 1022], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 216, 236, 246, 247, 248, 266, 267, 270, 275, 313, 901, 906], "did": [406, 997], "diff": [287, 313, 437, 438, 439, 440, 441, 442, 443, 525, 788, 871, 901, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1123, 1286], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 192, 204, 205, 216, 238, 245, 247, 248, 267, 270, 271, 277, 313, 401, 413, 427, 428, 430, 445, 451, 466, 475, 506, 525, 527, 536, 545, 575, 576, 578, 583, 597, 598, 674, 700, 737, 740, 746, 788, 819, 827, 850, 901, 907, 972, 992, 1004, 1022, 1023, 1025, 1040, 1047, 1056, 1071, 1104, 1123, 1125, 1142, 1151, 1152, 1154, 1169, 1170, 1240, 1286, 1309, 1311, 1313], "digit": [63, 587, 622, 623, 648, 788, 907, 1185, 1186, 1208, 1214, 1286, 1316], "dimens": [116, 118, 120, 122, 138, 139, 147, 313, 599, 788, 901, 1171, 1267, 1286], "dimension": [118, 120, 122, 271, 313, 901, 1286], "direct": [36, 132, 141, 145, 148, 256, 270, 281, 313, 357, 529, 627, 788, 856, 901, 945, 1127, 1193, 1286], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 248, 270, 313, 452, 454, 455, 598, 763, 788, 810, 901, 1050, 1052, 1053, 1170, 1265, 1286, 1298, 1313, 1316], "directori": [36, 41, 141, 143, 146, 148, 313, 905], "dirpath": [31, 33, 37, 38, 41, 143, 313], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 216, 313, 809, 901], "disable_string_cach": 85, "disallow": 159, "discard": [195, 313, 462, 788, 823, 901, 1060, 1286], "disco": [650, 1216], "discont": [650, 1216], "discourag": [545, 788], "discoveri": [238, 313], "discret": [398, 401, 449, 477, 506, 525, 590, 788, 990, 992, 1045, 1073, 1104, 1123, 1163, 1286], "disk": [41, 42, 43, 44, 45, 135, 313, 857, 901], "dispatch": 907, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 183, 202, 313, 814, 819, 901], "distanc": [219, 313, 477, 788, 832, 901, 1073, 1286], "distinct": [36, 163, 236, 238, 291, 313, 363, 485, 488, 537, 593, 602, 734, 788, 951, 1081, 1084, 1135, 1165, 1174, 1286, 1303, 1312, 1314, 1316], "distinct_count": [41, 45, 313, 901], "distribut": [494, 633, 788, 1092, 1200, 1286], "div": 1306, "divid": [20, 398, 431, 444, 452, 454, 455, 466, 494, 590, 788, 990, 1026, 1039, 1050, 1052, 1053, 1092, 1163, 1286, 1307], "divis": [466, 698, 788, 1307], "divisor": [261, 284, 313, 532, 538, 616, 617, 620, 621, 638, 703, 720, 722, 764, 765, 769, 777, 788, 861, 869, 901, 1182, 1184, 1204, 1276, 1286], "dl": [275, 313], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 141, 143, 148, 152, 153, 154, 155, 173, 183, 185, 192, 215, 219, 238, 242, 265, 277, 281, 313, 316, 397, 405, 508, 544, 669, 670, 671, 760, 763, 779, 788, 805, 809, 810, 814, 816, 819, 832, 837, 846, 848, 857, 876, 901, 907, 989, 996, 1056, 1106, 1235, 1236, 1237, 1270, 1286, 1291], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 170, 171, 181, 313, 909, 910], "document": [87, 132, 170, 313, 317, 433, 436, 655, 674, 676, 677, 681, 784, 876, 909, 972, 1028, 1031, 1221, 1240, 1242, 1243, 1247], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 178, 192, 195, 199, 204, 205, 217, 218, 246, 247, 248, 278, 287, 290, 313, 316, 317, 447, 462, 466, 475, 536, 545, 641, 650, 662, 670, 671, 700, 784, 788, 808, 809, 814, 823, 827, 831, 837, 865, 871, 875, 901, 979, 1042, 1056, 1060, 1071, 1195, 1207, 1216, 1228, 1286, 1291, 1308], "doesn": [35, 129, 143, 204, 219, 313, 449, 788, 827, 832, 901, 1045, 1286], "dog": [640, 680, 683, 719, 1206, 1246, 1249], "doi": 1309, "dollar": [660, 661, 1226, 1227], "domain": [1, 648, 1214], "don": [55, 204, 219, 223, 278, 281, 313, 397, 508, 545, 583, 788, 827, 832, 865, 901, 907, 989, 1106, 1142, 1286], "done": [130, 149, 168, 174, 176, 219, 313, 328, 329, 583, 788, 803, 806, 832, 901, 917, 1286], "dot": [47, 784, 788, 857, 901, 1286], "doubl": [272, 313], "dow": 1309, "down": [143, 146, 147, 148, 149, 465, 788, 1063, 1286], "download": [139, 143, 146, 147, 857, 901], "downstream": [271, 313, 626, 788, 1191, 1286], "dr": 145, "drago": [652, 1218], "dragon": 652, "dragonfr": 1218, "dragonfruit": [652, 664, 675, 1218, 1230, 1241], "dramat": 134, "draw": [20, 25, 159, 163, 1316], "drawback": 784, "drawfn": 1316, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 313], "drop": [1, 119, 186, 187, 223, 278, 287, 313, 401, 403, 404, 506, 507, 590, 788, 817, 865, 871, 901, 992, 994, 995, 1104, 1105, 1163, 1286, 1312], "drop_dupl": [278, 313, 865, 901], "drop_empty_row": [134, 140], "drop_first": [268, 313, 1262, 1286], "drop_in_plac": 313, "drop_nan": [404, 788, 995, 1286], "drop_nul": [313, 403, 788, 901, 994, 1286], "dset": 149, "dst": [431, 444, 1026, 1039], "dst_offset": [406, 997], "dt": [1, 36, 47, 134, 140, 245, 313, 603, 734, 788, 797, 850, 901, 907, 1294, 1308, 1309], "dt1": 1308, "dt2": 1308, "dtm": [36, 313, 409, 907, 1000, 1308], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 170, 172, 176, 179, 204, 219, 245, 269, 270, 271, 272, 275, 281, 290, 313, 383, 384, 395, 396, 447, 456, 469, 503, 511, 542, 544, 545, 551, 588, 595, 596, 603, 606, 608, 610, 612, 614, 617, 619, 621, 628, 630, 654, 674, 691, 695, 701, 711, 736, 740, 744, 745, 747, 748, 749, 750, 760, 763, 770, 779, 788, 806, 811, 827, 832, 850, 875, 901, 906, 907, 909, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 969, 970, 971, 972, 977, 987, 988, 991, 992, 1042, 1049, 1079, 1097, 1098, 1101, 1109, 1133, 1140, 1142, 1161, 1172, 1194, 1197, 1220, 1240, 1257, 1264, 1265, 1267, 1268, 1269, 1270, 1274, 1286, 1313, 1316], "dtype_format": [36, 313], "dtypekind": 172, "dtypelik": [170, 909], "dtypeoper": [1, 50], "dubiou": 87, "due": [176, 204, 219, 245, 248, 283, 313, 324, 414, 427, 431, 444, 566, 567, 569, 571, 573, 574, 603, 606, 608, 610, 612, 614, 617, 619, 621, 716, 729, 730, 732, 733, 775, 776, 788, 806, 827, 832, 850, 901, 1005, 1022, 1026, 1039], "dummi": [268, 313, 1262, 1286], "duplic": [47, 92, 211, 218, 219, 220, 278, 282, 313, 324, 483, 566, 590, 788, 831, 832, 833, 865, 868, 901, 1078, 1163, 1286, 1314], "duplicateerror": [590, 788, 1163, 1286], "dur": [220, 313, 833, 901], "durat": [168, 219, 283, 313, 406, 414, 437, 438, 439, 440, 441, 442, 443, 447, 453, 695, 729, 730, 732, 733, 775, 776, 788, 832, 901, 906, 907, 997, 1005, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1051, 1267, 1269, 1286], "dure": [46, 91, 129, 130, 143, 168, 192, 313, 1056, 1286], "dutch": [405, 716, 996], "dynam": [204, 313, 362, 536, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 788, 827, 901, 905, 950, 1134], "dynamicgroupbi": [204, 313], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 148, 149, 161, 184, 195, 202, 206, 215, 222, 264, 265, 271, 281, 313, 322, 400, 449, 453, 456, 482, 539, 545, 550, 551, 552, 554, 555, 556, 558, 559, 628, 633, 651, 670, 671, 682, 736, 750, 767, 778, 788, 815, 823, 835, 848, 901, 907, 1045, 1051, 1077, 1200, 1217, 1248, 1286, 1304, 1308, 1316], "e101": [36, 313], "e_filt": [554, 556], "e_sum_ov": [554, 556], "e_sum_slic": [554, 556], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 180, 182, 188, 195, 202, 203, 204, 217, 219, 223, 236, 238, 245, 247, 249, 270, 275, 279, 282, 283, 291, 292, 294, 296, 298, 299, 307, 313, 338, 382, 398, 431, 444, 462, 485, 488, 514, 517, 524, 534, 541, 545, 590, 593, 601, 602, 609, 613, 624, 629, 636, 648, 652, 656, 657, 664, 666, 667, 675, 682, 697, 711, 714, 719, 744, 745, 770, 778, 788, 809, 812, 813, 818, 823, 827, 832, 846, 850, 866, 868, 877, 879, 881, 883, 884, 892, 901, 926, 976, 990, 1026, 1039, 1081, 1084, 1112, 1115, 1122, 1132, 1163, 1165, 1173, 1174, 1187, 1196, 1214, 1218, 1222, 1223, 1230, 1232, 1233, 1241, 1248, 1256, 1286, 1313, 1314, 1316], "eager": [204, 219, 238, 281, 313, 407, 410, 413, 415, 424, 425, 427, 428, 430, 431, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 606, 608, 610, 612, 614, 617, 619, 621, 711, 715, 729, 730, 732, 733, 740, 744, 745, 760, 763, 767, 770, 775, 776, 779, 787, 788, 827, 832, 837, 901, 997, 998, 1001, 1004, 1005, 1006, 1007, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1313], "eagerli": [536, 1295], "ear": [664, 675, 1230], "earlier": [219, 313, 832, 901], "earliest": [204, 313, 430, 674, 677, 731, 827, 893, 901, 1025, 1240, 1243], "easi": 168, "easiest": 173, "easili": [47, 251, 275, 287, 292, 313, 770, 784, 852, 871, 877, 901], "east": [148, 220, 313, 833, 901], "ebf1d": [36, 313], "eee": [1, 36, 313, 907], "effect": [36, 197, 204, 313, 414, 466, 545, 568, 570, 572, 788, 827, 874, 875, 901, 997, 1005], "effici": [117, 131, 215, 217, 313, 544, 788], "efgh": 1308, "eg": [17, 25, 36, 55, 132, 168, 270, 313, 431, 674, 677, 698, 788, 907, 1240, 1243], "egnaro": 1308, "either": [76, 159, 214, 218, 219, 220, 236, 245, 246, 270, 271, 313, 453, 544, 588, 590, 603, 674, 706, 714, 770, 788, 809, 831, 832, 833, 835, 850, 901, 905, 907, 1051, 1161, 1163, 1240, 1286, 1299, 1316], "element": [13, 14, 25, 154, 155, 158, 161, 173, 175, 182, 214, 238, 246, 259, 261, 276, 284, 313, 330, 331, 332, 333, 334, 335, 346, 347, 381, 382, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 403, 404, 457, 458, 462, 475, 486, 497, 505, 507, 508, 509, 512, 517, 525, 526, 527, 528, 532, 538, 540, 541, 544, 545, 583, 584, 593, 596, 604, 605, 607, 609, 611, 613, 615, 616, 618, 620, 625, 630, 631, 632, 636, 637, 638, 666, 667, 678, 693, 694, 696, 697, 703, 714, 720, 722, 764, 765, 769, 777, 788, 804, 813, 859, 861, 864, 869, 901, 918, 919, 920, 921, 922, 923, 934, 935, 968, 974, 977, 980, 981, 982, 983, 985, 986, 987, 988, 989, 994, 995, 1054, 1055, 1060, 1061, 1072, 1082, 1091, 1093, 1095, 1096, 1103, 1105, 1106, 1107, 1110, 1115, 1123, 1124, 1125, 1126, 1138, 1139, 1142, 1158, 1165, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1189, 1197, 1198, 1199, 1203, 1204, 1232, 1233, 1244, 1258, 1259, 1260, 1264, 1271, 1272, 1276, 1286, 1303, 1304], "elementwis": [544, 583, 604, 605, 607, 609, 611, 613, 616, 618, 620, 788, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1286], "elif": 778, "elig": [837, 901], "elimin": [494, 788, 1092, 1286], "elis": [230, 313, 842, 901], "ellipsi": [202, 313], "elppa": 1308, "els": [130, 778], "email": [648, 1214], "email_part": [648, 1214], "emphas": [313, 317], "emploi": 907, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 177, 178, 204, 229, 280, 313, 639, 646, 748, 766, 807, 808, 827, 841, 867, 901, 907, 977, 979, 1061, 1079, 1093, 1205, 1212, 1286], "en": [20, 36, 313], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 148, 152, 153, 154, 155, 167, 170, 251, 272, 287, 313, 325, 327, 597, 598, 626, 641, 650, 662, 702, 784, 788, 809, 852, 871, 901, 909, 914, 915, 1169, 1170, 1191, 1207, 1216, 1228, 1268, 1275, 1286], "enable_string_cach": 84, "enclos": [468, 788], "encod": [59, 65, 75, 126, 129, 130, 143, 268, 313, 316, 367, 468, 601, 643, 686, 788, 954, 1173, 1209, 1262, 1286, 1291], "encount": [107, 129, 130, 143, 204, 313, 575, 576, 654, 655, 720, 724, 738, 788, 827, 901, 1151, 1152, 1220, 1221, 1286], "end": [33, 36, 42, 129, 130, 143, 204, 238, 313, 366, 369, 371, 406, 431, 456, 530, 640, 645, 648, 652, 658, 664, 668, 669, 670, 673, 711, 716, 728, 729, 730, 731, 732, 733, 736, 744, 745, 775, 776, 778, 784, 788, 827, 846, 901, 907, 956, 997, 1026, 1089, 1128, 1211, 1214, 1218, 1224, 1230, 1234, 1235, 1236, 1241, 1286, 1308], "endpoint": [398, 590, 788, 990, 1163, 1286], "ends_a": 1308, "ends_in_digit": 1308, "ends_with": [366, 371, 640, 668, 907, 1234, 1306], "ends_with_expr": 369, "ends_with_lit": 369, "engin": [14, 34, 131, 132, 134, 165, 203, 218, 223, 271, 278, 299, 313, 544, 767, 788, 809, 826, 831, 837, 841, 865, 876, 884, 898, 901, 1142, 1267, 1286, 1298, 1313], "engine_opt": [34, 134, 313], "enginetyp": [809, 901], "enough": [508, 633, 788, 1106, 1200, 1286], "ensur": [10, 36, 132, 158, 161, 170, 195, 203, 236, 246, 271, 313, 482, 544, 788, 823, 826, 837, 876, 901, 905, 907, 909, 1267, 1286], "enter": 168, "entir": [36, 53, 54, 134, 140, 313, 809, 810, 901], "entri": [313, 901, 1313], "entropi": [788, 1286], "enumer": [121, 129, 130, 134, 140, 143, 217, 313], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 270, 313], "eol_char": [129, 130, 143], "eparg": 1308, "epoch": [61, 62, 740, 1309], "epoch_": [415, 1006], "epoch_n": [415, 1006], "epochtimeunit": [415, 740, 1006], "eq": [195, 313, 451, 462, 788, 823, 901, 1047, 1286], "eq_miss": [788, 1154, 1286], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 204, 219, 220, 230, 259, 313, 398, 444, 450, 451, 471, 496, 536, 578, 590, 596, 604, 605, 607, 609, 611, 613, 616, 618, 620, 636, 658, 659, 662, 684, 714, 764, 765, 778, 784, 788, 827, 832, 833, 842, 859, 901, 990, 1026, 1047, 1134, 1154, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1224, 1225, 1228, 1250, 1286, 1305, 1316], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 204, 214, 234, 313, 322, 326, 450, 451, 453, 466, 471, 473, 496, 543, 562, 564, 577, 578, 579, 582, 588, 657, 680, 682, 683, 690, 698, 705, 788, 827, 901, 1046, 1047, 1051, 1066, 1068, 1091, 1094, 1141, 1153, 1154, 1223, 1246, 1248, 1249, 1286, 1296, 1304], "err": 649, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 141, 143, 148, 176, 238, 246, 271, 313, 324, 349, 350, 367, 405, 511, 513, 515, 566, 598, 640, 643, 647, 649, 651, 654, 655, 674, 676, 677, 681, 788, 806, 810, 876, 884, 901, 937, 938, 954, 996, 1109, 1111, 1113, 1170, 1206, 1209, 1213, 1215, 1217, 1220, 1221, 1240, 1242, 1243, 1247, 1267, 1286, 1311], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 602, 788, 901, 1174, 1286], "espresso": 907, "est": 732, "establish": 131, "estim": [129, 130, 174, 190, 313, 329, 454, 455, 494, 710, 788, 803, 901, 917, 1049, 1052, 1053, 1092, 1286], "estimated_s": [313, 1286], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 313, 545, 788, 905, 907, 1188, 1190, 1286, 1309], "eu": [144, 145], "eur": [202, 313, 1316], "europ": [410, 414, 430, 1001, 1005, 1025], "eval": [269, 313, 544, 545, 735, 788, 1142, 1264, 1286], "evalu": [42, 43, 44, 45, 148, 193, 195, 219, 313, 326, 339, 341, 342, 373, 374, 375, 376, 378, 379, 397, 462, 479, 499, 500, 536, 582, 583, 706, 708, 711, 715, 729, 730, 732, 733, 735, 744, 745, 760, 763, 770, 775, 776, 778, 779, 788, 809, 823, 829, 831, 832, 901, 927, 929, 930, 960, 961, 962, 963, 965, 966, 989, 1060, 1097, 1098, 1277, 1286, 1305], "even": [33, 42, 129, 313, 453, 587, 590, 788, 901, 907, 1051, 1163, 1286], "evenli": [204, 313, 827, 901], "event": [54, 810, 901], "eventu": [34, 313], "ever": [583, 788], "everi": [14, 33, 42, 129, 130, 134, 140, 143, 198, 204, 267, 283, 313, 341, 342, 343, 344, 347, 349, 355, 393, 394, 395, 396, 397, 431, 444, 458, 470, 501, 502, 506, 509, 512, 513, 514, 522, 525, 530, 534, 602, 646, 724, 725, 788, 825, 827, 901, 929, 930, 931, 932, 935, 937, 943, 985, 986, 987, 988, 989, 1026, 1039, 1055, 1065, 1099, 1100, 1104, 1107, 1110, 1111, 1112, 1120, 1123, 1128, 1132, 1174, 1212, 1286], "everybodi": [641, 662, 1207, 1228], "everyth": 907, "ew": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "ewm_mean": [788, 1286], "ewm_mean_bi": [788, 1286], "ewm_std": [788, 1286], "ewm_var": [788, 1286], "ewma": [453, 788, 1051, 1286], "exact": [154, 157, 159, 163, 219, 257, 313, 329, 466, 646, 672, 673, 674, 676, 677, 698, 788, 832, 901, 1212, 1240, 1242, 1243], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 313, 666, 667, 672, 673, 734, 901, 1195, 1232, 1233, 1238, 1239, 1286], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 800, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 905, 906, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1315], "exc_tb": 1313, "exc_typ": 1313, "exc_val": 1313, "exce": [202, 313], "excel": [32, 36, 128, 134, 313, 800], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 185, 199, 206, 219, 222, 242, 264, 313, 383, 598, 652, 675, 736, 788, 800, 816, 832, 848, 901, 907, 969, 1072, 1096, 1170, 1218, 1241, 1258, 1267, 1286, 1312], "exclud": [159, 163, 204, 313, 382, 393, 396, 405, 482, 551, 697, 716, 784, 788, 827, 901, 907, 996, 1077, 1286], "excluded_dtyp": [159, 160, 163], "exclus": [246, 313, 705, 711, 744, 745, 788], "execut": [35, 46, 55, 131, 132, 221, 260, 313, 400, 508, 702, 767, 788, 805, 809, 815, 837, 846, 860, 876, 901, 905, 1106, 1275, 1286, 1296, 1297, 1298, 1300, 1313, 1315], "execute_glob": 1313, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 141, 144, 148, 159, 185, 199, 238, 242, 277, 282, 287, 288, 313, 324, 366, 369, 371, 409, 430, 718, 788, 812, 816, 818, 848, 851, 868, 870, 871, 872, 901, 907, 1000, 1025, 1315], "existing_t": 1315, "existing_table_path": [35, 313], "exit": [46, 84, 168, 1301, 1313], "exp": [452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286, 1306], "exp_a": 1307, "expand": [129, 141, 143, 148, 458, 550, 552, 596, 688, 788, 905, 907, 1055, 1286], "expand_selector": 907, "expans": 685, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 153, 155, 536, 545, 748, 788, 835, 837, 901], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 216, 223, 246, 247, 248, 277, 278, 313, 545, 788, 812, 814, 818, 851, 865, 870, 901, 1056, 1142, 1286, 1316], "experiment": [220, 275, 313, 833, 871, 901], "explain": [53, 54, 173, 221, 313, 809, 810, 901, 1312], "explainformat": [819, 901], "explicit": [36, 91, 131, 143, 157, 260, 282, 313, 762, 860, 868, 901], "explicitli": [91, 132, 157, 159, 168, 199, 313, 597, 770, 788, 799, 1313], "explod": [313, 382, 464, 583, 599, 697, 788, 901, 905, 1171, 1286, 1304], "explor": [183, 313, 814, 901], "expon": [588, 788, 1161, 1286, 1307], "exponenti": [452, 453, 454, 455, 457, 588, 788, 1050, 1051, 1052, 1053, 1054, 1286, 1307], "export": [36, 37, 38, 171, 216, 217, 247, 248, 265, 267, 270, 313, 784, 907, 910, 1261, 1286], "expos": 800, "expr": [1, 47, 48, 49, 50, 51, 191, 193, 194, 218, 219, 220, 234, 238, 246, 251, 252, 270, 275, 287, 288, 313, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 788, 789, 790, 793, 794, 795, 796, 797, 820, 821, 822, 831, 832, 833, 847, 852, 853, 871, 872, 901, 905, 907, 989, 996, 999, 1000, 1014, 1022, 1046, 1047, 1051, 1058, 1059, 1064, 1066, 1068, 1094, 1106, 1112, 1128, 1132, 1141, 1153, 1154, 1206, 1211, 1217, 1234, 1286, 1311], "expr1": [1305, 1313], "expr2": [1305, 1313], "expr_unique_subset": [234, 313], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 175, 191, 193, 195, 203, 209, 218, 219, 223, 234, 238, 246, 251, 252, 256, 259, 270, 275, 276, 287, 288, 290, 292, 299, 313, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 350, 361, 366, 367, 368, 369, 370, 371, 382, 387, 388, 389, 390, 391, 397, 398, 399, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 456, 458, 459, 461, 462, 466, 468, 469, 471, 472, 473, 474, 479, 482, 483, 484, 485, 486, 487, 488, 496, 497, 501, 502, 504, 505, 508, 509, 515, 517, 535, 536, 542, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 558, 560, 562, 564, 566, 567, 569, 571, 573, 574, 577, 578, 580, 582, 583, 587, 588, 589, 590, 592, 596, 597, 598, 599, 601, 602, 624, 625, 626, 629, 631, 632, 634, 636, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 667, 675, 679, 689, 690, 693, 694, 697, 698, 699, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 752, 754, 757, 760, 762, 763, 764, 765, 766, 768, 770, 772, 774, 775, 776, 778, 779, 784, 787, 800, 804, 809, 810, 819, 820, 823, 826, 831, 832, 846, 852, 853, 856, 857, 859, 864, 871, 872, 873, 875, 877, 884, 901, 905, 907, 934, 978, 989, 996, 999, 1000, 1014, 1046, 1047, 1051, 1057, 1066, 1068, 1077, 1094, 1103, 1106, 1141, 1142, 1153, 1154, 1169, 1170, 1189, 1193, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1226, 1227, 1228, 1241, 1245, 1286, 1304, 1305, 1307, 1308, 1312], "exprmetanamespac": [549, 553], "ext": 131, "extend": [0, 119, 285, 313, 459, 788, 800, 905, 916, 1057, 1286], "extend_const": [788, 1286], "extens": [272, 313, 1268, 1286], "extern": [873, 901], "extra": [35, 129, 130, 133, 135, 137, 141, 143, 144, 145, 148, 192, 204, 313, 788, 827, 901, 905, 1056, 1286], "extract": [123, 173, 260, 313, 408, 411, 413, 416, 418, 419, 420, 421, 422, 423, 426, 428, 429, 432, 434, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 587, 648, 649, 650, 654, 655, 664, 666, 788, 999, 1002, 1003, 1004, 1007, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1214, 1215, 1216, 1220, 1221, 1230, 1306], "extract_numb": [587, 788], "extracted_nr": 648, "extrem": [459, 604, 788, 1057, 1175, 1286], "extrema": [628, 788, 1194, 1286], "f": [48, 130, 131, 195, 202, 217, 265, 271, 277, 281, 313, 322, 362, 370, 536, 628, 646, 674, 677, 718, 788, 823, 901, 907, 950, 1134, 1212, 1240, 1243, 1286, 1291, 1304], "f32": [1, 50, 176, 260, 269, 275, 313, 628, 767, 788, 806, 860, 901, 907, 1140, 1286, 1311], "f4": [271, 313], "f5ed2452": [36, 313], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 176, 177, 178, 181, 183, 184, 185, 188, 193, 194, 197, 201, 202, 203, 204, 209, 210, 218, 219, 225, 226, 227, 228, 232, 238, 239, 240, 258, 259, 261, 263, 275, 284, 287, 292, 295, 297, 300, 301, 302, 303, 305, 306, 313, 321, 324, 330, 331, 332, 333, 334, 335, 353, 359, 364, 370, 383, 385, 386, 388, 389, 390, 398, 399, 403, 404, 432, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 465, 466, 471, 473, 480, 481, 489, 490, 491, 492, 494, 496, 508, 519, 520, 532, 538, 539, 540, 541, 543, 546, 547, 548, 561, 564, 566, 575, 576, 577, 578, 584, 588, 590, 591, 592, 593, 597, 598, 604, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 630, 631, 632, 633, 637, 638, 689, 693, 694, 698, 703, 712, 713, 717, 718, 720, 722, 735, 736, 750, 753, 754, 755, 767, 769, 777, 784, 788, 806, 807, 814, 816, 821, 822, 826, 827, 830, 831, 832, 839, 840, 847, 859, 861, 869, 871, 873, 877, 880, 882, 885, 886, 887, 888, 890, 891, 901, 907, 918, 919, 920, 921, 922, 923, 941, 947, 952, 957, 974, 975, 980, 981, 982, 990, 991, 994, 995, 1027, 1050, 1051, 1052, 1053, 1054, 1058, 1063, 1073, 1075, 1076, 1106, 1117, 1118, 1130, 1136, 1137, 1138, 1139, 1158, 1161, 1163, 1165, 1170, 1175, 1177, 1178, 1180, 1181, 1182, 1184, 1185, 1186, 1197, 1198, 1199, 1203, 1259, 1260, 1274, 1286, 1295, 1303, 1304, 1307, 1310, 1313, 1316], "f_string": 739, "fa1e": [679, 1245], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [179, 313], "factor": [452, 454, 455, 695, 788, 1050, 1052, 1053, 1269, 1286], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 172, 271, 278, 313, 339, 434, 536, 674, 676, 677, 681, 788, 865, 901, 1142, 1240, 1242, 1243, 1247, 1267, 1286, 1311], "fall": [148, 398, 590, 788, 809, 876, 901, 990, 1163, 1286], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 175, 176, 177, 178, 183, 189, 197, 201, 202, 203, 204, 208, 209, 211, 212, 213, 216, 218, 219, 221, 226, 227, 233, 234, 236, 238, 239, 246, 247, 248, 249, 251, 254, 257, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 282, 283, 285, 287, 295, 297, 300, 301, 303, 306, 313, 325, 326, 327, 338, 341, 342, 345, 349, 350, 358, 363, 366, 369, 371, 382, 383, 392, 393, 394, 395, 396, 397, 398, 405, 417, 432, 449, 450, 451, 452, 454, 455, 473, 474, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 504, 508, 511, 513, 515, 524, 531, 537, 543, 544, 545, 549, 551, 553, 555, 558, 577, 578, 580, 582, 585, 586, 590, 593, 604, 605, 607, 609, 611, 613, 615, 616, 618, 620, 624, 626, 628, 633, 635, 636, 639, 640, 641, 642, 645, 650, 651, 653, 654, 660, 661, 662, 665, 666, 668, 674, 676, 677, 679, 697, 699, 702, 705, 706, 707, 708, 709, 711, 714, 715, 716, 719, 720, 723, 724, 729, 730, 732, 733, 744, 745, 748, 760, 763, 767, 770, 775, 776, 778, 779, 788, 804, 806, 807, 808, 809, 810, 814, 819, 826, 827, 831, 832, 835, 837, 846, 852, 855, 857, 859, 860, 864, 865, 868, 871, 876, 880, 882, 885, 886, 888, 891, 901, 905, 907, 914, 915, 926, 929, 930, 933, 937, 938, 946, 951, 953, 954, 956, 958, 969, 971, 973, 976, 977, 984, 985, 986, 987, 988, 989, 990, 996, 1008, 1027, 1047, 1048, 1050, 1052, 1053, 1060, 1062, 1067, 1069, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1097, 1098, 1102, 1106, 1109, 1111, 1113, 1122, 1129, 1135, 1148, 1154, 1156, 1159, 1160, 1163, 1165, 1166, 1167, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1191, 1195, 1200, 1202, 1205, 1206, 1207, 1208, 1211, 1216, 1217, 1219, 1220, 1226, 1227, 1228, 1231, 1232, 1234, 1240, 1242, 1243, 1245, 1262, 1267, 1268, 1272, 1275, 1277, 1286, 1296, 1298, 1304, 1308, 1313], "far": [36, 313], "fashion": [218, 313, 819, 846, 857, 901], "fast": [41, 43, 45, 162, 164, 313, 459, 626, 788, 901, 905, 1057, 1191, 1286, 1316], "fast_executemani": [34, 313], "faster": [42, 43, 44, 45, 53, 54, 131, 134, 192, 271, 281, 313, 545, 700, 788, 809, 810, 819, 846, 857, 901, 1056, 1142, 1286], "fastexcel": [134, 151], "favor": [34, 313], "fay": 126, "feat1": [270, 275, 313], "feat2": [270, 275, 313], "feather": [37, 135, 146, 313, 800], "featur": [1, 41, 52, 63, 65, 270, 275, 313], "feature_0": [873, 901], "feature_0_train": [873, 901], "feature_1": [873, 901], "feature_nam": [275, 313], "feb": [151, 1308], "februari": 1308, "fed": 670, "feel": [641, 662, 1207, 1228], "fetch": [125, 809, 901], "fetch_california_h": [275, 313], "few": [202, 313], "fewer": [652, 675, 901, 1218, 1241], "ff": 1303, "ff00": [679, 1245], "fff": 1, "ffff00": [367, 368, 643, 954, 955, 1209], "ffffff": [36, 313], "ffi": [190, 313, 1049, 1286], "fgg": 907, "fghi": 1308, "fh": 130, "fiction": 1295, "field": [32, 33, 35, 42, 76, 109, 112, 119, 279, 313, 362, 536, 544, 545, 568, 570, 572, 601, 648, 649, 654, 666, 667, 687, 688, 689, 702, 724, 725, 749, 770, 788, 866, 901, 950, 1134, 1142, 1173, 1215, 1232, 1233, 1254, 1256, 1286, 1309], "field_0": [362, 536, 950, 1134], "field_1": [362, 536, 950, 1134], "field_2": [950, 1134], "field_n": [362, 536, 950, 1134], "field_nam": [545, 788, 1142, 1286], "figsiz": [846, 857, 901], "figur": [623, 788, 857, 901, 1186, 1286], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 253, 313, 400, 468, 557, 560, 788, 815, 854, 901, 905, 1056, 1286], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 313], "fill": [47, 55, 177, 193, 194, 256, 281, 313, 317, 365, 393, 396, 460, 461, 467, 480, 481, 605, 607, 609, 611, 613, 616, 618, 620, 627, 739, 760, 763, 779, 788, 821, 822, 856, 873, 901, 1058, 1059, 1075, 1076, 1155, 1176, 1177, 1179, 1182, 1183, 1184, 1193, 1286], "fill_char": [658, 659, 1224, 1225], "fill_nan": [194, 313, 461, 788, 822, 901, 1059, 1286], "fill_nul": [47, 193, 313, 460, 788, 821, 873, 901, 1058, 1286], "fill_valu": [256, 281, 313, 627, 788, 856, 901, 1193, 1286], "fillnullstrategi": [194, 313, 461, 788, 822, 901, 1059, 1286], "film": 1295, "filter": [1, 42, 43, 44, 45, 48, 53, 54, 133, 143, 144, 148, 149, 187, 211, 212, 213, 238, 299, 313, 554, 556, 645, 668, 704, 728, 731, 738, 767, 778, 788, 809, 810, 817, 819, 829, 846, 857, 860, 884, 901, 907, 1190, 1286, 1302], "final": [13, 36, 47, 148, 219, 221, 313, 452, 454, 455, 788, 814, 832, 901, 905, 1050, 1052, 1053, 1286, 1314], "find": [55, 200, 313, 625, 640, 641, 788, 1189, 1207, 1286], "find_pat": 651, "fine": [809, 898, 901], "finish": [192, 313, 1056, 1286], "finit": [484, 698, 720, 788, 1080, 1286], "first": [41, 47, 129, 130, 134, 135, 137, 140, 141, 143, 148, 152, 153, 154, 155, 173, 202, 204, 206, 219, 222, 223, 233, 237, 238, 245, 264, 268, 269, 277, 278, 283, 290, 296, 313, 338, 340, 349, 397, 401, 425, 427, 431, 447, 466, 476, 485, 498, 506, 508, 513, 514, 536, 544, 545, 555, 563, 587, 588, 603, 625, 636, 640, 646, 647, 651, 652, 654, 655, 660, 661, 675, 682, 717, 724, 738, 742, 778, 784, 788, 827, 828, 832, 836, 845, 850, 865, 873, 875, 881, 901, 907, 926, 937, 989, 991, 992, 1020, 1022, 1026, 1042, 1072, 1081, 1096, 1104, 1106, 1111, 1112, 1134, 1142, 1189, 1202, 1212, 1213, 1215, 1217, 1218, 1220, 1221, 1226, 1227, 1241, 1248, 1258, 1262, 1264, 1267, 1286, 1305, 1306, 1308, 1314, 1316], "first_column": [36, 313], "first_non_nul": [536, 1134], "first_part": [666, 667, 1232, 1233], "fisher": [494, 633, 788, 1092, 1200, 1286], "fit": [126, 216, 257, 281, 313, 628, 763, 788, 1194, 1195, 1286], "five": [274, 313, 1316], "fix": [10, 56, 65, 157, 447, 734, 1042], "flag": [52, 156, 271, 313, 626, 640, 647, 648, 651, 660, 661, 788, 819, 837, 901, 907, 1191, 1206, 1213, 1214, 1217, 1226, 1227, 1267, 1286, 1308], "flat": [126, 248, 313, 509, 599, 788, 1107, 1171, 1286], "flatten": 788, "flavour": [36, 131, 313], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 172, 183, 190, 193, 219, 240, 249, 270, 271, 305, 313, 345, 386, 398, 403, 404, 432, 449, 450, 451, 452, 454, 455, 460, 465, 466, 471, 473, 480, 484, 487, 489, 490, 491, 492, 496, 504, 524, 539, 543, 546, 561, 575, 576, 577, 578, 588, 590, 591, 604, 605, 607, 609, 611, 613, 614, 616, 618, 620, 622, 624, 630, 698, 761, 763, 788, 814, 821, 832, 847, 857, 890, 901, 907, 933, 969, 975, 990, 991, 993, 994, 995, 1027, 1045, 1049, 1050, 1052, 1053, 1058, 1063, 1073, 1092, 1102, 1122, 1137, 1151, 1152, 1161, 1162, 1163, 1164, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1187, 1190, 1197, 1200, 1204, 1257, 1267, 1276, 1286, 1313, 1316], "float16": [275, 313], "float32": [1, 10, 33, 42, 50, 176, 197, 269, 270, 271, 275, 313, 453, 788, 806, 901, 907, 1051, 1079, 1140, 1265, 1267, 1270, 1286], "float4": [260, 313, 767, 860, 901, 1311], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 179, 188, 190, 197, 250, 275, 287, 313, 330, 331, 332, 333, 334, 335, 370, 383, 388, 389, 390, 399, 432, 453, 456, 489, 490, 592, 631, 632, 693, 694, 736, 750, 760, 763, 779, 784, 788, 811, 818, 851, 871, 901, 907, 1027, 1051, 1268, 1274, 1286], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 313, 901], "float_scientif": [33, 42, 313, 901], "floatfmt": 11, "floor": [49, 466, 788, 1286, 1306], "floor_a": 1307, "floordiv": [698, 788], "fmt": [11, 219, 313, 479, 739, 788, 829, 832, 901], "fmt_number": [313, 317], "fmt_str_length": [12, 729, 730, 732, 733], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 313], "fn": [724, 725, 738, 762], "foggi": [660, 661, 1226, 1227], "fold": [313, 555, 717, 724, 725, 762], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 134, 140, 143, 144, 145, 204, 219, 223, 237, 245, 271, 283, 313, 427, 431, 444, 453, 544, 587, 588, 593, 603, 606, 608, 610, 612, 614, 615, 617, 619, 621, 630, 687, 698, 713, 729, 730, 732, 733, 750, 775, 776, 778, 780, 781, 783, 788, 789, 790, 793, 795, 796, 797, 827, 832, 845, 850, 901, 907, 1022, 1026, 1039, 1051, 1161, 1165, 1188, 1190, 1197, 1267, 1278, 1280, 1282, 1286, 1287, 1292, 1293, 1294, 1311, 1316], "font": [36, 313], "font_color": [36, 313], "font_siz": [36, 313], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 176, 179, 180, 181, 185, 186, 187, 188, 189, 192, 195, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 212, 218, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 238, 240, 242, 243, 246, 249, 250, 251, 253, 255, 258, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 277, 278, 279, 284, 285, 286, 291, 313, 384, 398, 400, 427, 470, 476, 479, 498, 549, 551, 553, 554, 555, 556, 557, 558, 559, 590, 599, 639, 642, 644, 646, 648, 649, 653, 663, 665, 667, 669, 670, 671, 672, 673, 680, 683, 692, 710, 720, 721, 722, 737, 741, 742, 743, 746, 747, 751, 753, 755, 756, 758, 759, 761, 766, 769, 773, 777, 778, 784, 788, 806, 811, 812, 816, 817, 818, 823, 829, 830, 831, 844, 848, 851, 852, 865, 866, 870, 873, 901, 906, 907, 970, 990, 1022, 1113, 1161, 1163, 1171, 1208, 1210, 1212, 1214, 1215, 1229, 1233, 1238, 1239, 1246, 1249, 1286, 1300, 1302, 1303, 1304, 1305, 1308, 1311], "foo1": 1308, "foo11": [197, 313], "foo_": [552, 665, 739], "foo_1": [268, 313], "foo_2": [268, 313], "foo_3_4": 1308, "foo_a": [238, 313], "foo_a_bar_1": 739, "foo_at_1": 1304, "foo_b": [238, 313], "foo_b_bar_2": 739, "foo_bar": [549, 553, 665, 748, 1300], "foo_bar2": [549, 553], "foo_bar_baz": 665, "foo_c_bar_3": 739, "foo_low": [680, 1308], "foo_mean": 1304, "foo_std": 1303, "foo_strip": 669, "foo_strip_end": 670, "foo_strip_start": 671, "foo_sum": [1303, 1304], "foo_uniqu": 1304, "foo_upp": [683, 1308], "foo_var": 1303, "foobar": [672, 673, 1238, 1239, 1308], "foobarbar": [673, 1239], "foofoobar": [672, 1238], "foral": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "forc": [219, 223, 271, 299, 313, 536, 831, 832, 884, 901, 1142, 1267, 1286], "force_parallel": [219, 313, 831, 832, 901], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 216, 247, 281, 313, 584, 682, 788, 901, 1158, 1248, 1286, 1308], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 134, 135, 137, 140, 143, 149, 171, 184, 191, 202, 216, 229, 238, 247, 248, 253, 267, 280, 311, 313, 317, 400, 431, 433, 436, 557, 558, 674, 676, 677, 681, 734, 788, 815, 819, 820, 841, 854, 867, 901, 910, 1028, 1031, 1240, 1242, 1243, 1247, 1285, 1308, 1309], "formula": [36, 313, 449, 788, 1045, 1286], "fortran": [270, 271, 313], "forward": [194, 219, 256, 313, 357, 405, 424, 461, 467, 529, 627, 788, 822, 832, 856, 901, 945, 996, 1019, 1059, 1127, 1193, 1286], "forward_fil": [283, 313, 365, 393, 396, 627, 788], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 141, 148, 188, 260, 313, 625, 651, 655, 672, 673, 674, 677, 788, 860, 901, 1189, 1217, 1221, 1238, 1239, 1240, 1243, 1286, 1298, 1313], "four": [274, 313, 1313], "fourth": [494, 788, 1092, 1286], "frac": [452, 453, 454, 455, 633, 788, 1050, 1051, 1052, 1053, 1200, 1286], "fraction": [33, 42, 152, 153, 154, 155, 249, 313, 432, 524, 584, 624, 674, 677, 788, 901, 1027, 1122, 1158, 1187, 1240, 1243, 1286], "fragment": 1313, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 176, 177, 183, 216, 217, 221, 223, 230, 234, 237, 246, 247, 248, 260, 275, 281, 282, 313, 767, 806, 807, 814, 842, 845, 860, 868, 901, 907, 977, 1286, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1312, 1316], "frame_data": [1297, 1300], "frameinittyp": [313, 901], "frametyp": [47, 1313], "framework": [238, 280, 313, 867, 901], "freedom": [261, 284, 313, 532, 538, 616, 617, 620, 621, 638, 703, 720, 722, 764, 765, 769, 777, 788, 861, 869, 901, 1182, 1184, 1204, 1276, 1286], "freeli": [767, 860, 901, 907], "freez": [36, 313], "freeze_pan": [36, 313], "frequenc": [283, 313, 702, 788, 1275, 1286], "frequent": [1188, 1190, 1286], "fri": [313, 316], "fridai": [204, 313, 405, 433, 436, 716, 827, 901, 996, 1028, 1031], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 176, 183, 184, 185, 190, 192, 195, 196, 202, 204, 216, 217, 218, 219, 220, 221, 229, 238, 242, 245, 246, 248, 249, 251, 252, 260, 268, 275, 277, 278, 280, 281, 282, 283, 289, 313, 316, 317, 362, 370, 398, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 456, 466, 468, 480, 494, 512, 524, 536, 545, 575, 576, 578, 583, 584, 587, 590, 592, 603, 604, 606, 608, 610, 612, 614, 617, 619, 621, 624, 636, 647, 648, 652, 654, 664, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 700, 712, 713, 716, 717, 728, 729, 730, 731, 732, 733, 734, 748, 763, 767, 774, 775, 776, 784, 787, 788, 806, 814, 815, 816, 823, 827, 831, 832, 833, 841, 848, 850, 852, 853, 860, 865, 867, 868, 873, 874, 901, 907, 950, 957, 990, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1051, 1056, 1092, 1110, 1122, 1134, 1151, 1152, 1154, 1155, 1158, 1163, 1175, 1187, 1213, 1214, 1218, 1220, 1230, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1247, 1262, 1277, 1286, 1295, 1296, 1297, 1298, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316], "from_arrai": 767, "from_arrow": 117, "from_json": 788, "from_panda": 117, "from_repr": [269, 313, 1264, 1286], "fromkei": [48, 50], "front": [204, 313, 827, 901], "fruit": [266, 313, 600, 645, 668, 675, 788, 1211, 1234, 1241], "fruits_revers": [600, 788], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 141, 143, 144, 145, 147, 148, 149, 218, 282, 313, 652, 654, 674, 675, 676, 677, 681, 729, 730, 831, 837, 868, 901, 907, 1218, 1220, 1240, 1241, 1242, 1243, 1247, 1286, 1302, 1316], "full_sent": 719, "fulli": [161, 237, 249, 271, 313], "funcnam": [36, 313], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 175, 181, 184, 190, 197, 220, 223, 229, 237, 238, 242, 260, 270, 271, 272, 275, 276, 277, 280, 281, 282, 299, 313, 316, 317, 325, 362, 381, 382, 397, 398, 400, 431, 452, 454, 455, 477, 536, 544, 545, 567, 568, 583, 587, 590, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 630, 633, 695, 696, 697, 706, 710, 721, 723, 724, 725, 737, 738, 740, 742, 743, 746, 749, 750, 753, 755, 758, 760, 762, 764, 765, 769, 773, 777, 779, 784, 788, 800, 804, 810, 815, 833, 837, 841, 845, 848, 860, 864, 867, 868, 875, 884, 901, 905, 909, 950, 968, 973, 989, 990, 1026, 1049, 1050, 1052, 1053, 1073, 1134, 1142, 1163, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1190, 1195, 1197, 1200, 1265, 1268, 1270, 1271, 1286, 1291, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316], "function_nam": 905, "further": 784, "futur": [54, 172, 183, 254, 313, 810, 814, 855, 901], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 172, 184, 215, 271, 281, 313, 322, 400, 453, 456, 545, 628, 736, 788, 815, 848, 901, 1051, 1286, 1316], "g1": [462, 704, 788], "g2": [462, 704, 788], "g_1": [633, 788, 1200, 1286], "gag": 26, "gamma": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "gantt": [846, 901], "gather": [130, 198, 313, 338, 470, 512, 714, 788, 825, 901, 926, 1065, 1110, 1286], "gather_everi": [313, 788, 901, 1286], "gb": [190, 313, 370, 1049, 1286], "gbp": 1316, "gc": [35, 133, 144, 145, 313], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [219, 313, 832, 901], "gdp2": [219, 313, 832, 901], "gdp_date": [219, 313, 832, 901], "ge": [788, 1286], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 172, 179, 181, 238, 249, 268, 271, 277, 313, 383, 524, 624, 629, 711, 729, 732, 744, 745, 747, 763, 775, 776, 788, 901, 969, 1122, 1187, 1196, 1262, 1286, 1316], "geq": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "germani": [219, 313, 832, 901], "get": [47, 54, 136, 142, 149, 173, 175, 179, 180, 188, 196, 199, 201, 204, 206, 207, 211, 213, 214, 222, 225, 232, 233, 238, 245, 246, 250, 255, 258, 264, 272, 276, 286, 296, 307, 313, 323, 336, 337, 338, 340, 348, 351, 363, 370, 382, 384, 393, 394, 395, 396, 405, 415, 463, 469, 476, 493, 495, 498, 510, 516, 537, 546, 547, 548, 554, 556, 561, 575, 576, 585, 586, 591, 602, 603, 634, 638, 646, 691, 692, 696, 697, 699, 703, 714, 716, 737, 742, 746, 750, 751, 752, 753, 755, 756, 757, 759, 769, 773, 777, 788, 804, 809, 810, 812, 818, 824, 827, 828, 834, 836, 850, 851, 858, 863, 864, 870, 881, 892, 901, 905, 906, 911, 924, 925, 926, 927, 928, 936, 939, 951, 957, 970, 976, 985, 986, 987, 988, 996, 1006, 1044, 1061, 1062, 1067, 1072, 1077, 1078, 1090, 1093, 1096, 1108, 1114, 1135, 1143, 1145, 1146, 1148, 1150, 1151, 1152, 1159, 1160, 1164, 1174, 1201, 1204, 1212, 1258, 1262, 1268, 1272, 1276, 1286], "get_chunk": 1286, "get_column": [172, 273, 313], "get_column_index": 313, "get_worksheet_by_nam": [36, 313], "gevent": [54, 151, 810, 901], "ghi": [322, 648, 788, 907, 1214], "gil": [545, 788], "git": 52, "github": [132, 313], "give": [139, 146, 147, 219, 229, 278, 280, 313, 415, 466, 494, 596, 698, 702, 788, 800, 832, 841, 865, 867, 901, 1006, 1092, 1275, 1286, 1312], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 170, 190, 191, 193, 204, 214, 223, 236, 237, 246, 247, 248, 256, 259, 275, 282, 313, 345, 357, 362, 370, 382, 387, 406, 410, 433, 435, 436, 449, 453, 477, 482, 504, 529, 536, 539, 545, 583, 587, 593, 596, 597, 599, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 627, 648, 649, 658, 659, 674, 677, 684, 687, 697, 736, 737, 746, 749, 750, 763, 764, 765, 788, 820, 827, 837, 845, 856, 859, 868, 884, 901, 906, 907, 909, 933, 945, 950, 957, 978, 997, 1001, 1028, 1030, 1031, 1045, 1049, 1051, 1073, 1077, 1091, 1102, 1127, 1134, 1137, 1140, 1142, 1155, 1161, 1165, 1171, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1189, 1193, 1214, 1215, 1224, 1225, 1240, 1243, 1250, 1274, 1277, 1286, 1295, 1297, 1302, 1304, 1307, 1308, 1313, 1315, 1316], "glimps": [183, 206, 313], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 260, 313, 597, 598, 767, 788, 860, 901, 971, 972, 1169, 1170, 1286, 1296, 1298, 1312], "gmt": [410, 414, 430, 1001, 1005, 1025], "go": [12, 129, 130, 143, 645, 1211], "godfath": 1295, "goe": 12, "gonfruit": 1241, "good": [41, 43, 45, 216, 313, 901, 1307], "goodby": 1, "googl": [133, 144, 145], "gpu": [270, 313, 809, 876, 898, 901, 1265, 1286], "gpu_devic": [270, 313], "gpudevic": [270, 313], "gpuengin": [809, 901], "grade": [1092, 1286], "grain": [809, 898, 901], "granular": 1313, "grape": 1308, "graph": [53, 131, 221, 313, 809, 829, 873, 901], "graphviz": [221, 313, 857, 901], "great": [313, 317], "great_tabl": [313, 317], "greater": [177, 219, 313, 471, 473, 482, 633, 658, 659, 667, 684, 788, 832, 901, 1077, 1200, 1224, 1225, 1233, 1250, 1286], "greatest": [1303, 1306], "greatli": [135, 146], "green": [46, 84, 85, 299, 702, 788, 884, 1275, 1286], "greenlet": [54, 810, 901], "greet": 1, "grid": [480, 788], "grid_point": [480, 788], "gridlin": [36, 313], "gross": 1295, "group": [9, 27, 41, 45, 130, 148, 176, 203, 204, 217, 234, 236, 238, 245, 248, 281, 283, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 323, 382, 397, 458, 464, 469, 472, 508, 544, 545, 554, 556, 583, 593, 602, 603, 635, 636, 640, 647, 648, 649, 651, 660, 661, 697, 702, 750, 788, 806, 826, 827, 850, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 905, 907, 989, 1106, 1174, 1206, 1213, 1214, 1215, 1217, 1226, 1227, 1275, 1286, 1295, 1303, 1312, 1313], "group_bi": [204, 234, 238, 245, 283, 312, 313, 323, 382, 462, 464, 469, 472, 544, 545, 583, 635, 636, 697, 704, 729, 732, 750, 788, 809, 810, 819, 827, 846, 850, 857, 899, 901, 907], "group_by_dynam": [245, 313, 850, 901], "group_by_partit": [846, 901], "group_col": [462, 704, 788], "group_df": [299, 884], "group_dtyp": [583, 788], "group_index": [647, 1213], "group_to_row": [583, 788], "groupbi": [203, 313, 545, 750, 788], "grow": [285, 313], "grown": [208, 313], "gt": [313, 317, 788, 1286], "gte": [462, 704, 788], "guarante": [41, 45, 129, 130, 175, 183, 205, 276, 278, 313, 381, 382, 475, 696, 697, 788, 804, 814, 864, 865, 901, 968, 1071, 1271, 1286], "guid": [788, 905, 1316], "gzip": [41, 45, 313, 901], "h": [281, 313, 322, 433, 436, 628, 660, 661, 674, 677, 681, 788, 1226, 1227, 1240, 1243, 1247, 1308, 1309], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 172, 283, 289, 294, 313, 381, 382, 397, 468, 544, 555, 560, 652, 675, 685, 696, 697, 737, 746, 784, 788, 810, 874, 879, 884, 901, 968, 977, 989, 991, 1218, 1241, 1271, 1286], "half": [275, 313, 431, 452, 453, 454, 455, 788, 1026, 1050, 1051, 1052, 1053, 1286], "half_lif": [452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286], "ham": [31, 33, 35, 37, 38, 41, 176, 179, 180, 181, 185, 186, 187, 188, 189, 195, 200, 205, 206, 208, 218, 222, 224, 226, 228, 231, 235, 240, 242, 243, 246, 249, 250, 251, 258, 261, 262, 264, 268, 269, 271, 272, 273, 278, 284, 285, 313, 384, 558, 784, 806, 811, 812, 816, 817, 818, 823, 831, 844, 848, 851, 852, 865, 873, 901, 970, 1302, 1303], "ham_a": [268, 313], "ham_b": [268, 313], "ham_right": [218, 313, 831, 901], "hamburg": 784, "hand": [36, 129, 130, 143, 313, 525, 526, 527, 528, 1123, 1124, 1125, 1126], "handi": [405, 716, 996], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 195, 199, 313, 401, 506, 646, 684, 788, 809, 810, 823, 901, 905, 992, 1104, 1212, 1250, 1286], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 400, 788, 815, 901], "happen": [131, 410, 590, 788, 1001, 1163, 1286], "hard": [143, 837, 901], "harder": [204, 313, 827, 901], "hardwar": 1316, "has_head": [129, 130, 134, 140, 143], "has_nul": [788, 1070, 1286], "has_prefix": 668, "has_suffix": 645, "has_two": 1304, "has_valid": 1286, "hash": [205, 313, 788, 1286], "hash_row": 313, "hat": [660, 661, 1226, 1227], "have": [5, 14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 184, 192, 216, 218, 219, 238, 241, 245, 247, 248, 267, 275, 290, 313, 397, 400, 452, 454, 455, 545, 555, 593, 597, 598, 603, 649, 662, 788, 815, 831, 832, 841, 850, 874, 875, 901, 905, 907, 989, 991, 1050, 1052, 1053, 1056, 1165, 1169, 1170, 1228, 1286, 1312, 1314, 1316], "haystack": [648, 1214], "he": 670, "head": [143, 202, 222, 264, 313, 328, 498, 788, 836, 901, 1096, 1258, 1286], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 140, 143, 188, 277, 313, 901], "header_format": [36, 313], "header_nam": [277, 313], "headerless": 143, "heap": [190, 313, 788, 905, 1049, 1286], "heatmap": [36, 313], "heavili": 148, "height": [36, 126, 159, 187, 313], "hell": [669, 1235], "hello": [1, 20, 669, 670, 671, 907, 1113, 1235, 1236, 1237, 1297, 1300], "hello_": 739, "hello_data": 1300, "hello_world": 1300, "help": [36, 152, 153, 154, 155, 313, 901], "helper": [313, 317, 784], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 173, 238, 313, 405, 544, 545, 649, 655, 716, 788, 857, 901, 907, 996, 1221], "hex": [367, 368, 643, 644, 679, 954, 955, 1209, 1210, 1245], "hexadecim": [954, 955], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1308], "hidden": [36, 313], "hidden_column": [36, 313], "hide": [21, 22, 23, 24], "hide_gridlin": [36, 313], "hide_password": 131, "high": [248, 313, 317, 590, 788, 800, 1163, 1286], "higher": [41, 45, 183, 240, 305, 313, 591, 613, 614, 761, 788, 814, 847, 890, 901, 991, 1164, 1180, 1286], "highest": [313, 317, 593, 701, 720, 788, 901, 1165, 1286], "highli": [788, 905], "hippopotamu": [658, 659, 1224, 1225], "hist": [788, 1286, 1291], "histogram": [1286, 1291], "hit": [805, 901], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 907, "hold": [257, 271, 313, 1267, 1286], "holidai": [405, 716, 996], "home": [682, 1248], "horizont": [20, 55, 92, 197, 208, 225, 227, 232, 263, 281, 313, 707, 709, 718, 719, 724, 725, 727, 735, 738, 752, 754, 757, 762, 772, 873, 901], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 204, 219, 245, 283, 313, 419, 421, 422, 426, 427, 431, 432, 438, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 731, 732, 733, 734, 774, 775, 776, 788, 827, 832, 850, 901, 907, 1022, 1026, 1033, 1039, 1051, 1286, 1309], "hours_diff": 438, "hous": [275, 313], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 187, 195, 218, 219, 238, 281, 282, 313, 346, 401, 430, 480, 505, 506, 583, 596, 615, 674, 677, 716, 731, 778, 788, 817, 823, 831, 832, 868, 873, 901, 905, 934, 992, 1025, 1103, 1104, 1181, 1240, 1243, 1286], "howev": [1, 119, 131, 141, 148, 190, 223, 271, 313, 583, 788, 809, 901, 1049, 1286], "hstack": [92, 313], "html": [36, 37, 38, 117, 131, 135, 137, 170, 171, 172, 181, 313, 909, 910], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 647, 649, 857, 901, 909, 910, 1213, 1215], "hug": [139, 141, 143, 146, 147, 148], "hut": [660, 661, 1226, 1227], "hvplot": [313, 316, 1286, 1291], "hyperbol": [331, 333, 335, 389, 632, 694, 788, 919, 921, 923, 981, 1199, 1260, 1286], "hyperloglog": [174, 313, 329, 710, 788, 803, 901, 917, 1286], "hyphen": [639, 1205], "hypothesi": [157, 159, 162, 163, 1316], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 178, 179, 183, 184, 187, 189, 190, 192, 195, 199, 203, 204, 205, 206, 209, 210, 214, 216, 217, 218, 219, 220, 221, 222, 223, 229, 230, 234, 236, 237, 238, 242, 243, 245, 246, 247, 248, 249, 252, 253, 254, 256, 258, 259, 260, 261, 264, 265, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 288, 290, 291, 299, 313, 316, 317, 322, 325, 327, 328, 329, 339, 342, 349, 350, 357, 362, 381, 382, 397, 398, 400, 403, 404, 405, 406, 409, 417, 424, 425, 427, 431, 433, 444, 452, 453, 454, 455, 458, 462, 466, 475, 477, 479, 482, 494, 500, 507, 508, 511, 513, 515, 524, 529, 530, 532, 536, 538, 541, 544, 545, 549, 551, 553, 554, 555, 557, 565, 583, 588, 590, 593, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 629, 630, 633, 634, 635, 636, 638, 639, 640, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 671, 674, 675, 676, 677, 679, 681, 682, 684, 689, 696, 697, 702, 703, 706, 707, 708, 709, 710, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 732, 733, 738, 742, 743, 744, 745, 747, 748, 750, 753, 755, 758, 760, 763, 764, 765, 766, 767, 769, 773, 775, 776, 777, 778, 779, 784, 788, 803, 804, 805, 808, 809, 810, 812, 814, 815, 817, 818, 819, 823, 826, 827, 830, 831, 832, 833, 835, 837, 841, 842, 846, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 867, 868, 869, 870, 872, 875, 876, 884, 894, 901, 905, 907, 914, 915, 916, 917, 930, 937, 938, 945, 950, 968, 971, 973, 978, 979, 989, 990, 991, 994, 995, 996, 997, 1000, 1008, 1022, 1026, 1028, 1039, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1060, 1061, 1071, 1072, 1073, 1077, 1079, 1089, 1091, 1092, 1093, 1096, 1098, 1105, 1106, 1109, 1111, 1113, 1122, 1127, 1128, 1134, 1142, 1161, 1163, 1165, 1167, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1191, 1193, 1196, 1197, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1233, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1245, 1247, 1248, 1250, 1258, 1261, 1265, 1267, 1268, 1270, 1271, 1275, 1276, 1286, 1291, 1295, 1296, 1301, 1305, 1308, 1311, 1313, 1314, 1316], "i0e0": 1316, "i16": [1, 50, 413, 428, 446, 628, 788, 907, 1023, 1264, 1286, 1316], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 251, 260, 313, 348, 349, 351, 383, 408, 416, 418, 419, 420, 421, 422, 426, 448, 628, 716, 778, 788, 852, 901, 936, 937, 939, 999, 1009, 1013, 1014, 1015, 1021, 1043, 1140, 1286, 1305, 1309, 1316], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 173, 175, 176, 177, 178, 180, 184, 185, 187, 188, 191, 192, 194, 195, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 215, 218, 219, 220, 222, 223, 224, 230, 231, 236, 237, 238, 239, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 262, 264, 266, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 303, 306, 307, 313, 322, 324, 328, 338, 343, 344, 346, 347, 352, 354, 355, 356, 357, 358, 360, 363, 365, 381, 382, 387, 393, 394, 395, 396, 397, 398, 401, 402, 415, 435, 437, 438, 439, 440, 441, 442, 443, 453, 456, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 472, 476, 478, 479, 480, 481, 482, 485, 486, 488, 489, 490, 491, 492, 495, 498, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 542, 544, 545, 562, 563, 564, 566, 567, 569, 571, 573, 574, 579, 583, 584, 587, 588, 589, 590, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 624, 626, 627, 628, 629, 634, 635, 636, 652, 660, 661, 675, 679, 684, 685, 687, 688, 689, 690, 691, 692, 696, 697, 698, 699, 701, 704, 711, 714, 717, 718, 719, 724, 725, 726, 727, 728, 731, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 756, 757, 759, 762, 766, 767, 768, 771, 772, 773, 774, 778, 784, 788, 804, 806, 807, 809, 810, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 842, 843, 845, 846, 848, 849, 850, 852, 854, 856, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 871, 874, 875, 877, 878, 880, 881, 882, 884, 885, 888, 891, 892, 901, 907, 911, 912, 913, 916, 935, 940, 942, 944, 945, 946, 948, 951, 968, 978, 979, 985, 986, 987, 988, 989, 990, 1006, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1055, 1056, 1057, 1059, 1060, 1064, 1065, 1067, 1072, 1074, 1082, 1096, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1116, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1134, 1135, 1142, 1147, 1155, 1161, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1176, 1179, 1183, 1187, 1188, 1190, 1193, 1194, 1196, 1201, 1202, 1245, 1251, 1256, 1258, 1263, 1271, 1272, 1277, 1286, 1295, 1296, 1298, 1302, 1303, 1304, 1305, 1307, 1310, 1311, 1313, 1314, 1316], "i8": [361, 362, 413, 416, 419, 421, 422, 423, 426, 428, 429, 432, 445, 446, 535, 628, 760, 763, 779, 788, 949, 950, 992, 1004, 1007, 1017, 1018, 1024, 1027, 1040, 1041, 1133, 1172, 1194, 1274, 1286, 1309], "iceberg": [145, 800], "icon": [36, 313], "id": [26, 36, 55, 126, 129, 145, 220, 270, 277, 290, 299, 313, 602, 660, 661, 700, 788, 833, 875, 884, 901, 907, 1174, 1273, 1286, 1313, 1314, 1316], "id_char": 1316, "id_var": [229, 280, 313, 841, 867, 901], "ideal": 125, "ident": [123, 177, 178, 313, 433, 601, 602, 788, 807, 808, 901, 977, 979, 1028, 1173, 1174, 1286], "identifi": [123, 131, 229, 236, 278, 280, 291, 313, 841, 865, 867, 901], "idiograph": 907, "idiomat": [784, 812, 818, 851, 870, 884, 901], "idx": [143, 204, 217, 290, 313, 349, 362, 536, 827, 875, 901, 950, 1134, 1217], "idx_lit": 1217, "idx_rx": 1217, "ieee": [698, 788], "if_set": [5, 30], "if_table_exist": [34, 313], "ifnul": 1306, "ignor": [35, 131, 158, 159, 163, 227, 263, 282, 313, 325, 327, 350, 401, 430, 452, 454, 455, 506, 515, 575, 576, 639, 653, 706, 708, 719, 788, 868, 901, 907, 914, 915, 938, 992, 1025, 1050, 1052, 1053, 1104, 1113, 1151, 1152, 1205, 1219, 1286], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [227, 263, 313, 325, 327, 350, 452, 454, 455, 515, 639, 653, 706, 708, 719, 788, 914, 915, 938, 1050, 1052, 1053, 1113, 1205, 1219, 1286], "ignore_spac": 907, "ijkl": 1308, "ilmsuxu": [640, 647, 648, 651, 660, 661, 1206, 1213, 1214, 1217, 1226, 1227], "imbal": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "imdb_scor": 1295, "immedi": [593, 711, 715, 729, 730, 732, 733, 744, 745, 760, 763, 770, 775, 776, 779, 788, 1165, 1286, 1296], "immut": [271, 313, 1267, 1286], "impact": [204, 313, 827, 901, 1295, 1313], "impl": 145, "implement": [41, 117, 131, 172, 205, 223, 299, 313, 316, 317, 475, 545, 566, 567, 569, 571, 573, 574, 685, 750, 788, 884, 1071, 1142, 1188, 1190, 1286, 1291], "implic": [400, 788, 815, 901], "implicit": [282, 313, 868, 901], "implicitli": [195, 313, 462, 778, 788, 823, 901, 1313], "implod": [788, 1286, 1304], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 176, 183, 184, 185, 187, 202, 204, 217, 219, 236, 238, 253, 260, 268, 270, 275, 280, 281, 283, 313, 316, 317, 370, 399, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 462, 551, 557, 583, 604, 606, 608, 610, 612, 614, 617, 619, 621, 716, 728, 729, 730, 731, 732, 733, 734, 767, 775, 776, 784, 788, 800, 806, 810, 814, 815, 816, 817, 827, 832, 837, 854, 867, 901, 957, 980, 982, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1051, 1080, 1083, 1085, 1086, 1175, 1198, 1259, 1286, 1291, 1296, 1310, 1313, 1316], "improv": [34, 45, 135, 146, 313, 544, 788, 901], "in_plac": [208, 257, 285, 313, 1166, 1195, 1202, 1286], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 159, 160, 179, 183, 190, 195, 220, 236, 238, 248, 259, 275, 277, 281, 282, 313, 398, 432, 462, 466, 477, 482, 551, 590, 605, 607, 609, 611, 613, 615, 616, 618, 620, 665, 666, 669, 670, 716, 724, 764, 765, 788, 814, 823, 833, 859, 868, 901, 907, 990, 991, 1027, 1049, 1060, 1073, 1077, 1163, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1231, 1232, 1235, 1286, 1313], "include_bom": [33, 42, 313, 901], "include_boundari": [204, 313, 827, 901], "include_break": [398, 590, 788, 990, 1163, 1286], "include_breakpoint": [477, 788, 1073, 1286], "include_categor": 907, "include_categori": [477, 788, 1073, 1286], "include_col": 159, "include_file_path": [139, 141, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 277, 313, 901], "include_index": 121, "include_init": 724, "include_kei": [236, 248, 313], "include_nul": [282, 313, 868, 901], "inclus": [173, 204, 245, 313, 482, 603, 606, 608, 610, 612, 614, 617, 619, 621, 665, 666, 711, 729, 730, 732, 733, 744, 745, 775, 776, 788, 827, 850, 901, 1077, 1231, 1232, 1286], "incom": 131, "incompat": 110, "incomplet": [598, 788, 1170, 1286], "incorpor": 1313, "incorrect": [254, 313, 447, 544, 545, 626, 788, 855, 884, 901, 1042, 1191, 1286], "incorrectli": [129, 536], "increas": [36, 47, 129, 134, 140, 141, 148, 313, 397, 602, 788, 989, 1174, 1286], "independ": [53, 54, 156, 159, 163, 275, 313, 629, 788, 809, 810, 819, 846, 857, 901], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 172, 198, 200, 204, 209, 214, 216, 238, 243, 245, 246, 247, 256, 258, 270, 271, 273, 280, 282, 283, 289, 290, 313, 323, 336, 337, 338, 340, 343, 344, 349, 357, 362, 453, 469, 470, 472, 501, 502, 511, 512, 513, 529, 530, 536, 603, 606, 608, 610, 612, 614, 617, 619, 621, 625, 627, 634, 640, 647, 651, 652, 664, 675, 685, 714, 744, 747, 788, 825, 827, 850, 856, 858, 867, 868, 874, 875, 901, 907, 924, 925, 926, 927, 928, 931, 932, 937, 945, 950, 1051, 1064, 1065, 1091, 1099, 1100, 1109, 1110, 1111, 1127, 1128, 1134, 1155, 1188, 1189, 1193, 1201, 1213, 1217, 1218, 1230, 1241, 1286, 1291, 1304, 1308], "index_column": [204, 245, 313, 603, 788, 827, 850, 901], "indexord": [270, 271, 313], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 204, 245, 248, 254, 256, 268, 313, 339, 357, 469, 477, 483, 484, 485, 487, 488, 489, 490, 491, 492, 511, 529, 549, 550, 551, 552, 553, 603, 606, 608, 610, 612, 614, 617, 619, 621, 625, 627, 714, 715, 759, 788, 827, 850, 855, 856, 901, 905, 907, 945, 1064, 1073, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1109, 1127, 1188, 1189, 1193, 1262, 1286, 1316], "indistinguish": [33, 42, 313, 901], "individu": [36, 45, 168, 245, 270, 271, 275, 313, 545, 648, 688, 788, 809, 850, 901, 907, 976, 1214, 1286], "inequ": [577, 788], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 335, 398, 477, 484, 487, 590, 698, 788, 923, 982, 990, 1080, 1083, 1140, 1158, 1163, 1274, 1286, 1310], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 223, 313, 544, 545, 599, 654, 674, 676, 677, 678, 681, 734, 748, 763, 788, 901, 1142, 1171, 1220, 1240, 1242, 1243, 1244, 1247, 1286], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 313, 654, 901, 1220], "inference_length": [678, 1244], "inference_s": [223, 313], "infin": [682, 698, 788, 1248], "infinit": [487, 698, 788, 1083, 1286], "influenc": [134, 837, 901], "influxdb": 131, "info": [133, 144, 145, 151], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 170, 181, 183, 313, 317, 494, 545, 633, 640, 647, 648, 651, 660, 661, 788, 809, 814, 846, 901, 905, 909, 972, 1092, 1200, 1206, 1213, 1214, 1217, 1226, 1227, 1286], "inherit": [246, 313, 400, 788, 815, 901], "init": [168, 1295], "initcap": 1306, "initi": [36, 76, 168, 313, 724, 738, 778, 1313], "initialis": [131, 168, 901], "inject": [36, 47, 313], "inlin": [18, 248, 313, 640, 647, 648, 651, 660, 661, 1206, 1213, 1214, 1217, 1226, 1227, 1304], "inner": [56, 72, 158, 218, 220, 282, 313, 350, 361, 402, 515, 535, 545, 596, 695, 767, 788, 831, 833, 868, 901, 938, 949, 993, 1113, 1133, 1142, 1269, 1286, 1302, 1313], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 937, "inprocessqueri": [809, 901], "input": [0, 47, 53, 91, 119, 121, 129, 130, 175, 185, 203, 220, 223, 227, 236, 238, 242, 251, 252, 256, 259, 263, 276, 287, 288, 292, 313, 322, 382, 387, 453, 456, 468, 482, 540, 544, 545, 555, 583, 597, 598, 630, 636, 652, 662, 664, 670, 671, 672, 673, 675, 677, 689, 697, 705, 707, 709, 711, 714, 717, 718, 719, 727, 734, 736, 744, 745, 748, 749, 750, 752, 754, 757, 766, 770, 772, 778, 784, 788, 800, 804, 816, 826, 833, 848, 852, 853, 856, 859, 864, 871, 872, 877, 901, 905, 978, 1051, 1077, 1138, 1139, 1142, 1161, 1169, 1170, 1193, 1197, 1218, 1230, 1241, 1243, 1286, 1307, 1308, 1310], "input_wildcard_expans": [788, 905], "insensit": [641, 648, 650, 660, 661, 662, 907, 1206, 1207, 1214, 1216, 1217, 1226, 1227, 1228], "insensitive_match": [640, 651], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 209, 277, 279, 313, 625, 639, 653, 684, 788, 866, 901, 1189, 1205, 1219, 1250, 1286], "insert_aft": [36, 313], "insert_befor": [36, 313], "insert_chart": [36, 313], "insert_column": 313, "insid": [54, 544, 788, 810, 901], "inspect": [788, 901], "instal": [95, 121, 129, 130, 132, 135, 137, 181, 272, 313, 405, 716, 857, 901, 996, 1268, 1286], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 176, 192, 197, 313, 555, 724, 738, 784, 806, 837, 874, 875, 901, 1056, 1286], "instanti": [34, 36, 131, 161, 251, 269, 270, 287, 313, 852, 871, 901, 906, 1264, 1265, 1286], "instantli": [54, 810, 901], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 148, 149, 156, 157, 158, 159, 163, 174, 175, 202, 215, 216, 219, 223, 229, 234, 236, 246, 247, 248, 251, 252, 253, 256, 270, 271, 272, 276, 288, 289, 313, 316, 317, 338, 357, 382, 383, 398, 412, 453, 456, 466, 529, 557, 590, 597, 627, 639, 646, 656, 657, 660, 661, 669, 670, 671, 672, 673, 684, 697, 704, 711, 713, 715, 721, 729, 730, 732, 733, 734, 744, 745, 760, 763, 767, 770, 775, 776, 779, 788, 803, 804, 810, 819, 832, 841, 852, 853, 854, 856, 864, 872, 873, 874, 876, 901, 907, 926, 945, 954, 969, 990, 1003, 1011, 1012, 1051, 1070, 1127, 1163, 1169, 1188, 1190, 1193, 1202, 1205, 1212, 1222, 1223, 1226, 1227, 1235, 1236, 1237, 1250, 1267, 1268, 1286, 1291, 1295, 1296, 1300, 1313, 1314], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 175, 177, 183, 190, 193, 194, 198, 200, 202, 205, 206, 207, 209, 214, 216, 217, 219, 222, 223, 233, 234, 243, 245, 246, 249, 255, 256, 258, 261, 264, 269, 273, 276, 281, 284, 286, 289, 290, 296, 307, 313, 322, 345, 349, 357, 359, 362, 364, 365, 381, 382, 397, 401, 405, 452, 454, 455, 459, 460, 461, 467, 469, 470, 472, 475, 476, 477, 498, 504, 506, 511, 512, 513, 514, 524, 529, 530, 532, 534, 535, 536, 538, 582, 584, 587, 588, 590, 593, 596, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 634, 638, 647, 652, 654, 658, 659, 660, 664, 666, 667, 675, 678, 679, 684, 692, 696, 697, 703, 705, 711, 720, 722, 728, 731, 734, 740, 742, 744, 745, 759, 760, 763, 764, 765, 769, 770, 773, 774, 777, 779, 788, 804, 807, 814, 821, 822, 825, 828, 832, 836, 846, 856, 858, 861, 863, 864, 869, 870, 874, 875, 876, 881, 892, 901, 906, 907, 924, 925, 933, 937, 945, 947, 950, 952, 968, 969, 976, 977, 983, 989, 992, 993, 996, 1049, 1050, 1052, 1053, 1057, 1058, 1059, 1064, 1065, 1071, 1072, 1073, 1091, 1095, 1096, 1102, 1104, 1109, 1110, 1111, 1112, 1122, 1127, 1128, 1130, 1132, 1133, 1134, 1136, 1148, 1149, 1151, 1152, 1155, 1157, 1158, 1161, 1162, 1163, 1165, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1196, 1201, 1204, 1213, 1218, 1220, 1224, 1225, 1226, 1230, 1232, 1233, 1241, 1244, 1245, 1250, 1257, 1258, 1264, 1271, 1276, 1286, 1298, 1301, 1313, 1316], "int16": [1, 50, 275, 313, 395, 396, 428, 691, 788, 907, 987, 988, 1023, 1257, 1264, 1286], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 204, 217, 245, 270, 313, 348, 349, 351, 383, 408, 418, 419, 420, 421, 426, 448, 453, 603, 695, 763, 788, 827, 850, 901, 907, 933, 936, 937, 939, 999, 1009, 1013, 1014, 1015, 1021, 1043, 1051, 1140, 1269, 1270, 1286], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 179, 188, 197, 204, 237, 245, 250, 251, 265, 272, 313, 343, 344, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 395, 396, 437, 438, 439, 440, 441, 442, 443, 447, 453, 456, 544, 545, 568, 570, 572, 587, 595, 603, 654, 679, 691, 695, 711, 736, 744, 745, 748, 763, 770, 784, 788, 811, 818, 827, 845, 850, 851, 852, 901, 907, 931, 932, 934, 935, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 987, 988, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1044, 1051, 1142, 1167, 1245, 1257, 1267, 1268, 1269, 1270, 1286], "int64arrai": [1261, 1286], "int8": [1, 50, 76, 197, 313, 361, 362, 395, 396, 413, 416, 422, 423, 429, 432, 445, 446, 535, 691, 760, 763, 779, 788, 906, 949, 950, 987, 988, 992, 1004, 1007, 1017, 1018, 1024, 1027, 1040, 1041, 1133, 1172, 1257, 1267, 1274, 1286], "int_rang": [204, 281, 290, 299, 313, 711, 747, 827, 837, 875, 884, 901], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 187, 204, 245, 268, 271, 313, 326, 386, 432, 465, 466, 582, 588, 590, 595, 602, 603, 615, 652, 675, 679, 705, 711, 740, 744, 745, 763, 788, 817, 827, 850, 901, 907, 975, 1027, 1063, 1161, 1163, 1167, 1174, 1181, 1188, 1218, 1241, 1245, 1267, 1286, 1307, 1313, 1316], "integer_list": 72, "integr": [36, 275, 313, 1316], "intend": [1, 152, 153, 154, 155, 684, 1250], "intens": [223, 299, 313, 583, 788, 1142, 1286], "interact": [159, 163, 183, 313, 316, 814, 901, 1286, 1291], "interchang": [117, 172], "interest": [130, 433, 436, 1028, 1031], "interfac": [0, 106, 107, 171, 800, 910, 1313], "interleav": 1308, "intermedi": [210, 313, 830, 901, 1316], "intern": [37, 38, 131, 150, 216, 265, 313, 466, 788, 1261, 1286, 1296], "interoper": [170, 909], "interpol": [183, 240, 305, 313, 461, 481, 548, 591, 613, 614, 761, 788, 814, 847, 890, 901, 991, 1076, 1164, 1180, 1286], "interpolate_bi": [788, 1286], "interpolationmethod": [480, 788, 1075, 1286], "interpret": [120, 122, 129, 130, 143, 313, 901], "intersect": [36, 313, 526, 907, 1124, 1312], "interv": [204, 245, 283, 313, 398, 431, 444, 477, 482, 590, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 850, 901, 990, 1004, 1006, 1007, 1013, 1015, 1017, 1018, 1021, 1023, 1024, 1026, 1030, 1039, 1040, 1073, 1077, 1163, 1286], "intoexpr": [175, 203, 204, 245, 251, 252, 256, 259, 276, 287, 288, 292, 313, 328, 346, 366, 369, 371, 382, 405, 453, 459, 469, 477, 481, 482, 505, 525, 526, 527, 528, 583, 597, 598, 606, 608, 610, 612, 614, 617, 619, 621, 625, 627, 636, 641, 650, 662, 665, 666, 667, 672, 673, 689, 697, 707, 709, 714, 717, 718, 719, 720, 722, 724, 727, 731, 738, 752, 754, 757, 763, 766, 770, 772, 788, 804, 826, 827, 850, 852, 853, 856, 859, 864, 871, 872, 877, 901, 905, 934, 953, 956, 958, 996, 1051, 1057, 1076, 1077, 1103, 1169, 1170, 1189, 1193, 1231, 1232, 1233, 1238, 1239, 1286], "intoexprcolumn": [195, 209, 313, 345, 349, 350, 357, 381, 382, 387, 431, 459, 462, 504, 512, 515, 524, 529, 584, 588, 624, 627, 647, 652, 655, 664, 669, 670, 671, 675, 679, 684, 696, 697, 711, 716, 729, 730, 732, 733, 744, 745, 775, 776, 778, 788, 823, 856, 901, 933, 937, 938, 945, 978, 1026, 1039, 1057, 1102, 1110, 1113, 1122, 1127, 1158, 1213, 1218, 1221, 1230, 1235, 1236, 1237, 1241, 1250, 1286], "introduc": [46, 85, 674, 676, 677, 1240, 1242, 1243], "introduct": 1312, "intuit": [466, 788, 907], "invalid": [33, 42, 107, 129, 130, 143, 313, 383, 654, 655, 679, 698, 788, 901, 954, 969, 1220, 1221, 1245, 1286], "invalid_valu": 954, "invalidoperationerror": [598, 788, 1170, 1286, 1311], "invari": [837, 901], "invers": [330, 331, 332, 333, 334, 335, 788, 918, 919, 920, 921, 922, 923, 1267, 1286, 1310], "invert": 907, "invok": [544, 788], "involv": [195, 313, 823, 901], "io": [31, 33, 36, 37, 38, 41, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 184, 253, 313, 400, 468, 557, 788, 815, 854, 901], "iobas": [39, 40, 138, 139, 184, 253, 313, 400, 557, 560, 788, 815, 854, 901], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 313, 800, 901], "ipccompress": [37, 38, 313], "is_between": [788, 1286], "is_dupl": [313, 788, 1286], "is_elementwis": [544, 788, 905], "is_empti": [313, 1286], "is_finit": [788, 1286], "is_first_distinct": [788, 1286], "is_in": [93, 195, 313, 788, 1286], "is_infinit": [788, 1286], "is_last_distinct": [788, 1286], "is_nan": [788, 1286], "is_not_nan": [788, 1286], "is_not_nul": [788, 1286], "is_nul": [187, 313, 788, 817, 901, 1286], "is_numer": 1316, "is_odd": [251, 313, 852, 901, 907], "is_selector": 907, "is_sort": 1286, "is_uniqu": [313, 788, 1286], "isn": 778, "iso": [418, 445, 446, 1009, 1040, 1041, 1308], "iso8601": [129, 130, 143], "iso_lang": 1308, "iso_year": 448, "isodow": 1309, "isoweek": 1309, "isoyear": 1309, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 313, 395, 396, 691, 788, 987, 988, 1257, 1286, 1313], "ital": [36, 313], "item": [13, 55, 130, 202, 246, 249, 313, 345, 349, 350, 401, 458, 504, 506, 513, 515, 524, 624, 667, 788, 933, 937, 938, 992, 1055, 1102, 1104, 1111, 1113, 1122, 1187, 1233, 1286], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 175, 185, 195, 203, 204, 215, 216, 217, 220, 245, 246, 247, 248, 251, 252, 259, 276, 277, 287, 288, 291, 292, 313, 382, 397, 405, 462, 583, 636, 689, 697, 707, 709, 714, 716, 717, 718, 719, 727, 752, 754, 757, 766, 770, 772, 778, 784, 788, 804, 816, 823, 826, 827, 833, 850, 852, 853, 859, 864, 871, 872, 877, 901, 905, 906, 989, 996, 1188, 1286, 1316], "iter_batch": 131, "iter_column": 313, "iter_row": [217, 246, 247, 248, 313], "iter_slic": 313, "its": [123, 151, 190, 271, 313, 409, 431, 444, 453, 544, 601, 636, 688, 778, 788, 812, 818, 870, 901, 972, 1000, 1026, 1039, 1049, 1051, 1173, 1267, 1286, 1315], "itself": [157, 313, 316, 317, 545, 605, 607, 609, 611, 613, 615, 616, 618, 620, 764, 765, 788, 835, 901, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1286, 1291, 1295, 1296, 1313], "ix": [238, 313], "j": [277, 313], "jax": [270, 313, 1265, 1286], "jax_enable_x64": [270, 313], "jaxexporttyp": [270, 313], "jjk": 907, "jkl": [648, 1214], "jklmn": 1308, "job": [805, 901], "join": [42, 43, 44, 45, 46, 47, 53, 54, 55, 85, 195, 219, 220, 282, 313, 462, 480, 583, 639, 767, 788, 809, 810, 819, 823, 832, 833, 846, 857, 868, 873, 901, 1205, 1296, 1298, 1304, 1312, 1313], "join_asof": [218, 313, 831, 901], "join_nul": [218, 313, 831, 901], "join_wher": [313, 901], "joinstrategi": [47, 218, 313, 831, 901], "joinvalid": [218, 313, 831, 901], "jpy": 1316, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 184, 253, 313, 400, 468, 557, 560, 654, 655, 686, 788, 800, 815, 854, 901, 905, 1220, 1221, 1253], "json_path": [655, 1221], "json_path_match": [654, 1220], "json_stat": 5, "json_str": [138, 139], "json_val": [655, 1221], "jsonpath": [654, 655, 1220, 1221], "jst": [123, 907], "jul": [674, 1240, 1308], "juli": [1308, 1309], "just": [36, 121, 131, 143, 229, 280, 313, 841, 867, 901, 907], "k": [175, 248, 276, 277, 313, 381, 382, 392, 494, 696, 697, 788, 804, 864, 901, 968, 984, 1092, 1271, 1286], "k_2": [633, 788, 1200, 1286], "k_3": [633, 788, 1200, 1286], "kanji": 907, "karen": [238, 313], "kathmandu": [1002, 1003, 1029], "kb": [190, 313, 370, 957, 1049, 1286], "kde": [1286, 1291], "keep": [47, 129, 130, 139, 143, 146, 147, 195, 278, 282, 283, 313, 468, 544, 559, 567, 597, 717, 788, 823, 865, 868, 901, 1169, 1286], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 173, 204, 216, 218, 219, 230, 236, 238, 242, 244, 247, 248, 282, 313, 462, 545, 597, 598, 662, 729, 732, 770, 788, 827, 831, 832, 842, 848, 849, 868, 901, 907, 911, 1169, 1170, 1228, 1286, 1302], "kept": [278, 313, 865, 901], "keyerror": 16, "keystrok": 784, "keyword": [35, 133, 141, 144, 159, 163, 181, 203, 237, 246, 251, 252, 272, 287, 288, 292, 313, 462, 587, 689, 766, 770, 778, 788, 826, 845, 852, 853, 871, 872, 877, 901, 1268, 1286, 1299], "kleen": [325, 327, 706, 707, 708, 709, 788, 914, 915, 1286], "klmnoopqrstuvwxyz": [217, 313], "knight": 1295, "know": [47, 131, 238, 280, 313, 536, 544, 788, 867, 901], "known": [135, 362, 536, 884, 950, 1134], "kurtosi": [788, 1286], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 181, 195, 237, 272, 313, 316, 587, 788, 823, 845, 876, 901, 905, 1268, 1286, 1291, 1299, 1313], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [204, 270, 275, 313, 317, 398, 590, 604, 605, 607, 609, 611, 613, 616, 618, 620, 788, 827, 846, 901, 990, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1286], "label_column": [275, 313], "lag": [256, 313, 357, 529, 627, 718, 788, 856, 901, 945, 1127, 1193, 1286], "lake": [35, 133, 144, 313, 800], "lambda": [143, 197, 223, 237, 238, 242, 299, 313, 362, 454, 455, 536, 544, 545, 567, 568, 724, 725, 738, 749, 750, 762, 788, 837, 845, 848, 884, 901, 950, 1052, 1053, 1134, 1142, 1286], "land": [405, 996], "languag": [143, 204, 219, 245, 283, 313, 427, 431, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039, 1051, 1286], "larg": [10, 11, 14, 47, 131, 134, 140, 148], "large_str": [217, 265, 272, 313], "larger": [10, 42, 43, 44, 45, 53, 54, 466, 720, 788, 809, 810, 901], "largest": [175, 276, 313, 382, 696, 697, 788, 804, 864, 901, 1271, 1286], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 206, 219, 222, 238, 248, 259, 264, 271, 278, 307, 313, 338, 349, 358, 397, 413, 424, 428, 445, 488, 513, 531, 534, 536, 566, 567, 569, 571, 573, 574, 598, 635, 636, 652, 667, 675, 692, 714, 773, 784, 788, 832, 859, 863, 865, 892, 901, 907, 926, 937, 946, 989, 1004, 1019, 1023, 1040, 1072, 1084, 1096, 1111, 1129, 1132, 1170, 1202, 1218, 1233, 1241, 1258, 1267, 1286, 1306, 1308], "last_column": [36, 313], "later": [219, 253, 313, 557, 832, 854, 901], "latest": [117, 133, 144, 172, 430, 467, 555, 674, 677, 731, 788, 1025, 1240, 1243], "latt": 907, "latter": [36, 192, 313, 1056, 1286], "lazi": [1, 55, 143, 159, 219, 237, 238, 260, 313, 545, 740, 760, 763, 779, 788, 814, 831, 832, 873, 877, 878, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 901, 907, 1295, 1296, 1297, 1298, 1299, 1301, 1313, 1316], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 810, 901], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 179, 184, 221, 237, 238, 253, 260, 313, 400, 462, 536, 557, 767, 788, 800, 898, 899, 900, 907, 1295, 1296, 1299, 1301, 1313, 1314, 1316], "lazygroupbi": [826, 827, 850, 901], "lbl": [270, 275, 313], "ldf": [1, 877, 878, 880, 882, 885, 886, 887, 888, 889, 890, 891], "ldot": [453, 788, 1051, 1286], "le": [645, 788, 1286], "lead": [14, 41, 123, 149, 227, 254, 256, 263, 313, 357, 469, 472, 529, 544, 545, 626, 627, 669, 671, 720, 788, 837, 855, 856, 884, 901, 945, 1127, 1142, 1191, 1193, 1235, 1237, 1286], "leap": [417, 427, 1008, 1022], "leap_year": 417, "learn": [275, 313], "least": [97, 238, 313, 378, 379, 584, 647, 649, 788, 965, 966, 1158, 1213, 1215, 1286, 1306], "leav": [6, 229, 280, 313, 536, 841, 867, 901], "left": [15, 16, 36, 47, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 398, 452, 453, 454, 455, 480, 482, 590, 603, 606, 608, 610, 612, 614, 617, 619, 621, 625, 695, 717, 724, 725, 729, 730, 732, 733, 738, 762, 775, 776, 778, 788, 827, 831, 832, 850, 868, 901, 990, 1050, 1051, 1052, 1053, 1077, 1163, 1189, 1269, 1286, 1298, 1302, 1306], "left_clos": [398, 590, 788, 990, 1163, 1286], "left_on": [218, 219, 282, 313, 831, 832, 868, 901], "leftmost": [625, 788, 1189, 1286, 1308], "len": [12, 36, 159, 163, 179, 217, 238, 290, 294, 299, 313, 391, 545, 554, 556, 601, 721, 744, 788, 811, 870, 875, 879, 884, 901, 906, 983, 1173, 1286], "len_byt": [12, 657, 1223], "len_char": [656, 1222], "length": [55, 56, 72, 134, 140, 143, 157, 161, 202, 204, 245, 258, 313, 316, 397, 431, 444, 530, 536, 555, 597, 598, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 634, 652, 656, 657, 658, 659, 662, 664, 675, 684, 760, 763, 764, 765, 779, 788, 827, 846, 850, 858, 901, 905, 976, 989, 1000, 1026, 1039, 1128, 1134, 1155, 1169, 1170, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1201, 1218, 1222, 1223, 1224, 1225, 1228, 1230, 1241, 1250, 1286, 1304, 1306], "leq": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "less": [143, 219, 313, 466, 496, 543, 544, 667, 788, 832, 901, 1233, 1316], "letter": [191, 296, 307, 313, 456, 641, 648, 650, 662, 682, 736, 788, 820, 881, 892, 901, 907, 1207, 1214, 1216, 1228, 1248, 1308], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 197, 223, 234, 260, 265, 313, 317, 462, 788, 800, 860, 901, 1261, 1286, 1313], "lexic": [59, 907, 973], "lf": [42, 43, 44, 45, 50, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 879, 883, 901, 1303, 1313, 1316], "lf1": [767, 860, 901, 1299, 1301, 1314], "lf2": [767, 860, 901, 1299, 1301, 1314], "lf3": [901, 1299], "lf4": [901, 1299], "lf5": 901, "lf6": 901, "lf_other": [873, 901], "lib": [788, 1261, 1286], "librari": [1, 99, 131, 134, 544, 788, 905, 1316], "life": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "lifetim": [168, 799, 1301], "light": [36, 313], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 184, 204, 211, 213, 218, 248, 253, 270, 271, 313, 316, 400, 406, 468, 508, 544, 559, 593, 647, 670, 671, 702, 784, 788, 805, 810, 815, 827, 901, 905, 997, 1106, 1165, 1213, 1275, 1286, 1291], "limit": [10, 11, 45, 131, 132, 165, 194, 313, 365, 461, 467, 788, 822, 901, 1059, 1286, 1304, 1312], "line": [10, 20, 36, 129, 130, 134, 143, 202, 211, 213, 313, 316, 647, 1213, 1286, 1291], "line_termin": [33, 42, 313, 901], "linear": [183, 210, 240, 305, 313, 480, 481, 503, 548, 591, 613, 614, 718, 719, 761, 788, 814, 830, 847, 890, 901, 991, 1075, 1076, 1101, 1164, 1180, 1286], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 180, 185, 188, 190, 191, 195, 201, 203, 204, 208, 216, 233, 236, 245, 246, 247, 248, 251, 259, 266, 267, 275, 277, 278, 279, 281, 287, 292, 293, 313, 323, 350, 361, 362, 363, 398, 405, 458, 464, 469, 478, 486, 544, 545, 555, 556, 583, 590, 596, 599, 604, 605, 607, 609, 611, 613, 616, 618, 620, 635, 636, 646, 648, 650, 665, 685, 687, 688, 695, 714, 716, 718, 729, 730, 732, 733, 735, 743, 745, 748, 750, 768, 770, 776, 784, 788, 812, 818, 820, 823, 826, 827, 852, 859, 865, 866, 871, 873, 877, 878, 901, 906, 907, 938, 949, 950, 951, 976, 990, 996, 1049, 1055, 1060, 1064, 1067, 1073, 1074, 1082, 1142, 1163, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1207, 1212, 1214, 1216, 1228, 1231, 1266, 1269, 1286, 1295, 1300, 1304, 1305, 1315, 1316], "list_of_seri": 750, "lit": [1, 324, 366, 482, 566, 651, 718, 724, 738, 760, 763, 779, 788, 1059, 1286], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 251, 252, 256, 282, 287, 288, 313, 324, 366, 387, 409, 450, 451, 459, 466, 471, 473, 482, 496, 543, 562, 564, 577, 578, 588, 597, 598, 640, 641, 642, 650, 651, 660, 661, 662, 689, 690, 698, 707, 709, 711, 717, 718, 719, 727, 728, 731, 744, 748, 752, 754, 757, 766, 770, 772, 774, 788, 822, 852, 853, 856, 868, 871, 872, 901, 907, 953, 978, 1000, 1047, 1057, 1077, 1154, 1169, 1170, 1188, 1190, 1193, 1206, 1207, 1208, 1216, 1217, 1226, 1227, 1228, 1286, 1308], "littl": [247, 313], "lmn": 907, "ln": [452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286, 1306], "ln_a": 1307, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 313, 788, 800, 901, 905, 1316], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [275, 313], "lobster": [651, 1217], "loc": [313, 317], "local": [4, 35, 131, 133, 144, 145, 148, 313, 444, 585, 586, 788, 971, 972, 1002, 1003, 1026, 1029, 1039, 1159, 1160, 1286, 1296], "localhost": 131, "localis": [431, 444, 1039], "locat": [36, 141, 143, 146, 148, 192, 243, 273, 279, 313, 625, 788, 866, 901, 1056, 1064, 1188, 1189, 1286], "lock": 165, "log": [29, 49, 382, 449, 541, 564, 588, 697, 788, 1045, 1286, 1306], "log10": [788, 1286, 1306], "log10_a": 1307, "log16_a": 1307, "log1p": [788, 1286, 1306], "log1p_a": 1307, "log2": 1306, "logarithm": [539, 540, 541, 788, 1137, 1138, 1139, 1286, 1307], "logic": [55, 223, 299, 313, 316, 317, 325, 327, 400, 545, 695, 706, 707, 708, 709, 750, 788, 815, 819, 831, 854, 884, 901, 914, 915, 1142, 1267, 1269, 1286, 1291], "london": [410, 414, 430, 1001, 1005, 1025], "london_timezon": [430, 1025], "london_to_amsterdam": [430, 1025], "long": [191, 229, 238, 280, 281, 313, 820, 841, 867, 901], "longer": [129, 130, 143], "longest": 536, "look": [10, 204, 313, 366, 536, 827, 901, 953], "lookup": 784, "loop": [545, 788], "lose": [407, 998], "lossi": [129, 130, 143], "love": [641, 662, 1207, 1228], "low": [17, 131, 590, 788, 1163, 1286], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 183, 204, 240, 305, 313, 387, 482, 542, 567, 591, 595, 613, 614, 711, 729, 730, 732, 733, 761, 775, 776, 788, 814, 827, 847, 890, 901, 978, 991, 1077, 1140, 1164, 1167, 1180, 1274, 1286, 1304, 1306], "lower_bound": [204, 313, 387, 482, 788, 827, 901, 978, 1077, 1274, 1286], "lowercas": [573, 680, 682, 1246, 1248, 1308], "lowest": [542, 788], "lru_cach": [223, 313, 545, 788, 1142, 1286], "lst": 158, "lt": [151, 462, 704, 788, 1286], "ltrim": 1306, "lyric": [641, 662, 1207, 1228], "lz4": [37, 38, 41, 43, 45, 313, 901], "lzo": [41, 45, 313, 901], "m": [62, 64, 218, 313, 406, 407, 409, 414, 415, 433, 435, 436, 447, 647, 674, 676, 677, 681, 731, 732, 733, 734, 740, 831, 901, 906, 907, 997, 998, 1000, 1005, 1006, 1028, 1030, 1031, 1042, 1213, 1240, 1242, 1243, 1247, 1299, 1308, 1309], "m_2": [633, 788, 1200, 1286], "m_3": [633, 788, 1200, 1286], "m_i": [633, 788, 1200, 1286], "machin": 1316, "maco": 151, "made": [36, 131, 313], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 183, 184, 190, 192, 204, 219, 220, 223, 245, 253, 260, 270, 272, 275, 281, 282, 283, 313, 316, 317, 397, 398, 400, 405, 406, 407, 418, 427, 431, 433, 436, 444, 456, 477, 511, 536, 544, 545, 554, 557, 590, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 650, 654, 656, 716, 724, 725, 729, 730, 732, 733, 738, 762, 764, 765, 775, 776, 788, 809, 810, 814, 815, 819, 827, 832, 833, 837, 850, 854, 860, 868, 874, 875, 884, 901, 972, 973, 989, 990, 991, 996, 997, 998, 1009, 1022, 1026, 1028, 1031, 1039, 1049, 1056, 1073, 1109, 1142, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1216, 1220, 1222, 1265, 1268, 1270, 1286, 1291, 1316], "main": [151, 810, 901], "maintain": [42, 43, 44, 45, 259, 313, 363, 537, 625, 636, 699, 714, 788, 814, 859, 901, 951, 1135, 1189, 1272, 1286], "maintain_ord": [42, 43, 44, 45, 203, 236, 238, 259, 278, 283, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 323, 363, 382, 469, 472, 537, 545, 636, 697, 699, 714, 788, 810, 819, 826, 846, 857, 859, 865, 878, 880, 882, 885, 886, 887, 888, 889, 890, 891, 901, 951, 1135, 1272, 1286], "major": [134, 270, 313], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 230, 234, 241, 271, 283, 313, 454, 455, 477, 573, 574, 583, 596, 666, 788, 842, 901, 905, 1052, 1053, 1073, 1232, 1267, 1286], "man": [663, 1229], "manag": [46, 84, 85, 799, 800, 1301, 1313], "mandatori": [36, 313], "mango": [645, 668, 1211, 1234], "mani": [131, 132, 148, 192, 313, 650, 662, 1056, 1216, 1228, 1286, 1290], "manner": 131, "many_to_mani": [218, 313, 831, 901], "many_to_on": [218, 313, 831, 901], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 176, 179, 196, 216, 223, 242, 246, 247, 248, 250, 266, 313, 324, 431, 444, 544, 545, 566, 568, 569, 571, 573, 574, 597, 598, 662, 702, 749, 788, 806, 848, 851, 901, 906, 907, 991, 1026, 1039, 1142, 1169, 1170, 1228, 1275, 1286, 1296, 1298, 1299, 1313], "map_": 103, "map_batch": [788, 901], "map_el": [94, 223, 313, 544, 705, 788, 1286], "map_field": [570, 572], "map_row": 313, "mapelementsstrategi": [545, 788], "mapping_strategi": [583, 788], "march": [433, 436, 1028, 1031], "mariadb": 132, "mark": [36, 126, 313, 383, 788, 969, 1286], "mark_area": [1286, 1291], "mark_attr": [313, 316, 1286, 1291], "mark_bar": [313, 316, 1286, 1291], "mark_lin": [313, 316], "mark_point": [313, 316], "markdown": 20, "marker": [36, 313], "mask": [148, 211, 213, 313, 367, 483, 485, 488, 493, 585, 586, 640, 643, 651, 788, 954, 1060, 1077, 1078, 1081, 1084, 1090, 1159, 1160, 1190, 1206, 1209, 1217, 1277, 1286], "mass": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "massag": [229, 280, 313, 841, 867, 901], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 129, 131, 138, 139, 141, 147, 148, 152, 153, 154, 155, 176, 194, 218, 219, 246, 282, 313, 551, 552, 597, 598, 615, 640, 641, 642, 645, 647, 648, 650, 651, 654, 655, 660, 661, 662, 668, 674, 676, 677, 778, 784, 788, 806, 822, 831, 832, 868, 901, 907, 1048, 1169, 1170, 1181, 1206, 1207, 1208, 1211, 1213, 1214, 1216, 1217, 1220, 1221, 1226, 1227, 1228, 1234, 1240, 1242, 1243, 1286, 1308], "matches_overlap": 650, "matches_supertyp": [194, 313, 822, 901], "materi": [223, 248, 299, 313, 809, 846, 884, 894, 901, 907, 1142, 1286], "materialis": [216, 217, 246, 247, 313], "math": [1, 10, 51, 238, 313, 399, 788, 980, 982, 1198, 1259, 1286, 1306, 1310, 1312], "mathemat": [698, 735, 788, 1306], "mathshortcut": [1, 51], "matplotlib": [151, 846, 857, 901], "matter": [204, 216, 245, 247, 248, 267, 313, 603, 670, 671, 788, 827, 850, 901], "max": [25, 36, 41, 45, 126, 183, 194, 203, 225, 238, 245, 313, 317, 393, 461, 536, 544, 583, 593, 597, 598, 603, 605, 606, 626, 667, 729, 732, 752, 768, 788, 814, 822, 826, 850, 901, 985, 991, 1059, 1134, 1165, 1176, 1191, 1233, 1286, 1295, 1304, 1306], "max_a": [245, 313, 603, 788, 850, 901], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [202, 313], "max_color": [36, 313], "max_data_s": 163, "max_elem": 1304, "max_horizont": [313, 751], "max_items_per_column": [202, 313], "max_level": 126, "max_siz": [158, 159, 161, 163, 1316], "max_text_s": 131, "max_valu": 1316, "max_width": [536, 1134], "maxim": [300, 336, 788, 885, 924, 1286], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 202, 204, 224, 225, 313, 343, 501, 546, 575, 585, 593, 652, 654, 657, 664, 675, 751, 752, 788, 827, 838, 901, 931, 1010, 1099, 1143, 1151, 1159, 1165, 1218, 1220, 1223, 1230, 1241, 1286, 1303], "mb": [190, 313, 370, 1049, 1286], "me": [641, 662, 682, 1207, 1228, 1248], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 183, 194, 203, 204, 219, 227, 238, 245, 283, 292, 313, 427, 431, 444, 458, 461, 466, 603, 606, 607, 608, 610, 612, 614, 617, 619, 621, 633, 639, 647, 653, 729, 730, 732, 733, 734, 754, 775, 776, 778, 788, 814, 822, 826, 827, 832, 837, 850, 877, 901, 991, 1022, 1026, 1039, 1055, 1059, 1177, 1200, 1205, 1213, 1219, 1286, 1303, 1304], "mean_horizont": [313, 753], "measur": [229, 280, 313, 317, 841, 867, 901], "measure_a": [313, 317], "measure_b": [313, 317], "median": [183, 238, 313, 461, 609, 610, 788, 814, 873, 901, 991, 1178, 1286, 1306], "mediat": 1313, "medium": [36, 313], "megan": [230, 313, 842, 901], "melt": [280, 313, 867, 901], "member": [204, 313, 827, 901, 1082, 1286], "membership": [345, 504, 933, 1102], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 172, 192, 223, 247, 248, 257, 271, 299, 313, 583, 594, 628, 788, 809, 810, 876, 901, 1056, 1142, 1166, 1194, 1195, 1267, 1286], "memory_map": [135, 141, 146], "memory_resourc": 876, "merg": [35, 218, 219, 230, 313, 831, 832, 842, 901], "merge_sort": [313, 901], "messi": [647, 649, 1213, 1215], "met": 778, "meta": [400, 788], "metadata": [0, 145, 800], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 170, 179, 183, 184, 187, 192, 199, 203, 210, 216, 223, 234, 240, 246, 247, 248, 256, 278, 287, 294, 299, 305, 313, 322, 325, 326, 357, 387, 400, 433, 436, 450, 451, 459, 466, 468, 471, 473, 480, 496, 529, 543, 545, 560, 562, 564, 566, 567, 569, 571, 573, 574, 577, 578, 579, 582, 588, 591, 593, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 627, 641, 650, 662, 670, 671, 672, 673, 678, 684, 690, 698, 700, 705, 720, 750, 761, 780, 781, 783, 784, 788, 789, 790, 793, 794, 795, 796, 797, 800, 810, 814, 815, 817, 830, 847, 856, 865, 871, 876, 879, 884, 890, 901, 906, 909, 916, 945, 978, 991, 1028, 1031, 1046, 1047, 1056, 1057, 1066, 1068, 1075, 1094, 1127, 1141, 1142, 1153, 1154, 1164, 1165, 1180, 1193, 1207, 1216, 1228, 1244, 1250, 1269, 1278, 1280, 1282, 1286, 1287, 1290, 1292, 1293, 1294, 1296, 1300], "metric": 131, "micro": [432, 1027], "microsecond": [62, 64, 204, 216, 219, 245, 247, 248, 267, 283, 313, 427, 431, 439, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 731, 732, 733, 734, 774, 775, 776, 788, 827, 832, 846, 850, 901, 907, 1022, 1026, 1034, 1039, 1051, 1286, 1309], "microsoft": [36, 313], "mid_color": [36, 313], "midnight": 77, "midpoint": [183, 240, 305, 313, 591, 613, 614, 761, 788, 814, 847, 890, 901, 991, 1164, 1180, 1286], "might": [129, 130, 143, 165, 238, 271, 280, 313, 545, 700, 788, 859, 867, 901], "millennia": 1309, "millennium": 1309, "milli": [432, 1027], "millisecond": [204, 219, 245, 283, 313, 416, 422, 427, 431, 440, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 907, 1022, 1026, 1035, 1039, 1051, 1286, 1309], "milliseconds_diff": [439, 440, 442], "mimic": 718, "min": [36, 41, 45, 183, 194, 232, 238, 245, 313, 394, 461, 545, 583, 593, 603, 611, 612, 729, 732, 757, 766, 788, 814, 822, 850, 901, 905, 986, 991, 1059, 1165, 1179, 1286, 1304, 1306, 1309, 1316], "min_a": [245, 313, 603, 788, 850, 901], "min_col": [157, 159], "min_color": [36, 313], "min_elem": 1304, "min_horizont": [313, 756, 766], "min_period": [397, 452, 454, 455, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 764, 765, 788, 989, 1050, 1052, 1053, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1286], "min_siz": [158, 159, 161, 163, 1316], "min_valu": 1316, "mincol": 157, "minim": [303, 337, 344, 502, 628, 636, 788, 888, 925, 932, 1100, 1146, 1194, 1286], "minimum": [41, 45, 157, 158, 159, 161, 163, 197, 231, 232, 313, 452, 454, 455, 561, 576, 586, 593, 756, 757, 788, 843, 901, 1016, 1050, 1052, 1053, 1152, 1160, 1165, 1286, 1303, 1316], "minu": [427, 579, 788, 1022], "minut": [204, 219, 245, 283, 313, 416, 419, 421, 426, 427, 431, 432, 441, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 731, 732, 733, 734, 774, 775, 776, 788, 827, 832, 850, 901, 907, 1022, 1026, 1036, 1039, 1051, 1286, 1309], "minutes_diff": 441, "misc": 1301, "miscellan": 800, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 193, 199, 313, 365, 452, 454, 455, 460, 467, 489, 490, 536, 788, 821, 901, 1050, 1052, 1053, 1058, 1286], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 219, 271, 313, 767, 832, 860, 901, 907, 991, 1286], "mixin": 1, "mlnm": 420, "mm": [36, 313], "mn": 1308, "mno": [16, 20], "mnop": 1308, "mo": 734, "mocha": 907, "mod": [788, 1306], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 238, 260, 313, 648, 760, 763, 779, 788, 809, 810, 819, 901, 1214, 1286, 1295, 1296, 1313], "model": [275, 313], "modifi": [129, 130, 143, 165, 168, 192, 208, 215, 216, 285, 313, 339, 430, 447, 640, 647, 648, 651, 660, 661, 680, 682, 683, 788, 916, 1025, 1042, 1056, 1206, 1213, 1214, 1217, 1226, 1227, 1246, 1248, 1249, 1286], "modul": [87, 95, 134, 787, 907, 1316], "modulu": [562, 788], "moment": [41, 181, 313, 494, 633, 788, 1092, 1200, 1286], "mon": [313, 316, 1309], "mondai": [204, 313, 405, 444, 446, 716, 827, 901, 996, 1039, 1041], "monkei": [658, 659, 1224, 1225], "month": [204, 219, 245, 283, 313, 413, 424, 425, 427, 431, 433, 436, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 728, 729, 730, 731, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 1004, 1019, 1020, 1022, 1026, 1028, 1031, 1039, 1051, 1286, 1309], "month_nam": [433, 436], "monthbegin": [425, 1020], "monthend": [424, 1019], "moos": 907, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 170, 181, 183, 195, 215, 216, 223, 229, 234, 246, 247, 249, 260, 270, 271, 275, 278, 280, 299, 313, 317, 326, 363, 462, 466, 474, 494, 524, 537, 541, 544, 545, 582, 583, 624, 633, 648, 656, 674, 676, 677, 699, 710, 721, 737, 743, 746, 753, 755, 758, 759, 768, 778, 784, 788, 814, 823, 841, 860, 865, 867, 876, 901, 905, 907, 909, 951, 972, 991, 1069, 1070, 1092, 1122, 1135, 1142, 1187, 1200, 1214, 1222, 1240, 1242, 1243, 1265, 1267, 1272, 1286, 1301, 1302, 1311, 1314, 1315, 1316], "more_bi": [236, 259, 313, 636, 788, 859, 901], "more_column": [191, 279, 313, 456, 736, 788, 820, 866, 901, 907], "more_expr": [583, 714, 717, 718, 719, 788], "more_nam": [685, 784], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 271, 313, 375, 376, 555, 563, 584, 598, 667, 788, 962, 963, 1147, 1158, 1170, 1233, 1267, 1286, 1298, 1313], "mostli": [265, 313, 462, 788], "move": [18, 238, 248, 313, 405, 452, 453, 454, 455, 605, 607, 611, 618, 788, 996, 1050, 1051, 1052, 1053, 1176, 1177, 1179, 1183, 1286], "mr": 876, "mssql": [34, 313], "much": [223, 281, 299, 313, 397, 511, 545, 656, 657, 750, 788, 884, 989, 1109, 1142, 1222, 1223, 1286], "mul": 788, "multi": [8, 36, 129, 130, 275, 313, 456, 647, 788, 1213], "multi_fram": [36, 313], "multicolselector": 173, "multiindexselector": [173, 911], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 185, 190, 192, 195, 203, 204, 208, 217, 220, 236, 238, 248, 251, 254, 259, 282, 287, 292, 313, 382, 511, 544, 550, 555, 563, 564, 583, 597, 599, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 636, 685, 697, 714, 721, 738, 749, 751, 756, 762, 768, 771, 778, 784, 788, 809, 810, 816, 823, 826, 827, 833, 852, 855, 859, 868, 871, 877, 884, 901, 916, 946, 1049, 1056, 1109, 1129, 1147, 1169, 1171, 1202, 1286, 1299, 1304], "multipli": [544, 604, 605, 607, 609, 611, 613, 616, 618, 620, 689, 788, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1286], "multithread": [259, 313, 636, 714, 788, 859, 901, 946, 1129, 1202, 1286], "must": [36, 65, 117, 118, 129, 133, 141, 144, 145, 148, 149, 183, 191, 204, 219, 220, 230, 238, 245, 246, 313, 398, 536, 545, 590, 597, 598, 603, 606, 608, 610, 612, 614, 617, 619, 621, 662, 729, 730, 778, 788, 814, 820, 827, 832, 833, 837, 842, 850, 857, 876, 901, 905, 990, 991, 1163, 1169, 1170, 1228, 1286], "mutual": [246, 313], "my": [145, 149], "my_column": 884, "my_column_": [277, 313], "my_column_0": [277, 313], "my_column_1": [277, 313], "my_column_2": [277, 313], "my_custom_aggreg": 750, "my_fil": 135, "my_holidai": [405, 716, 996], "my_larger_than_ram_fil": [42, 43, 44, 45, 901], "my_long_fil": 143, "my_struct": 770, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 177, 192, 198, 204, 206, 216, 217, 222, 223, 247, 248, 249, 256, 261, 264, 267, 269, 284, 296, 298, 307, 313, 329, 357, 362, 370, 381, 382, 397, 401, 405, 407, 409, 415, 435, 447, 453, 459, 462, 470, 476, 498, 506, 512, 514, 524, 525, 529, 532, 534, 536, 538, 584, 587, 596, 616, 617, 620, 621, 624, 627, 633, 638, 652, 656, 657, 660, 666, 667, 669, 670, 675, 677, 692, 696, 697, 698, 702, 703, 705, 720, 722, 731, 732, 733, 734, 740, 742, 760, 763, 764, 765, 769, 773, 777, 779, 788, 807, 825, 827, 828, 836, 856, 861, 863, 869, 881, 883, 892, 901, 907, 945, 950, 957, 968, 977, 989, 992, 996, 998, 1000, 1006, 1030, 1042, 1051, 1056, 1057, 1065, 1072, 1096, 1104, 1110, 1112, 1122, 1123, 1127, 1132, 1134, 1158, 1182, 1184, 1187, 1193, 1200, 1204, 1218, 1222, 1223, 1226, 1232, 1233, 1241, 1243, 1258, 1264, 1271, 1275, 1276, 1286, 1298, 1299, 1305, 1308, 1309, 1311, 1313, 1316], "n0": [362, 536], "n00": [950, 1134], "n01": [950, 1134], "n02": [950, 1134], "n1": [362, 536], "n2": [1, 362], "n3": 1, "n_1": [462, 788], "n_2": [462, 788], "n_3": [462, 788], "n_bar": 1303, "n_bit": 1308, "n_byte": [370, 656, 657, 1308], "n_char": [656, 657, 1308], "n_chunk": [313, 916, 1056, 1166, 1286], "n_elem": 1304, "n_even": 907, "n_field_strategi": [536, 1134], "n_film": 1295, "n_foo_uniqu": 1303, "n_kilobyt": 370, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 217, 313, 901], "n_thread": [129, 130], "n_uniqu": [313, 329, 788, 1286], "na": [272, 313, 668, 1268, 1286], "naiv": [409, 410, 677, 1000, 1001, 1243], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 175, 176, 179, 180, 185, 186, 187, 191, 195, 196, 199, 200, 202, 203, 214, 215, 216, 218, 219, 220, 223, 225, 227, 229, 230, 232, 236, 238, 242, 246, 247, 248, 250, 251, 252, 259, 260, 263, 266, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 298, 313, 317, 324, 362, 366, 367, 369, 371, 382, 398, 433, 436, 456, 462, 482, 489, 490, 491, 492, 536, 545, 550, 552, 554, 556, 559, 583, 590, 600, 636, 648, 649, 660, 661, 662, 685, 687, 689, 697, 702, 706, 707, 708, 709, 710, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 726, 727, 736, 737, 742, 743, 746, 751, 752, 753, 754, 755, 756, 757, 758, 761, 764, 765, 766, 767, 769, 770, 771, 772, 773, 777, 778, 784, 788, 804, 806, 811, 812, 816, 817, 820, 823, 826, 831, 832, 833, 841, 842, 848, 851, 852, 853, 859, 860, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 877, 883, 901, 905, 906, 907, 913, 950, 977, 990, 1028, 1031, 1048, 1134, 1163, 1168, 1213, 1214, 1215, 1226, 1227, 1251, 1254, 1262, 1263, 1268, 1275, 1286, 1291, 1296, 1297, 1298, 1299, 1300, 1301, 1312, 1313, 1316], "name_gener": [277, 313], "named_agg": [292, 877], "named_bi": [203, 313, 826, 901], "named_expr": [251, 252, 287, 288, 313, 689, 766, 770, 852, 853, 871, 872, 901], "named_fram": [1299, 1313], "nameless": 121, "namespac": [1, 131, 312, 313, 316, 685, 767, 787, 800, 899, 900, 1286, 1291, 1316], "nan": [121, 159, 172, 193, 271, 272, 313, 403, 404, 450, 451, 460, 471, 473, 480, 489, 490, 491, 492, 496, 543, 546, 561, 575, 576, 577, 578, 604, 630, 698, 720, 788, 821, 901, 919, 923, 994, 995, 1058, 1085, 1086, 1151, 1152, 1175, 1197, 1267, 1268, 1286, 1316], "nan_as_nul": 172, "nan_max": [788, 1286], "nan_min": [788, 1286], "nan_to_nul": [121, 313, 901, 1286], "nana": 1308, "nanmax": [575, 576, 788, 1151, 1152, 1286], "nanosecond": [77, 204, 219, 245, 283, 313, 427, 431, 432, 442, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1027, 1037, 1039, 1051, 1286, 1309], "nansum": [604, 788, 1175, 1286], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 216, 223, 247, 248, 267, 271, 299, 313, 545, 750, 767, 788, 794, 860, 884, 901, 1142, 1267, 1286, 1290, 1313, 1316], "natur": [541, 788, 1139, 1286, 1302, 1307], "ndarrai": [120, 170, 195, 271, 313, 469, 625, 788, 823, 901, 909, 1064, 1188, 1189, 1267, 1286], "ndjson": [44, 901], "ne": [578, 788, 1154, 1286], "ne_miss": [195, 313, 788, 823, 901, 1047, 1286], "nearest": [49, 183, 219, 240, 305, 313, 386, 465, 480, 591, 613, 614, 761, 788, 814, 832, 847, 890, 901, 975, 991, 1063, 1075, 1164, 1180, 1286, 1307], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 271, 313, 901, 1267, 1286], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 204, 245, 248, 257, 313, 316, 536, 603, 628, 662, 678, 734, 760, 763, 779, 788, 827, 850, 901, 1194, 1228, 1244, 1286, 1291, 1316], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 206, 222, 245, 256, 258, 264, 290, 313, 357, 529, 530, 587, 588, 603, 627, 634, 652, 664, 675, 788, 850, 856, 858, 874, 875, 901, 907, 945, 1072, 1096, 1127, 1128, 1161, 1193, 1201, 1218, 1230, 1241, 1258, 1286], "negat": [580, 788, 1156, 1286], "neither": [123, 134, 140, 249, 313, 362, 536, 950, 1134], "nest": [46, 123, 126, 160, 161, 190, 313, 800, 1049, 1286, 1313, 1316], "nest_asyncio": 151, "nesting_level": 160, "net": [648, 1214], "netherland": [219, 313, 832, 901], "never": [33, 42, 131, 218, 219, 246, 313, 831, 832, 901], "new": [34, 35, 36, 143, 168, 173, 198, 208, 209, 223, 234, 235, 238, 242, 277, 279, 281, 282, 287, 288, 313, 324, 409, 458, 468, 470, 480, 567, 568, 583, 597, 598, 602, 660, 661, 666, 667, 685, 687, 784, 788, 800, 825, 848, 866, 868, 871, 872, 884, 901, 911, 913, 1000, 1055, 1065, 1155, 1168, 1169, 1170, 1174, 1226, 1227, 1232, 1233, 1251, 1254, 1263, 1286, 1313, 1315], "new_column": [129, 130, 134, 143], "new_dat": 427, "new_df": [282, 313, 868, 901], "new_fil": [31, 33, 37, 38, 41, 313], "new_from_index": 1286, "new_id": [277, 313], "new_lf": [868, 901], "new_tabl": 1315, "new_valu": [724, 725, 738, 762], "new_york": 732, "newli": 47, "newlin": [40, 139, 147, 313], "next": [49, 204, 219, 245, 283, 313, 365, 405, 427, 431, 444, 593, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 996, 1022, 1026, 1039, 1165, 1286], "next_batch": 130, "next_pow2": 49, "nfruit": 675, "nl": [405, 716, 996], "nnel_id": 123, "no1": 907, "no_default": [199, 313, 597, 598, 662, 788, 1169, 1170, 1228, 1286], "no_optim": [42, 43, 44, 45, 53, 54, 809, 810, 837, 846, 901], "nodataerror": [129, 130, 134, 140, 143], "nodd": [647, 1213], "node": [805, 809, 829, 837, 841, 846, 848, 901], "nodefault": [199, 313, 597, 598, 662, 788, 1169, 1170, 1228, 1286], "non": [4, 5, 33, 35, 36, 42, 47, 62, 63, 121, 150, 175, 182, 217, 229, 245, 251, 252, 256, 276, 277, 280, 282, 287, 288, 313, 381, 382, 387, 391, 392, 405, 430, 482, 536, 544, 545, 583, 584, 597, 598, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 642, 648, 656, 662, 682, 684, 689, 696, 697, 707, 709, 717, 718, 719, 721, 723, 727, 734, 752, 754, 757, 764, 765, 766, 770, 772, 788, 804, 813, 841, 850, 852, 853, 856, 864, 867, 868, 871, 872, 901, 905, 907, 968, 978, 983, 984, 991, 996, 1025, 1077, 1134, 1142, 1158, 1169, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1193, 1208, 1214, 1222, 1248, 1250, 1267, 1271, 1286, 1305, 1313], "non_exist": [430, 1025], "non_numer": [33, 42, 313, 901], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 54, 56, 59, 62, 63, 64, 65, 72, 76, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 170, 171, 177, 182, 183, 187, 193, 194, 195, 197, 199, 202, 204, 205, 210, 214, 218, 219, 221, 223, 226, 229, 234, 235, 238, 245, 246, 249, 253, 256, 258, 259, 265, 266, 268, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 294, 298, 313, 325, 327, 328, 340, 341, 342, 349, 350, 362, 365, 387, 391, 392, 393, 396, 398, 403, 404, 412, 427, 430, 451, 452, 453, 454, 455, 456, 459, 460, 461, 467, 474, 475, 477, 480, 481, 482, 489, 490, 491, 492, 497, 499, 500, 507, 513, 515, 517, 524, 525, 526, 527, 528, 530, 536, 544, 545, 554, 557, 558, 560, 565, 578, 579, 580, 581, 583, 584, 590, 593, 594, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 627, 628, 629, 630, 634, 635, 639, 640, 642, 644, 645, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 679, 681, 684, 685, 686, 687, 688, 695, 702, 707, 708, 709, 711, 717, 718, 719, 721, 723, 727, 729, 730, 731, 732, 733, 734, 736, 737, 744, 745, 746, 747, 748, 749, 750, 752, 754, 757, 763, 764, 765, 770, 772, 774, 775, 776, 778, 788, 807, 808, 810, 813, 814, 817, 819, 821, 822, 823, 827, 830, 831, 832, 835, 837, 841, 844, 850, 854, 856, 857, 858, 859, 865, 866, 867, 868, 873, 876, 879, 883, 884, 893, 894, 901, 905, 906, 907, 909, 910, 914, 915, 917, 924, 925, 929, 930, 937, 938, 950, 959, 964, 967, 977, 978, 983, 984, 990, 991, 993, 994, 995, 1003, 1010, 1011, 1012, 1016, 1025, 1045, 1047, 1050, 1051, 1052, 1053, 1057, 1058, 1059, 1061, 1069, 1071, 1073, 1075, 1076, 1077, 1087, 1088, 1091, 1092, 1093, 1095, 1097, 1098, 1101, 1105, 1111, 1113, 1115, 1122, 1123, 1124, 1125, 1126, 1128, 1134, 1142, 1143, 1144, 1145, 1146, 1154, 1157, 1163, 1164, 1165, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1193, 1196, 1197, 1200, 1201, 1204, 1205, 1206, 1208, 1210, 1211, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 1245, 1247, 1250, 1253, 1261, 1263, 1264, 1265, 1267, 1268, 1269, 1275, 1276, 1286, 1295, 1297, 1298, 1299, 1301, 1304, 1305, 1309, 1313], "nonexist": [430, 1025], "nor": [134, 140, 249, 313], "normal": [35, 126, 204, 313, 449, 494, 633, 702, 788, 827, 901, 1045, 1092, 1200, 1275, 1286], "normalised_scor": 131, "norowsreturnederror": [246, 313], "not_": [287, 313, 788, 871, 901, 907, 1286], "not_c": [287, 313, 871, 901], "notabl": 131, "notat": [11, 36, 313], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 172, 179, 181, 183, 184, 193, 195, 204, 205, 214, 215, 216, 218, 219, 223, 234, 237, 238, 242, 245, 246, 247, 248, 253, 256, 260, 267, 270, 272, 275, 277, 278, 280, 282, 283, 287, 289, 290, 313, 357, 387, 395, 396, 400, 403, 404, 410, 424, 425, 427, 431, 444, 453, 460, 466, 468, 475, 482, 489, 490, 508, 511, 529, 536, 545, 557, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 597, 598, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 627, 629, 633, 639, 640, 641, 646, 647, 648, 649, 650, 651, 652, 656, 657, 660, 661, 662, 664, 669, 670, 671, 674, 675, 682, 684, 685, 691, 698, 707, 709, 716, 724, 729, 730, 732, 733, 734, 738, 748, 760, 762, 763, 767, 775, 776, 778, 779, 784, 788, 799, 810, 814, 815, 821, 823, 827, 831, 832, 848, 850, 854, 856, 857, 859, 860, 865, 867, 868, 871, 874, 875, 901, 907, 945, 978, 987, 988, 991, 994, 995, 1001, 1019, 1020, 1022, 1026, 1039, 1051, 1058, 1071, 1077, 1106, 1109, 1127, 1142, 1169, 1170, 1174, 1181, 1188, 1190, 1193, 1195, 1200, 1205, 1206, 1207, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1223, 1226, 1227, 1228, 1230, 1235, 1236, 1237, 1240, 1241, 1248, 1250, 1257, 1268, 1270, 1286, 1295, 1296, 1300, 1301, 1311, 1313], "noth": [20, 647, 655, 1213, 1221], "notic": [131, 195, 313, 823, 901, 1286], "notimplementederror": 172, "now": [47, 134, 245, 271, 313, 850, 901, 1267, 1286], "np": [120, 170, 195, 271, 313, 469, 544, 625, 788, 823, 901, 909, 1064, 1080, 1083, 1085, 1086, 1188, 1189, 1286], "npt": [170, 909], "nr": [296, 307, 881, 892], "nth": [198, 313, 470, 667, 784, 788, 825, 901, 1065, 1233, 1286], "nthe": [647, 1213], "nthose": [647, 1213], "nu": 645, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 141, 143, 147, 148, 149, 156, 159, 163, 172, 175, 177, 182, 183, 187, 189, 194, 195, 197, 210, 218, 226, 227, 228, 235, 238, 240, 256, 259, 261, 262, 263, 266, 271, 272, 276, 279, 282, 284, 287, 294, 313, 325, 327, 328, 338, 341, 342, 349, 350, 357, 358, 365, 367, 381, 382, 383, 387, 391, 392, 393, 396, 401, 403, 404, 427, 430, 437, 438, 439, 440, 441, 442, 443, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 467, 474, 480, 481, 489, 490, 491, 492, 497, 499, 500, 506, 507, 510, 511, 513, 515, 516, 517, 525, 526, 527, 528, 529, 531, 536, 544, 545, 565, 578, 579, 580, 581, 584, 594, 598, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 627, 628, 630, 635, 636, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 666, 667, 668, 674, 675, 677, 679, 684, 685, 686, 687, 688, 695, 696, 697, 706, 707, 708, 709, 714, 717, 718, 719, 721, 723, 727, 731, 736, 747, 748, 752, 754, 757, 764, 765, 770, 772, 778, 788, 804, 807, 813, 814, 817, 822, 823, 830, 831, 844, 856, 859, 864, 866, 868, 871, 873, 879, 901, 907, 914, 915, 926, 929, 930, 937, 938, 945, 946, 954, 968, 969, 977, 978, 983, 984, 992, 994, 995, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1047, 1048, 1050, 1051, 1052, 1053, 1057, 1059, 1060, 1069, 1070, 1075, 1076, 1087, 1088, 1089, 1095, 1097, 1098, 1101, 1104, 1105, 1108, 1109, 1111, 1113, 1114, 1115, 1124, 1126, 1127, 1129, 1134, 1142, 1154, 1157, 1158, 1170, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1193, 1197, 1202, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1230, 1232, 1233, 1234, 1240, 1241, 1243, 1245, 1250, 1253, 1264, 1267, 1268, 1269, 1271, 1286, 1298, 1302, 1304, 1305, 1309, 1311, 1313, 1314, 1316], "null_behavior": [401, 506, 788, 992, 1104, 1286], "null_count": [41, 45, 183, 187, 313, 397, 788, 814, 901, 989, 991, 1286], "null_equ": [189, 313, 1048, 1286], "null_on_oob": [349, 511, 513, 937, 1109, 1111], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 313, 901], "nullabl": [35, 313], "nullbehavior": [401, 506, 788, 992, 1104, 1286], "nullif": 1306, "nulls_last": [259, 313, 338, 358, 531, 635, 636, 714, 788, 859, 901, 926, 946, 1089, 1129, 1202, 1286], "num": [13, 36, 274, 313, 482, 788, 1077, 1286], "num_row": 172, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 175, 177, 182, 190, 191, 193, 194, 202, 206, 207, 216, 217, 222, 233, 234, 245, 249, 256, 261, 264, 276, 281, 284, 286, 294, 296, 298, 307, 313, 339, 355, 357, 362, 365, 373, 374, 375, 376, 378, 379, 381, 382, 391, 397, 398, 401, 405, 408, 416, 418, 420, 422, 423, 432, 445, 446, 448, 452, 453, 454, 455, 459, 460, 461, 467, 476, 489, 490, 497, 498, 506, 514, 517, 522, 524, 529, 532, 534, 536, 538, 583, 587, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 638, 652, 654, 656, 657, 660, 664, 666, 667, 675, 678, 692, 696, 697, 703, 716, 720, 721, 722, 734, 742, 747, 764, 765, 769, 773, 777, 788, 804, 807, 813, 820, 821, 822, 828, 836, 846, 856, 861, 863, 864, 869, 870, 879, 881, 883, 892, 901, 906, 943, 945, 950, 960, 961, 962, 963, 965, 966, 968, 977, 983, 989, 990, 992, 996, 999, 1007, 1009, 1014, 1017, 1018, 1027, 1040, 1041, 1043, 1049, 1050, 1051, 1052, 1053, 1057, 1058, 1059, 1072, 1095, 1096, 1104, 1112, 1115, 1120, 1122, 1127, 1132, 1134, 1148, 1149, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1193, 1196, 1204, 1218, 1220, 1222, 1223, 1226, 1230, 1232, 1233, 1241, 1244, 1258, 1271, 1276, 1286, 1302, 1307, 1316], "number_of_two": [346, 505], "numbers_decim": 678, "numer": [10, 16, 33, 36, 42, 133, 144, 176, 185, 219, 271, 272, 280, 281, 313, 322, 383, 387, 466, 482, 541, 562, 564, 588, 596, 628, 630, 649, 684, 690, 698, 788, 800, 806, 816, 832, 867, 901, 907, 969, 978, 991, 1077, 1194, 1197, 1215, 1250, 1267, 1286, 1307, 1316], "numeric_dtyp": 1316, "numericliter": [387, 788, 978, 1286], "numpi": [90, 120, 151, 170, 181, 216, 247, 248, 267, 271, 272, 313, 544, 575, 576, 604, 788, 901, 909, 1080, 1083, 1085, 1086, 1151, 1152, 1175, 1267, 1268, 1286], "nworld": 669, "o": [135, 146, 370, 381, 382, 397, 646, 696, 697, 788, 957, 968, 989, 1212, 1235, 1271, 1286, 1299], "oauth": 145, "obj": 907, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 171, 172, 179, 184, 203, 204, 219, 221, 236, 245, 248, 253, 260, 270, 271, 272, 313, 400, 557, 729, 730, 732, 733, 748, 767, 775, 776, 788, 800, 809, 815, 827, 832, 835, 850, 860, 898, 901, 907, 910, 1261, 1286, 1296, 1298, 1301, 1313, 1315], "observ": [398, 452, 453, 454, 455, 590, 788, 990, 1050, 1051, 1052, 1053, 1163, 1286], "obtain": 536, "obvious": 687, "occur": [36, 53, 54, 91, 100, 106, 220, 313, 346, 505, 563, 593, 788, 809, 810, 819, 833, 846, 857, 901, 934, 1103, 1147, 1165, 1267, 1286], "occurr": [477, 485, 488, 702, 788, 1073, 1081, 1084, 1275, 1286], "oct": 1308, "octet_length": 1306, "octob": 1308, "od": [140, 800], "odbc": [34, 131, 313], "odd": 647, "odi": 650, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 405, 716, 809, 810, 819, 831, 832, 837, 846, 901, 996], "offer": [237, 313, 587, 788, 845, 901, 1309, 1313], "offic": [36, 313], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 198, 204, 245, 258, 289, 290, 313, 405, 406, 414, 424, 425, 427, 431, 444, 470, 512, 530, 603, 634, 664, 677, 788, 825, 827, 850, 858, 874, 875, 901, 996, 997, 1005, 1019, 1020, 1022, 1026, 1039, 1065, 1110, 1128, 1201, 1230, 1243, 1286, 1312], "offset_bi": 734, "often": [132, 168, 204, 245, 313, 346, 505, 596, 603, 788, 827, 850, 901, 934, 1103, 1301, 1313], "ok": 536, "old": [35, 242, 313, 597, 598, 788, 848, 901, 1169, 1170, 1286], "old_tabl": 1315, "older": [41, 45, 313, 901], "oldw": 670, "omit": [27, 119, 123, 134, 140, 157, 168, 234, 248, 270, 275, 313, 729, 732, 744, 745, 775, 776, 907, 1314], "onc": [129, 130, 165, 223, 247, 249, 292, 313, 524, 544, 545, 624, 672, 673, 788, 805, 877, 901, 1122, 1142, 1187, 1238, 1239, 1286, 1299], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 176, 184, 194, 195, 202, 203, 204, 216, 220, 221, 229, 238, 245, 246, 247, 253, 254, 256, 271, 274, 280, 293, 313, 323, 357, 398, 400, 461, 462, 466, 469, 472, 474, 529, 536, 541, 557, 566, 567, 569, 571, 573, 574, 583, 602, 603, 627, 635, 647, 648, 649, 662, 685, 729, 732, 750, 768, 778, 784, 788, 806, 815, 822, 823, 826, 827, 833, 841, 850, 854, 855, 856, 867, 873, 878, 901, 916, 945, 950, 990, 1059, 1069, 1070, 1127, 1134, 1139, 1163, 1174, 1193, 1213, 1214, 1215, 1228, 1251, 1267, 1286, 1301, 1302, 1304, 1307, 1315], "one_to_mani": [218, 313, 831, 901], "one_to_on": [218, 313, 831, 901], "oneormoredatatyp": [36, 157, 313], "ones": 907, "onf": [664, 1230], "onli": [1, 5, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 187, 192, 204, 205, 216, 219, 220, 223, 238, 245, 247, 248, 267, 269, 270, 271, 282, 283, 299, 313, 323, 325, 327, 339, 386, 387, 400, 405, 427, 434, 456, 465, 475, 544, 545, 551, 566, 567, 568, 569, 570, 571, 572, 573, 574, 583, 595, 641, 650, 662, 700, 716, 750, 788, 812, 815, 817, 818, 827, 832, 833, 850, 851, 868, 870, 884, 901, 905, 907, 914, 915, 916, 975, 978, 996, 1022, 1056, 1063, 1071, 1142, 1167, 1207, 1216, 1228, 1261, 1264, 1267, 1286, 1295, 1298, 1313, 1314, 1316], "onlin": [192, 313, 1056, 1286], "ont": [650, 1216], "onto": 159, "oof": [663, 1229, 1304, 1308], "op": [20, 129, 130, 163, 242, 313, 551, 596, 788, 835, 848, 901, 1286], "opaqu": 884, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 184, 313, 400, 788, 815, 901], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 178, 192, 195, 197, 203, 209, 221, 223, 230, 234, 236, 237, 238, 241, 243, 245, 248, 249, 254, 256, 265, 271, 272, 277, 280, 281, 291, 292, 313, 322, 323, 326, 357, 392, 393, 394, 395, 396, 397, 450, 451, 466, 468, 471, 473, 496, 524, 525, 526, 527, 528, 529, 536, 543, 559, 562, 564, 565, 566, 567, 569, 571, 573, 574, 577, 578, 579, 582, 583, 588, 595, 624, 627, 690, 698, 705, 706, 708, 718, 719, 723, 735, 767, 778, 788, 800, 808, 812, 814, 818, 823, 826, 831, 841, 842, 851, 855, 856, 860, 867, 870, 877, 901, 905, 945, 979, 984, 985, 986, 987, 988, 989, 1046, 1047, 1056, 1066, 1068, 1094, 1122, 1123, 1124, 1125, 1126, 1127, 1141, 1153, 1154, 1167, 1187, 1193, 1261, 1266, 1267, 1268, 1286, 1312, 1313], "operand": [698, 788], "opp": 907, "oppos": 716, "opposit": [256, 313, 357, 529, 627, 788, 856, 901, 945, 1127, 1193, 1286], "opt": [275, 313], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 216, 221, 237, 241, 247, 278, 313, 805, 809, 810, 819, 837, 846, 857, 865, 874, 875, 884, 901, 974, 1188, 1286], "optimis": [131, 223, 248, 299, 313, 901, 1142, 1190, 1286, 1316], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 184, 199, 204, 214, 219, 229, 253, 260, 266, 277, 280, 282, 313, 400, 405, 494, 551, 557, 583, 604, 605, 607, 609, 611, 613, 616, 618, 620, 633, 641, 650, 662, 664, 702, 770, 778, 788, 800, 809, 815, 827, 831, 832, 841, 854, 860, 867, 868, 876, 901, 907, 996, 1092, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1200, 1207, 1216, 1228, 1230, 1263, 1275, 1286, 1304, 1308], "optional_memb": [486, 788, 1082, 1286], "or_": 788, "oracl": 132, "orang": [180, 294, 295, 297, 298, 300, 301, 303, 305, 306, 313, 382, 697, 788, 879, 880, 882, 883, 885, 886, 888, 890, 891, 1308], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 129, 131, 150, 152, 153, 154, 155, 175, 179, 180, 187, 188, 195, 203, 204, 218, 220, 236, 237, 238, 245, 247, 249, 250, 254, 259, 270, 271, 276, 278, 283, 313, 338, 358, 363, 381, 382, 403, 404, 462, 507, 524, 531, 537, 583, 588, 593, 603, 624, 625, 626, 635, 636, 663, 670, 671, 672, 673, 687, 696, 697, 699, 700, 702, 714, 767, 778, 788, 799, 804, 812, 817, 818, 823, 826, 827, 831, 833, 841, 850, 851, 855, 859, 860, 864, 865, 901, 906, 907, 926, 946, 951, 968, 973, 994, 995, 1060, 1089, 1105, 1122, 1129, 1135, 1161, 1165, 1172, 1187, 1189, 1191, 1202, 1229, 1254, 1271, 1272, 1273, 1275, 1286, 1295, 1298, 1304, 1312, 1313, 1316], "order_bi": [583, 788], "ordin": [428, 593, 788, 1023, 1165, 1286, 1314], "ordinal_dai": [413, 446], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 171, 172, 181, 313, 857, 901, 909, 910], "orient": [48, 50, 91, 120, 122, 234, 313, 901, 1295], "origin": [47, 129, 130, 143, 187, 195, 278, 313, 403, 404, 430, 431, 444, 462, 507, 545, 566, 583, 595, 596, 597, 598, 599, 601, 642, 647, 655, 712, 713, 788, 817, 823, 865, 901, 994, 995, 1025, 1026, 1039, 1060, 1105, 1169, 1170, 1171, 1173, 1208, 1213, 1221, 1286], "orld": 1236, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 148, 152, 153, 154, 155, 187, 189, 192, 195, 218, 219, 220, 229, 230, 238, 246, 248, 251, 252, 275, 280, 282, 285, 287, 288, 311, 313, 316, 322, 326, 328, 338, 339, 387, 402, 450, 451, 462, 466, 471, 473, 482, 486, 496, 503, 525, 526, 527, 528, 543, 549, 553, 562, 564, 577, 578, 582, 597, 598, 629, 636, 662, 689, 690, 695, 698, 705, 707, 709, 714, 717, 718, 719, 727, 734, 752, 754, 757, 766, 770, 772, 788, 800, 810, 817, 823, 831, 832, 833, 841, 842, 852, 853, 867, 868, 871, 872, 873, 901, 907, 916, 978, 993, 1046, 1047, 1048, 1056, 1066, 1068, 1082, 1094, 1101, 1123, 1124, 1125, 1126, 1141, 1153, 1154, 1169, 1170, 1269, 1277, 1285, 1286, 1291, 1301, 1313], "other_df": [218, 313], "other_lf": [831, 901], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 199, 223, 230, 248, 251, 270, 275, 299, 313, 362, 367, 387, 398, 452, 453, 454, 455, 536, 545, 554, 583, 587, 588, 590, 595, 630, 640, 643, 646, 651, 652, 657, 664, 675, 702, 706, 734, 737, 746, 750, 778, 788, 842, 852, 884, 901, 950, 954, 978, 990, 1050, 1051, 1052, 1053, 1134, 1142, 1161, 1163, 1167, 1188, 1190, 1197, 1206, 1209, 1212, 1217, 1218, 1223, 1230, 1241, 1275, 1286, 1305], "our": 173, "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 148, 151, 195, 245, 248, 313, 349, 367, 511, 513, 640, 643, 651, 778, 823, 850, 901, 937, 954, 1109, 1111, 1206, 1209, 1217, 1311], "outcom": [583, 788], "outer": [47, 55, 282, 313, 868, 901], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 175, 183, 216, 223, 227, 230, 236, 238, 247, 251, 253, 263, 276, 283, 287, 313, 325, 327, 350, 381, 382, 398, 515, 536, 544, 545, 554, 557, 567, 590, 597, 639, 653, 657, 696, 697, 702, 706, 707, 708, 709, 718, 719, 720, 749, 750, 788, 800, 804, 814, 819, 837, 841, 842, 852, 854, 864, 871, 884, 901, 914, 915, 938, 968, 990, 1113, 1142, 1163, 1205, 1219, 1223, 1271, 1275, 1286], "output_path": [857, 901], "outsid": [387, 788, 978, 1286], "over": [125, 129, 130, 131, 133, 134, 140, 143, 148, 159, 160, 175, 192, 215, 216, 217, 223, 246, 247, 248, 260, 276, 277, 291, 299, 313, 317, 381, 382, 397, 400, 453, 461, 544, 545, 554, 556, 557, 558, 559, 567, 568, 593, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 696, 697, 724, 725, 738, 749, 750, 762, 767, 788, 804, 809, 860, 864, 876, 884, 898, 901, 907, 968, 989, 1051, 1056, 1142, 1176, 1177, 1179, 1183, 1271, 1286, 1313], "overflow": [176, 313, 383, 395, 396, 679, 691, 788, 806, 901, 969, 987, 988, 1245, 1257, 1286], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [642, 648, 650, 1208, 1214, 1216], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 313, 901], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 313, 901], "overview": [313, 788, 800, 901, 1286, 1312, 1316], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 172, 282, 313, 324, 689, 788, 868, 901], "overwrite_schema": [35, 313], "ow": 669, "own": [778, 1267, 1286, 1316], "p": [49, 237, 313, 587, 770, 788, 845, 901, 907, 1217, 1218, 1299], "pa": [35, 116, 149, 313, 767], "pa_tabl": 767, "pacif": [406, 997], "pack": [234, 313], "packag": [131, 313, 317, 405, 716, 905, 996], "pad": [658, 659, 684, 1224, 1225, 1250], "pad_end": [659, 1225], "pad_start": [658, 684, 1224, 1250], "page": [41, 45, 135, 141, 146, 148, 313, 788, 800, 901, 1286, 1312], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 242, 313, 848, 901, 1316], "pairwis": [181, 313], "panda": [34, 117, 121, 126, 151, 195, 204, 272, 278, 280, 313, 424, 425, 695, 767, 788, 823, 827, 865, 867, 901, 1019, 1020, 1268, 1269, 1286, 1296, 1298, 1313], "pandas_df": 1313, "pane": [36, 313], "panic": 99, "pap": 1218, "papa": 652, "papai": [652, 1218], "papaya": [652, 664, 675, 1218, 1230, 1241], "parallel": [53, 55, 125, 132, 141, 148, 204, 219, 221, 237, 252, 288, 313, 397, 508, 702, 778, 788, 800, 827, 831, 832, 853, 872, 884, 901, 989, 1106, 1275, 1286], "parallelis": [223, 299, 313, 1142, 1286], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 246, 313, 901], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 176, 177, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 214, 216, 217, 218, 219, 220, 222, 223, 227, 229, 230, 233, 234, 236, 237, 238, 240, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 296, 298, 299, 305, 307, 313, 322, 324, 325, 326, 327, 328, 338, 345, 346, 349, 350, 357, 358, 362, 363, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 387, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 405, 407, 409, 410, 415, 427, 430, 431, 432, 433, 435, 436, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 480, 481, 482, 486, 494, 496, 498, 503, 504, 505, 506, 508, 511, 512, 513, 514, 515, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 543, 544, 545, 551, 557, 558, 562, 564, 567, 568, 569, 570, 571, 572, 577, 578, 582, 583, 584, 587, 588, 590, 591, 593, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 685, 687, 689, 690, 692, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 804, 806, 807, 809, 810, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 831, 832, 833, 836, 837, 841, 842, 845, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 881, 883, 884, 890, 892, 901, 905, 906, 907, 911, 913, 914, 915, 916, 926, 933, 934, 937, 938, 945, 946, 950, 951, 953, 954, 955, 956, 958, 968, 969, 977, 978, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 1000, 1001, 1006, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1039, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1064, 1065, 1071, 1072, 1073, 1075, 1076, 1077, 1089, 1092, 1096, 1101, 1102, 1103, 1104, 1106, 1109, 1110, 1111, 1112, 1113, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1133, 1134, 1135, 1142, 1154, 1158, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1196, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1250, 1251, 1254, 1258, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1271, 1272, 1275, 1276, 1277, 1286, 1295, 1296, 1297, 1298, 1299, 1301, 1305, 1308, 1313], "parameteris": 131, "parametr": 800, "paramount": [837, 901], "parent": [36, 197, 313], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 313, 800, 901], "parquetcompress": [41, 313], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 175, 203, 251, 252, 256, 259, 276, 287, 288, 292, 313, 382, 387, 482, 583, 597, 598, 636, 654, 662, 678, 679, 689, 697, 707, 709, 714, 717, 718, 719, 727, 740, 752, 754, 757, 766, 768, 770, 772, 778, 788, 804, 826, 852, 853, 856, 859, 864, 871, 872, 877, 901, 978, 1077, 1169, 1170, 1193, 1220, 1244, 1245, 1286, 1295], "parseerror": [679, 1245], "parser": [129, 134], "part": [116, 134, 173, 270, 275, 313, 583, 648, 666, 667, 788, 819, 846, 857, 873, 901, 911, 1214, 1232, 1233, 1309], "parti": [544, 788], "partial": [119, 129, 143, 313, 901], "particip": [36, 313], "particular": [129, 135, 137, 175, 190, 276, 313, 381, 382, 696, 697, 788, 804, 864, 901, 968, 1049, 1271, 1286], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 217, 236, 313, 583, 788], "partition_bi": [41, 130, 217, 313, 583, 788], "partition_chunk_size_byt": [41, 313], "partition_col": [41, 132, 313], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 313], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 175, 181, 185, 203, 204, 206, 219, 222, 236, 237, 238, 242, 245, 251, 256, 259, 264, 272, 275, 276, 283, 287, 292, 313, 357, 382, 405, 415, 427, 430, 459, 479, 529, 544, 545, 583, 587, 597, 598, 603, 627, 636, 662, 669, 670, 671, 697, 706, 714, 716, 740, 770, 778, 784, 788, 804, 816, 826, 827, 829, 832, 837, 845, 848, 850, 852, 856, 857, 859, 864, 871, 876, 877, 884, 901, 905, 906, 945, 996, 1006, 1025, 1057, 1072, 1096, 1127, 1142, 1169, 1170, 1193, 1228, 1235, 1236, 1237, 1258, 1268, 1286, 1299, 1313], "pass_nam": [545, 788], "pass_name_to_appli": [788, 905], "password": [129, 132, 135, 137], "past": [32, 313, 837, 901], "pat": [651, 1217], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 253, 313, 400, 557, 560, 626, 655, 788, 815, 854, 857, 901, 905, 1191, 1221, 1286, 1316], "pathlib": [31, 33, 37, 38, 41, 143, 313], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 216, 313, 552, 640, 641, 642, 645, 647, 648, 649, 650, 651, 660, 661, 662, 668, 884, 907, 1188, 1190, 1206, 1207, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1226, 1227, 1228, 1234, 1286, 1308], "paya": 675, "pct": 159, "pct_chang": [788, 1286], "pd": [117, 121, 695, 767, 788, 1268, 1269, 1286, 1296, 1313], "pd_df": 121, "pd_frame": 767, "pd_seri": 121, "pdsh": [125, 130], "pea": 652, "peak": [247, 313, 585, 586, 788, 1159, 1160, 1286], "peak_max": [788, 1286], "peak_min": [788, 1286], "pear": [652, 664, 675, 1218, 1230, 1241], "pearson": [181, 313, 494, 633, 720, 788, 1092, 1200, 1286], "penalti": [674, 676, 677, 1240, 1242, 1243], "per": [14, 33, 36, 42, 134, 157, 159, 175, 202, 234, 235, 238, 252, 259, 276, 288, 302, 304, 305, 313, 349, 382, 508, 511, 513, 544, 545, 566, 567, 569, 571, 573, 574, 636, 697, 702, 714, 788, 804, 853, 859, 864, 872, 887, 889, 890, 901, 905, 937, 1106, 1109, 1111, 1275, 1286], "percent": [584, 788, 1158, 1286], "percentag": [156, 159, 163, 584, 788, 1158, 1286], "percentil": [183, 313, 814, 901, 991, 1286], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 172, 195, 203, 204, 219, 220, 223, 241, 245, 247, 248, 271, 299, 313, 372, 377, 380, 466, 536, 544, 545, 583, 603, 641, 650, 656, 657, 662, 674, 676, 677, 788, 823, 827, 832, 833, 850, 859, 874, 875, 901, 959, 964, 967, 1142, 1207, 1216, 1222, 1223, 1228, 1240, 1242, 1243, 1267, 1286], "perhap": [277, 313], "period": [129, 130, 143, 204, 245, 313, 431, 444, 452, 454, 455, 584, 603, 729, 730, 732, 733, 775, 776, 788, 827, 850, 901, 1026, 1039, 1050, 1052, 1053, 1158, 1286], "persist": 1301, "phase": [34, 281, 313], "philadelphia": [660, 661], "phone": [682, 1248], "physic": [46, 59, 85, 129, 130, 219, 238, 313, 695, 788, 805, 831, 832, 901, 972, 1269, 1286], "pi": [10, 399, 788, 980, 982, 1198, 1259, 1286, 1306, 1310], "pick": [160, 778], "pickl": [400, 788, 815, 901], "pip": [405, 716, 996], "pipe": [313, 788, 901], "pipelin": [134, 275, 313], "pitfal": 101, "pivot": [281, 313, 907], "pivot_long": [280, 313, 867, 901], "pivot_wid": [238, 313], "pivotagg": [238, 313], "pixel": [36, 313], "pk": [449, 788, 1045, 1286], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 906, 907, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1316], "pl_frame": 767, "place": [10, 11, 33, 42, 186, 192, 208, 209, 238, 243, 248, 259, 285, 313, 317, 338, 350, 358, 515, 531, 635, 636, 714, 788, 859, 901, 916, 926, 938, 946, 1056, 1113, 1129, 1166, 1202, 1286], "placehold": 739, "plai": [12, 719], "plain": [819, 901], "plan": [219, 221, 313, 400, 788, 805, 809, 815, 819, 831, 832, 854, 857, 901, 1315], "plane": [712, 713], "platform": 151, "ple": 1308, "pleas": [121, 131, 132, 195, 204, 229, 313, 317, 453, 721, 734, 788, 823, 827, 841, 901, 1051, 1286], "plenti": 907, "plot": [313, 846, 857, 901, 1286], "plu": [398, 541, 788, 990, 1139, 1163, 1286, 1307], "plugin": [0, 788, 800], "plugin_path": 905, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 193, 204, 220, 221, 260, 270, 275, 281, 282, 313, 316, 317, 386, 397, 398, 403, 431, 432, 460, 465, 466, 477, 489, 490, 524, 545, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 764, 765, 788, 809, 810, 819, 821, 827, 833, 837, 848, 860, 868, 901, 973, 975, 989, 990, 994, 1026, 1027, 1058, 1063, 1073, 1122, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1265, 1270, 1286, 1291, 1313], "poison": [575, 576, 788, 1151, 1152, 1286], "pola": 313, "polar": [1, 313, 316, 317, 787, 788, 794, 800, 901, 905, 906, 907, 1286, 1290, 1291, 1312, 1313, 1315], "polars_df": 1313, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1313, "polars_verbos": [809, 901], "polarsdatafram": 172, "polarsdataset": [275, 313], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 176, 223, 270, 275, 313, 383, 456, 544, 545, 597, 598, 654, 736, 748, 749, 750, 760, 763, 779, 784, 788, 806, 901, 907, 969, 1142, 1169, 1170, 1220, 1286], "polarsintegertyp": [711, 744, 745], "polarstemporaltyp": [674, 1240], "polarstyp": 55, "pool": [14, 54, 165, 166, 810, 901], "poor": 131, "pop2": [219, 313, 832, 901], "popul": [219, 313, 832, 901], "port": [34, 129, 131, 132, 135, 137, 313], "portion": 1308, "pos_a": 1308, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 173, 185, 191, 203, 236, 251, 252, 256, 259, 279, 287, 288, 292, 313, 357, 452, 454, 455, 456, 529, 583, 588, 590, 627, 636, 649, 651, 660, 661, 679, 689, 712, 713, 714, 717, 718, 719, 736, 766, 770, 784, 788, 816, 820, 826, 852, 853, 856, 859, 866, 871, 872, 877, 901, 907, 945, 1050, 1052, 1053, 1127, 1161, 1163, 1193, 1215, 1245, 1286, 1314], "position": 1286, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 203, 216, 223, 247, 278, 299, 313, 542, 545, 554, 604, 667, 701, 788, 809, 826, 859, 865, 901, 1142, 1175, 1233, 1286], "post": 47, "postgresql": [34, 131, 132, 313, 583, 788, 1311], "potenti": [101, 103, 134, 143, 146, 147, 216, 246, 248, 313, 566, 812, 814, 818, 851, 870, 901, 905], "pow": [788, 1286, 1306], "pow_n": 49, "power": [768, 1161, 1286, 1307], "powersofn": 49, "pre": [536, 545, 590, 760, 763, 779, 788, 1163, 1286], "preced": [159, 907], "precis": [10, 11, 33, 36, 42, 63, 131, 216, 247, 248, 267, 270, 275, 313, 407, 678, 901, 907, 998, 1244], "predefin": [238, 313], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 195, 214, 220, 246, 313, 462, 704, 738, 778, 788, 809, 810, 819, 823, 833, 837, 846, 848, 857, 874, 875, 901, 1060, 1188, 1190, 1286], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 809, 810, 819, 837, 846, 857, 901], "predict": [238, 241, 283, 313], "prefer": [129, 130, 133, 134, 143, 164, 175, 192, 216, 223, 246, 247, 276, 299, 313, 381, 382, 456, 545, 696, 697, 788, 804, 864, 901, 968, 1056, 1142, 1271, 1286, 1296, 1316], "prefilt": 148, "prefix": [35, 129, 130, 143, 168, 313, 324, 371, 552, 567, 570, 571, 573, 574, 668, 671, 672, 684, 788, 907, 958, 1234, 1238, 1250], "prefix_": 570, "prefix_a": 570, "prefix_b": 570, "prefix_field": [568, 572], "presenc": [737, 746, 907], "present": [119, 159, 199, 313, 486, 670, 671, 788, 857, 901], "preserv": [187, 195, 203, 218, 220, 223, 271, 272, 313, 403, 404, 405, 424, 425, 462, 507, 583, 597, 630, 646, 788, 817, 823, 831, 833, 901, 994, 995, 996, 1060, 1105, 1169, 1197, 1212, 1268, 1286], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 628, 788, 901, 1194, 1286], "presum": [544, 788], "prev_pow2": 49, "prevent": [271, 313, 324, 395, 396, 566, 691, 788, 901, 987, 988, 1257, 1286], "preview": [202, 313], "previou": [49, 168, 313, 316, 405, 566, 567, 569, 571, 573, 574, 584, 687, 788, 996, 1158, 1286, 1291], "previous": [2, 3], "price": [313, 316, 1316], "primari": [134, 1313, 1316], "primarili": 1, "primit": [35, 313, 486, 788], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 188, 202, 203, 217, 221, 269, 291, 313, 479, 558, 729, 732, 788, 809, 829, 901, 907, 1082, 1264, 1286, 1316], "prior": [121, 313, 316, 1286, 1291], "prioriti": 160, "probabl": [449, 590, 788, 1045, 1163, 1286], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 247, 313, 809, 810, 901], "process_index": [270, 313], "produc": [2, 3, 159, 163, 218, 313, 346, 505, 554, 749, 831, 837, 901, 934, 1103], "product": [47, 181, 218, 313, 395, 402, 788, 831, 901, 987, 993, 1286], "profil": [162, 164, 809, 901], "programmat": [183, 313, 814, 901], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 635, 636, 788, 809, 810, 819, 837, 846, 848, 857, 901], "projection_pushdown": [42, 43, 44, 45, 53, 54, 809, 810, 819, 837, 846, 857, 901], "prompt": 123, "propag": [350, 451, 515, 575, 576, 578, 639, 653, 718, 719, 788, 938, 1047, 1113, 1151, 1152, 1154, 1205, 1219, 1286], "propagate_nan": 720, "proper": [220, 313, 833, 901], "properti": [36, 172, 179, 180, 188, 196, 207, 250, 255, 286, 290, 313, 316, 317, 811, 812, 818, 851, 870, 875, 901, 906, 907, 1044, 1062, 1150, 1192, 1286, 1291, 1316], "proport": [702, 788, 1275, 1286], "protocol": [35, 117, 132, 172, 313], "prototyp": 784, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 195, 199, 214, 260, 270, 313, 316, 367, 368, 456, 477, 536, 544, 545, 643, 644, 647, 654, 655, 670, 671, 672, 673, 740, 770, 788, 800, 809, 823, 860, 876, 898, 901, 954, 955, 1073, 1091, 1142, 1209, 1210, 1213, 1220, 1221, 1265, 1286, 1299, 1305, 1308, 1313, 1316], "prune": [141, 146, 148, 837, 901], "public": [132, 313, 788, 800, 901, 1286, 1312], "pulp": 1295, "pure": [36, 313, 551], "purpos": [565, 788, 901], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 809, 810, 819, 837, 846, 848, 857, 874, 875, 901, 1188, 1190, 1286], "put": [33, 42, 313, 317, 901], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 265, 271, 272, 313, 767, 800, 1261, 1267, 1268, 1286, 1296, 1298, 1313], "pyarrow_opt": [41, 133, 141, 144, 313], "pyarrow_t": 1313, "pycapsul": [171, 910], "pycapsuleinterfac": [171, 910], "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 313], "pyodbc_uri": [34, 313], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 172, 216, 223, 247, 248, 267, 299, 313, 400, 405, 409, 466, 544, 545, 649, 716, 729, 730, 732, 733, 775, 776, 778, 788, 794, 815, 884, 901, 906, 996, 1000, 1010, 1011, 1012, 1016, 1142, 1215, 1266, 1286, 1290, 1312], "pythondatatyp": [56, 72, 906], "pythonliter": [917, 959, 964, 967, 1061, 1093, 1143, 1144, 1145, 1146, 1188, 1286], "pytorch": [275, 313, 1270, 1286], "q": [248, 313, 770, 1286, 1291, 1299], "q1": [36, 313], "q2": [36, 313], "q3": [36, 313], "q4": [36, 313], "qcut": [398, 788, 990, 1286], "qhoo": 1316, "qmark": 131, "qqr": 907, "quad": [453, 788, 1051, 1286], "qualifi": [34, 313], "quantifi": [648, 1214], "quantil": [313, 590, 613, 614, 788, 901, 1163, 1180, 1286], "quarter": [204, 219, 245, 283, 313, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039, 1309], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 192, 221, 237, 260, 313, 544, 545, 655, 767, 788, 809, 810, 819, 846, 857, 860, 874, 875, 876, 884, 893, 901, 1056, 1142, 1221, 1286, 1295, 1296, 1298, 1302, 1312, 1314, 1315], "quick": [784, 991, 1286, 1316], "quit": [219, 313, 832, 901], "quot": [33, 34, 42, 129, 130, 132, 143, 313, 682, 901, 1248], "quote_char": [33, 42, 129, 130, 143, 313, 901], "quote_plu": 132, "quote_styl": [33, 42, 313, 901], "quotes_titl": 682, "quotient": 1307, "r": [129, 130, 143, 313, 587, 642, 646, 647, 648, 649, 660, 661, 788, 907, 1208, 1212, 1213, 1214, 1215, 1226, 1227, 1241, 1299, 1308], "r1": 55, "r2": 55, "r3": 55, "rab": [640, 663, 1206, 1229, 1304], "rad": 1310, "radian": [399, 712, 788, 1306], "radix": [679, 1245], "rai": [712, 713], "raini": [660, 661, 1226, 1227], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 141, 143, 148, 152, 154, 172, 199, 238, 246, 271, 313, 349, 367, 405, 430, 511, 513, 554, 588, 590, 598, 640, 643, 651, 674, 676, 677, 679, 681, 731, 748, 788, 876, 937, 954, 996, 1025, 1109, 1111, 1161, 1163, 1170, 1206, 1209, 1217, 1240, 1242, 1243, 1245, 1247, 1267, 1286], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 554, "raise_on_fail": 876, "raker": 126, "ram": [42, 43, 44, 45, 901], "ran": [788, 905], "random": [36, 37, 135, 150, 157, 205, 249, 313, 475, 524, 593, 624, 629, 702, 788, 800, 1071, 1122, 1165, 1187, 1196, 1275, 1286], "randomli": 158, "rang": [17, 36, 131, 132, 183, 190, 204, 217, 313, 329, 399, 405, 413, 423, 428, 429, 431, 444, 445, 480, 711, 716, 718, 728, 729, 730, 731, 732, 733, 744, 745, 774, 775, 776, 788, 814, 827, 901, 907, 991, 996, 1004, 1018, 1023, 1024, 1026, 1039, 1040, 1049, 1158, 1286, 1308], "rank": [338, 508, 714, 720, 735, 788, 926, 1106, 1286], "rankmethod": [593, 788, 1165, 1286], "rare": [406, 997], "rather": [219, 313, 468, 544, 558, 590, 602, 684, 788, 832, 901, 1163, 1174, 1250, 1286], "raw": 132, "raw_output": [857, 901], "re": [199, 204, 215, 278, 280, 313, 424, 425, 433, 436, 827, 865, 867, 901, 1019, 1020, 1028, 1031, 1313], "reach": [658, 659, 684, 1224, 1225, 1250], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 184, 192, 313, 400, 468, 778, 788, 815, 901, 1056, 1286], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 313], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 784, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 313, 901], "readi": 894, "readthedoc": [36, 313], "real": [648, 1214], "realli": [397, 641, 662, 788, 989, 1207, 1228, 1286], "realloc": [139, 143, 146, 147, 192, 313, 1056, 1286], "rearrang": [223, 313], "reason": [165, 183, 313, 536, 544, 788, 814, 901], "receiv": [47, 131, 143, 223, 237, 299, 313, 545, 587, 788, 845, 901, 1316], "recent": [152, 153, 154, 155, 271, 313, 584, 598, 788, 1158, 1170, 1267, 1286, 1298, 1313], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 192, 313, 788, 976, 1056, 1067, 1148, 1286], "recognis": [15, 16, 20, 907], "recommend": [36, 165, 183, 216, 221, 237, 313, 805, 814, 901, 907], "record": [33, 38, 42, 126, 137, 149, 313, 901], "record_batch": [217, 313], "recordbatch": [116, 217, 313, 767, 1296, 1298, 1313], "recurs": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "red": [46, 84, 85, 299, 702, 788, 884, 1275, 1286], "redempt": 1295, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 247, 300, 301, 303, 306, 313, 628, 725, 738, 788, 885, 886, 888, 891, 901, 1144, 1162, 1194, 1257, 1286], "reduct": [197, 313, 545, 788], "ref": [647, 649, 1213, 1215], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 184, 313, 317, 400, 433, 436, 593, 647, 660, 661, 674, 676, 677, 681, 788, 815, 901, 1028, 1031, 1165, 1226, 1227, 1240, 1242, 1243, 1247, 1286], "referenc": [36, 313, 544, 687, 788, 1296, 1313], "refin": 134, "reg": 126, "regard": [129, 720], "regardless": [121, 175, 203, 219, 276, 313, 382, 410, 655, 697, 778, 788, 804, 832, 864, 901, 1001, 1221], "regex": [456, 551, 552, 640, 642, 647, 648, 649, 651, 660, 661, 685, 736, 788, 907, 1206, 1208, 1213, 1214, 1215, 1217, 1226, 1227], "regexp_lik": 1306, "region": [36, 145, 313], "regist": [1, 48, 49, 50, 51, 162, 164, 260, 313, 788, 860, 901, 905, 1295, 1296, 1298, 1299, 1300, 1301, 1313, 1315], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1297, 1299, 1301, 1313], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1297, 1298, 1301], "register_plugin": 788, "register_plugin_funct": [788, 905], "register_series_namespac": [1, 48, 49, 50], "registr": [260, 313, 767, 800, 860, 901, 1301, 1313], "regrid": [480, 788], "regular": [124, 216, 246, 247, 283, 290, 313, 456, 640, 641, 642, 647, 648, 649, 650, 651, 660, 661, 662, 716, 736, 784, 788, 875, 901, 907, 1206, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1226, 1227, 1228, 1311], "reinterpret": [788, 1286], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 313, 427, 452, 454, 455, 702, 788, 1022, 1050, 1052, 1053, 1275, 1286], "relat": [131, 168, 660, 661, 907, 1226, 1227, 1302], "releas": [54, 545, 788, 810, 901, 1316], "release_year": 1295, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 187, 190, 195, 238, 313, 403, 404, 462, 507, 597, 666, 667, 788, 817, 823, 837, 901, 994, 995, 1049, 1060, 1105, 1169, 1232, 1233, 1286, 1301], "remaind": [667, 1233, 1307], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 172, 185, 268, 313, 456, 567, 669, 670, 671, 672, 673, 736, 788, 816, 901, 1235, 1236, 1237, 1238, 1239, 1262, 1286, 1315], "removes_pronoun": 662, "renam": [1, 119, 129, 130, 166, 203, 251, 252, 287, 288, 292, 294, 313, 324, 468, 559, 560, 566, 567, 568, 569, 571, 573, 574, 687, 689, 766, 770, 788, 826, 852, 853, 871, 872, 877, 879, 901, 913, 1217, 1254, 1263, 1286, 1313], "rename_field": [666, 667, 1232, 1233], "render": [857, 901], "render_as_str": 131, "reoconstruct": [248, 313], "repeat": [135, 146, 594, 596, 760, 779, 788], "repeat_bi": 788, "replac": [34, 35, 129, 130, 143, 193, 194, 243, 277, 280, 287, 288, 313, 316, 409, 430, 460, 544, 545, 598, 661, 662, 677, 788, 821, 867, 871, 872, 901, 1000, 1025, 1058, 1170, 1188, 1190, 1227, 1228, 1243, 1286, 1291, 1306], "replace_al": [598, 660, 788, 1169, 1170, 1226, 1286], "replace_column": 313, "replace_strict": [597, 788, 1169, 1286], "replace_time_zon": [406, 412, 414, 1002, 1003, 1029], "replace_with": [662, 1228], "replic": [695, 788, 1269, 1286], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 238, 260, 261, 270, 271, 284, 291, 313, 466, 489, 490, 532, 538, 544, 638, 652, 657, 664, 675, 703, 706, 720, 722, 734, 736, 748, 749, 750, 759, 764, 765, 769, 777, 784, 788, 860, 861, 869, 901, 907, 1188, 1204, 1218, 1223, 1230, 1241, 1267, 1276, 1286, 1313], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 253, 269, 313, 408, 413, 416, 418, 419, 420, 421, 422, 423, 426, 428, 429, 432, 445, 446, 448, 557, 695, 788, 819, 835, 854, 901, 972, 999, 1004, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1027, 1040, 1041, 1043, 1264, 1269, 1286], "requested_schema": [171, 910], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 181, 246, 270, 271, 272, 275, 313, 363, 452, 454, 455, 537, 545, 583, 628, 674, 676, 677, 699, 763, 788, 812, 818, 859, 870, 901, 951, 1048, 1050, 1052, 1053, 1135, 1194, 1240, 1242, 1243, 1267, 1268, 1272, 1286], "require_al": 907, "rerais": [54, 810, 901], "rerun": [192, 313, 1056, 1286], "resampl": [204, 313, 827, 901], "reset": [4, 168], "reset_index": [121, 204, 313, 827, 901], "reshap": [238, 271, 313, 509, 788, 1107, 1286], "resolv": [409, 811, 812, 818, 851, 870, 901], "resourc": [876, 905], "respect": [36, 313, 641, 650, 662, 907, 1207, 1216, 1228, 1270, 1286], "respons": [132, 230, 313, 842, 901], "rest": [682, 1248], "restor": [168, 313, 316, 1286, 1291], "restore_default": 168, "restrict": [30, 667, 1233], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 192, 195, 204, 205, 218, 219, 220, 234, 238, 245, 248, 253, 254, 256, 270, 271, 272, 283, 290, 292, 298, 313, 405, 431, 433, 436, 444, 452, 453, 454, 455, 459, 466, 475, 482, 494, 535, 536, 544, 545, 557, 583, 588, 590, 597, 598, 599, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 626, 627, 646, 665, 666, 677, 698, 702, 724, 725, 729, 731, 732, 733, 734, 748, 749, 760, 763, 764, 765, 767, 779, 788, 805, 809, 814, 823, 827, 831, 832, 833, 837, 846, 850, 854, 855, 856, 875, 877, 883, 894, 895, 901, 907, 916, 1026, 1028, 1031, 1039, 1050, 1052, 1053, 1056, 1057, 1071, 1077, 1092, 1133, 1142, 1161, 1163, 1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1191, 1193, 1212, 1231, 1232, 1243, 1267, 1268, 1275, 1286, 1296, 1302, 1313, 1314, 1316], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [199, 270, 313, 343, 344, 501, 502, 685, 759, 931, 932, 1099, 1100, 1251, 1265, 1286, 1302], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 165, 166, 170, 173, 175, 177, 180, 181, 182, 186, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 225, 227, 232, 233, 234, 236, 237, 238, 242, 245, 246, 247, 248, 249, 253, 260, 263, 264, 270, 271, 272, 275, 276, 277, 278, 283, 286, 287, 288, 294, 296, 298, 299, 302, 307, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 339, 343, 344, 345, 347, 349, 350, 361, 366, 367, 368, 369, 370, 371, 381, 382, 388, 389, 390, 391, 392, 398, 399, 405, 406, 408, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 453, 458, 466, 469, 470, 472, 476, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 498, 501, 502, 504, 509, 511, 513, 514, 515, 517, 524, 534, 535, 542, 544, 545, 555, 557, 558, 563, 587, 590, 592, 596, 597, 598, 599, 601, 602, 624, 625, 630, 631, 632, 639, 640, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 675, 679, 684, 692, 693, 694, 696, 697, 698, 700, 701, 702, 705, 706, 711, 712, 713, 714, 715, 716, 721, 723, 728, 729, 730, 731, 732, 733, 734, 737, 740, 742, 744, 745, 746, 747, 748, 749, 750, 760, 763, 766, 767, 770, 773, 774, 775, 776, 778, 779, 788, 804, 807, 809, 810, 812, 813, 814, 818, 819, 825, 827, 828, 831, 835, 836, 837, 845, 846, 848, 850, 854, 857, 863, 864, 865, 870, 871, 872, 879, 881, 883, 887, 892, 894, 901, 905, 906, 907, 909, 911, 914, 915, 916, 924, 925, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 949, 951, 953, 954, 955, 957, 968, 971, 973, 977, 983, 984, 990, 991, 996, 997, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1049, 1051, 1055, 1056, 1061, 1065, 1072, 1073, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1107, 1109, 1111, 1112, 1113, 1115, 1122, 1132, 1133, 1140, 1142, 1147, 1156, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1187, 1189, 1197, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1229, 1230, 1231, 1232, 1233, 1241, 1245, 1250, 1258, 1261, 1268, 1271, 1273, 1274, 1275, 1277, 1286, 1295, 1296, 1300, 1302, 1303, 1304, 1305, 1307, 1308, 1311, 1313, 1314, 1315, 1316], "return_as_str": [202, 313, 558], "return_dtyp": [36, 223, 313, 544, 545, 597, 598, 705, 749, 750, 788, 1142, 1169, 1170, 1286], "return_typ": [270, 275, 313], "returns_scalar": [544, 545, 750, 788, 905], "reus": [53, 54, 809, 810, 819, 846, 857, 901], "rev": [220, 313, 833, 901], "revers": [175, 190, 276, 313, 382, 392, 393, 394, 395, 396, 567, 569, 571, 697, 723, 788, 804, 864, 901, 984, 985, 986, 987, 988, 1286, 1304, 1306], "reverse_": 569, "reverse_a": 569, "reverse_b": 569, "revert": [7, 9, 10], "rhap": 650, "rhapsodi": 650, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 204, 218, 219, 245, 282, 313, 398, 452, 453, 454, 455, 482, 525, 526, 527, 528, 590, 603, 606, 608, 610, 612, 614, 617, 619, 621, 625, 633, 717, 729, 730, 732, 733, 775, 776, 788, 827, 831, 832, 850, 868, 901, 990, 1050, 1051, 1052, 1053, 1077, 1123, 1124, 1125, 1126, 1163, 1189, 1200, 1286, 1302, 1306], "right_on": [218, 219, 282, 313, 831, 832, 868, 901], "rightmost": [625, 788, 1189, 1286, 1308], "rld": [669, 671, 1237], "rle": [602, 788, 1174, 1286], "rle_id": [601, 788, 1286], "rle_id_a": [602, 788], "rle_id_ab": [602, 788], "rmm": 876, "rn": [129, 130, 143], "role": 132, "roll": [204, 313, 405, 424, 425, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 718, 764, 765, 788, 827, 901, 996, 1019, 1020, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1286], "rollback": [425, 1020], "rolled_forward": 405, "rollforward": [424, 1019], "rolling_map": [788, 1286], "rolling_max": [788, 1286], "rolling_max_bi": 788, "rolling_mean": [788, 1286], "rolling_mean_bi": 788, "rolling_median": [788, 1286], "rolling_median_bi": 788, "rolling_min": [788, 1286], "rolling_min_bi": 788, "rolling_quantil": [788, 1286], "rolling_quantile_bi": 788, "rolling_row_max": [606, 788], "rolling_row_mean": [608, 788], "rolling_row_median": [610, 788], "rolling_row_min": [612, 788], "rolling_row_quantil": [614, 788], "rolling_row_std": [617, 788], "rolling_row_sum": [619, 788], "rolling_row_var": [621, 788], "rolling_skew": [788, 1286], "rolling_std": [788, 1286], "rolling_std_bi": 788, "rolling_sum": [604, 788, 1175, 1286], "rolling_sum_bi": 788, "rolling_var": [788, 1286], "rolling_var_bi": 788, "rollinggroupbi": [245, 313], "rollinginterpolationmethod": [183, 240, 305, 313, 591, 613, 614, 761, 788, 814, 847, 890, 901, 991, 1164, 1180, 1286], "ronaldo": [647, 1213], "root": [133, 144, 385, 556, 566, 567, 569, 571, 573, 574, 637, 787, 788, 974, 1203, 1286, 1307], "round": [20, 36, 49, 123, 131, 313, 386, 390, 465, 623, 693, 788, 975, 1063, 1186, 1286, 1306], "round_sig_fig": [788, 1286], "round_str": 1026, "round_td": 1026, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 173, 175, 177, 187, 192, 195, 197, 198, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 229, 234, 238, 245, 248, 249, 258, 264, 267, 269, 270, 275, 276, 278, 280, 281, 282, 289, 290, 294, 296, 298, 299, 307, 313, 317, 338, 339, 347, 362, 382, 458, 466, 470, 476, 498, 509, 536, 583, 584, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 629, 634, 636, 646, 654, 692, 697, 711, 714, 719, 721, 738, 742, 744, 745, 747, 762, 764, 765, 773, 778, 788, 804, 807, 817, 823, 824, 825, 827, 828, 831, 832, 833, 834, 836, 837, 841, 858, 863, 864, 865, 867, 868, 874, 875, 879, 881, 883, 884, 892, 901, 911, 926, 935, 1055, 1056, 1065, 1072, 1096, 1107, 1158, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1201, 1212, 1220, 1258, 1286, 1295, 1302, 1304, 1314, 1316], "row_group": [141, 148], "row_group_s": [41, 45, 313, 901], "row_height": [36, 313], "row_index": [36, 313], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [289, 313, 874, 901], "row_tot": [36, 313], "rowname_col": [313, 317], "rows_by_kei": [216, 247, 313], "rowserror": [246, 313], "rowtotalsdefinit": [36, 313], "rpc": 131, "rstrip": 567, "rtol": [152, 153, 154, 155], "rtrim": 1306, "ru": 1308, "rule": [129, 141, 143, 148, 197, 313, 641, 662, 677, 1207, 1228, 1243], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 203, 221, 223, 252, 278, 288, 299, 313, 397, 508, 544, 545, 601, 602, 657, 766, 788, 809, 810, 819, 826, 837, 841, 846, 853, 857, 865, 872, 876, 901, 907, 989, 1106, 1142, 1173, 1174, 1223, 1286, 1313, 1316], "runtimeerror": [271, 313, 1267, 1286], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 223, 299, 313, 649, 901, 905, 1142, 1215, 1286], "s1": [46, 84, 85, 154, 155, 197, 313, 950, 1047, 1048, 1067, 1091, 1101, 1134, 1154, 1166, 1277, 1286], "s2": [1, 46, 84, 85, 154, 155, 197, 313, 950, 976, 993, 1047, 1048, 1067, 1082, 1091, 1101, 1134, 1148, 1154, 1166, 1277, 1286], "s3": [1, 35, 133, 144, 145, 148, 149, 313, 950, 1134, 1286], "s_bar": 1304, "s_dt": [1308, 1309], "s_dt1": 1308, "s_dt2": 1308, "s_foo": 1304, "s_from_str_repr": [1264, 1286], "s_head_5": 652, "s_head_n": 652, "s_tail_5": 675, "s_tail_n": 675, "s_tm": [1308, 1309], "safe": [595, 788, 1167, 1286], "sale": [583, 788], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 195, 203, 223, 238, 247, 248, 259, 278, 287, 288, 292, 299, 313, 321, 328, 361, 403, 404, 462, 466, 468, 469, 472, 535, 549, 553, 583, 597, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 629, 636, 646, 656, 687, 784, 788, 809, 810, 823, 826, 835, 837, 859, 865, 871, 872, 877, 901, 907, 912, 949, 994, 995, 1000, 1133, 1142, 1169, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1212, 1222, 1277, 1286, 1300, 1302, 1309], "samoa": [406, 997], "sampl": [129, 130, 299, 313, 629, 633, 788, 884, 1200, 1286, 1303], "sample_s": [129, 130], "sampled_from": 1316, "sandwich": [200, 313], "sat": [313, 316], "satisfi": [482, 788, 1077, 1286], "saturdai": [204, 313, 827, 901], "save": [2, 3, 6, 204, 219, 245, 283, 313, 406, 414, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 734, 775, 776, 784, 788, 800, 827, 832, 850, 901, 1005, 1022, 1026, 1039], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [173, 214, 223, 246, 313, 544, 625, 652, 657, 664, 675, 748, 750, 788, 905, 911, 1091, 1189, 1218, 1223, 1230, 1241, 1286], "scale": [28, 63, 190, 313, 370, 545, 587, 678, 788, 907, 1049, 1244, 1286], "scale_negative_even": [587, 788], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 313, 654, 901, 1220], "scan_csv": [42, 43, 44, 45, 129, 130, 901], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [313, 316, 1286], "scenario": 1286, "schedul": [54, 810, 901], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 177, 178, 179, 185, 188, 190, 217, 221, 223, 230, 234, 242, 271, 275, 313, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 412, 535, 536, 545, 554, 568, 570, 572, 654, 705, 770, 788, 800, 807, 808, 811, 812, 816, 818, 837, 842, 848, 870, 884, 901, 907, 979, 1220, 1286, 1295], "schema_mod": [35, 313], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 217, 271, 313, 901, 907], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 313, 901], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 313, 770, 837, 884, 901], "schindler": 1295, "scientif": [11, 33, 42, 313, 901], "scikit": [275, 313], "scipi": [494, 633, 788, 1092, 1200, 1286], "scope": [168, 799, 907, 1298, 1301, 1313], "score": [36, 238, 313], "script": [313, 316, 1286, 1291], "scroll": [36, 313], "sdiff": 527, "search": [219, 313, 536, 641, 650, 662, 832, 859, 901, 1207, 1216, 1228], "search_sort": [788, 1286], "searchsortedsid": [625, 788, 1189, 1286], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [660, 661], "sec": [1309, 1316], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 204, 219, 245, 283, 313, 416, 419, 421, 422, 426, 427, 431, 443, 444, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 660, 661, 674, 677, 731, 732, 733, 734, 774, 775, 776, 778, 788, 827, 832, 850, 901, 907, 1022, 1026, 1038, 1039, 1051, 1226, 1227, 1240, 1243, 1286, 1308, 1309, 1314, 1316], "second_part": [666, 667, 1232, 1233], "seconds_diff": 443, "secret": [145, 148], "section": [238, 313, 640, 647, 648, 651, 660, 661, 729, 730, 732, 733, 775, 776, 1206, 1213, 1214, 1217, 1226, 1227], "secur": [400, 788, 815, 901], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 170, 181, 195, 204, 218, 237, 238, 313, 317, 375, 376, 378, 379, 387, 461, 494, 544, 633, 640, 647, 648, 651, 652, 660, 661, 675, 729, 730, 732, 733, 762, 775, 776, 784, 788, 809, 810, 823, 827, 876, 901, 905, 907, 909, 962, 963, 965, 966, 972, 978, 1092, 1200, 1206, 1213, 1214, 1217, 1218, 1226, 1227, 1241, 1286, 1316], "seed": [150, 205, 249, 313, 475, 524, 593, 624, 629, 788, 1071, 1122, 1165, 1187, 1196, 1286], "seed_1": [205, 313, 475, 788, 1071, 1286], "seed_2": [205, 313, 475, 788, 1071, 1286], "seed_3": [205, 313, 475, 788, 1071, 1286], "seen": [365, 467, 788], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 173, 174, 214, 215, 219, 223, 234, 237, 246, 252, 258, 260, 273, 279, 283, 290, 313, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 347, 352, 353, 354, 359, 360, 361, 362, 363, 364, 365, 366, 369, 371, 381, 382, 384, 385, 386, 388, 389, 390, 391, 397, 399, 401, 402, 403, 404, 407, 409, 410, 418, 424, 425, 427, 430, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 452, 454, 455, 456, 457, 458, 459, 463, 465, 467, 470, 474, 475, 476, 477, 478, 479, 480, 483, 484, 487, 493, 494, 495, 497, 498, 508, 509, 536, 539, 540, 541, 542, 544, 545, 546, 547, 548, 551, 561, 563, 565, 566, 568, 570, 572, 575, 576, 580, 581, 582, 583, 585, 586, 589, 591, 592, 593, 594, 595, 596, 599, 600, 601, 604, 615, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 646, 647, 648, 649, 650, 651, 653, 674, 685, 687, 688, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 706, 708, 710, 713, 714, 715, 718, 720, 721, 722, 723, 726, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 751, 753, 755, 756, 758, 759, 762, 763, 767, 768, 769, 770, 771, 773, 777, 784, 788, 803, 809, 812, 832, 845, 853, 858, 860, 866, 873, 875, 876, 901, 907, 911, 1025, 1064, 1106, 1188, 1190, 1201, 1221, 1240, 1286, 1295, 1296, 1297, 1298, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315], "select_from": [158, 161, 163], "select_seq": [313, 901], "selector": [0, 36, 176, 185, 187, 191, 229, 236, 238, 259, 268, 270, 275, 278, 280, 281, 313, 317, 456, 462, 551, 788, 800, 806, 816, 817, 820, 841, 859, 865, 867, 901], "selectortyp": [36, 313, 907], "self": [1, 48, 49, 50, 51, 53, 54, 260, 291, 313, 767, 788, 809, 810, 819, 846, 857, 860, 873, 901, 916, 960, 961, 962, 963, 965, 966, 969, 979, 984, 1056, 1060, 1074, 1140, 1142, 1155, 1159, 1160, 1166, 1169, 1170, 1188, 1190, 1191, 1202, 1274, 1277, 1286, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313], "semi": [126, 218, 313, 831, 901, 1302], "semigraph": 20, "sens": [129, 135, 137, 230, 283, 313, 583, 788, 842, 901], "sensit": [640, 648, 651, 660, 661, 1206, 1214, 1217, 1226, 1227], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 236, 238, 268, 277, 279, 313, 347, 350, 509, 515, 545, 646, 719, 724, 725, 788, 866, 901, 935, 938, 1107, 1113, 1212, 1256, 1262, 1286, 1308], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 175, 183, 191, 192, 218, 219, 229, 234, 236, 237, 238, 248, 259, 268, 270, 275, 276, 280, 281, 282, 283, 313, 362, 382, 398, 469, 486, 536, 544, 587, 590, 597, 598, 636, 662, 672, 673, 687, 697, 714, 724, 725, 738, 740, 749, 750, 759, 762, 768, 788, 804, 814, 820, 831, 832, 841, 845, 859, 864, 867, 868, 901, 907, 950, 990, 991, 1056, 1134, 1163, 1169, 1170, 1228, 1254, 1286], "sequenti": [53, 54, 252, 288, 313, 809, 810, 819, 846, 853, 857, 872, 901], "ser": [1002, 1003, 1029], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 154, 155, 159, 173, 186, 195, 197, 199, 201, 204, 205, 208, 209, 211, 213, 215, 225, 227, 232, 243, 245, 249, 263, 266, 269, 271, 273, 274, 293, 313, 328, 339, 362, 366, 384, 386, 430, 459, 462, 465, 469, 470, 479, 484, 486, 487, 489, 490, 491, 492, 503, 509, 511, 536, 542, 544, 545, 593, 594, 595, 596, 597, 598, 603, 604, 615, 626, 628, 652, 662, 674, 675, 676, 677, 681, 685, 696, 701, 711, 715, 724, 725, 729, 730, 732, 733, 738, 740, 744, 745, 748, 749, 750, 760, 762, 763, 766, 767, 770, 775, 776, 779, 788, 800, 823, 827, 850, 878, 901, 905, 1278, 1280, 1282, 1285, 1287, 1290, 1291, 1292, 1293, 1294, 1296, 1298, 1313, 1316], "serial": [39, 40, 184, 313, 400, 560, 788, 815, 901], "serializ": [788, 905], "serializationformat": [184, 253, 313, 400, 557, 788, 815, 854, 901], "seriesplot": [1286, 1291], "server": [34, 131, 132, 313], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 172, 180, 187, 196, 199, 203, 205, 216, 219, 227, 229, 247, 249, 251, 253, 258, 263, 268, 270, 271, 275, 277, 278, 280, 281, 282, 287, 313, 325, 327, 349, 350, 362, 373, 375, 376, 378, 379, 387, 398, 430, 447, 475, 486, 511, 513, 515, 524, 525, 526, 527, 528, 530, 536, 544, 545, 551, 557, 587, 590, 597, 598, 604, 605, 607, 609, 611, 613, 616, 618, 620, 624, 629, 633, 634, 639, 653, 654, 660, 661, 664, 669, 670, 671, 672, 673, 674, 676, 677, 681, 702, 706, 708, 711, 715, 719, 729, 730, 731, 732, 733, 734, 744, 745, 748, 760, 763, 764, 765, 770, 775, 776, 778, 779, 788, 800, 809, 810, 817, 819, 826, 831, 832, 837, 841, 852, 854, 858, 865, 867, 868, 871, 884, 901, 905, 914, 915, 937, 938, 950, 954, 960, 962, 963, 965, 966, 978, 990, 1025, 1042, 1062, 1071, 1082, 1089, 1109, 1111, 1113, 1122, 1123, 1124, 1125, 1126, 1128, 1134, 1142, 1163, 1169, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1187, 1188, 1189, 1196, 1200, 1201, 1205, 1219, 1220, 1226, 1227, 1230, 1235, 1236, 1237, 1240, 1242, 1243, 1247, 1267, 1275, 1286, 1312, 1316], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [251, 287, 313, 852, 871, 901], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 810, 901], "set_fmt_float": 30, "set_fmt_str_length": [641, 650, 662, 1207, 1228], "set_index": [204, 313, 827, 901], "set_legend": [36, 313], "set_sort": [245, 283, 313, 603, 788, 850, 901, 1286], "set_stat": 30, "set_streaming_chunk_s": [809, 901], "set_styl": [36, 313], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_tbl_width_char": 662, "set_thousands_separ": 9, "set_titl": [36, 313], "set_verbos": 168, "setosa": [313, 316], "setup": 1316, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 313, 901, 1316], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 249, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 563, 564, 565, 566, 567, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 803, 804, 806, 807, 809, 810, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 907, 911, 912, 913, 916, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 968, 969, 970, 972, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1147, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1256, 1258, 1259, 1260, 1262, 1263, 1264, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1286, 1295, 1296, 1297, 1298, 1300, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1313, 1314], "share": [152, 153, 154, 155, 190, 313, 1049, 1286], "shawshank": 1295, "sheet": [36, 134, 140, 313], "sheet1": [36, 313], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 313], "sheetnam": [134, 140], "shift": [204, 313, 365, 401, 467, 506, 584, 718, 788, 827, 901, 992, 1104, 1158, 1286], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 536, 744, 745], "shorthand": [313, 316, 1286, 1291], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 185, 216, 219, 223, 246, 247, 248, 259, 267, 268, 279, 299, 313, 323, 397, 400, 447, 453, 456, 489, 490, 508, 545, 557, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 625, 633, 636, 702, 714, 734, 736, 748, 750, 764, 765, 778, 784, 788, 809, 815, 816, 831, 832, 837, 854, 859, 866, 901, 907, 989, 1042, 1051, 1106, 1142, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1189, 1200, 1275, 1286, 1296], "show": [30, 36, 183, 187, 202, 221, 235, 313, 477, 788, 814, 817, 846, 857, 901, 1073, 1286, 1300, 1312], "show_graph": [221, 313, 901], "show_plot": [846, 901], "shrink": [257, 313, 628, 788, 1194, 1195, 1286], "shrink_dtyp": [788, 1286], "shrink_to_fit": [313, 1286], "shuffl": [150, 249, 275, 299, 313, 524, 624, 788, 884, 1122, 1187, 1286], "side": [36, 204, 245, 313, 482, 525, 526, 527, 528, 603, 606, 608, 610, 612, 614, 617, 619, 621, 625, 729, 730, 732, 733, 775, 776, 788, 827, 850, 901, 905, 1077, 1123, 1124, 1125, 1126, 1189, 1286], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 427, 595, 660, 661, 684, 788, 907, 1022, 1167, 1226, 1227, 1250, 1286, 1306], "sign_x": 1307, "signed_integ": 907, "signific": [148, 216, 223, 313, 375, 376, 378, 379, 545, 623, 788, 962, 963, 965, 966, 1142, 1186, 1286], "significantli": [134, 223, 299, 313, 1142, 1286, 1316], "silenc": 91, "silent": [679, 1245], "similar": [32, 41, 128, 165, 197, 219, 256, 278, 280, 313, 357, 433, 436, 529, 583, 627, 689, 747, 778, 788, 832, 856, 865, 867, 901, 945, 1028, 1031, 1127, 1193, 1286], "similarli": [36, 119, 204, 219, 245, 283, 313, 427, 431, 444, 603, 606, 608, 610, 612, 614, 617, 619, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 1022, 1026, 1039], "simpl": [36, 234, 313], "simpler": 907, "simpli": [143, 724, 738], "simplifi": [42, 43, 44, 45, 53, 54, 809, 810, 819, 846, 857, 901], "simplify_express": [42, 43, 44, 45, 53, 54, 809, 810, 819, 846, 857, 901], "sin": [788, 1286, 1306], "sinc": [35, 61, 62, 77, 129, 130, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 174, 229, 271, 289, 294, 313, 412, 415, 447, 468, 544, 560, 597, 639, 646, 704, 713, 740, 788, 803, 819, 841, 859, 873, 874, 879, 901, 1003, 1006, 1011, 1012, 1042, 1070, 1169, 1205, 1212, 1267, 1286], "sind": 1306, "sine": [332, 333, 544, 631, 632, 788, 920, 921, 1198, 1199, 1286, 1310], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 176, 185, 186, 187, 192, 199, 205, 214, 223, 236, 246, 248, 259, 270, 271, 313, 346, 387, 405, 427, 469, 472, 475, 505, 511, 544, 545, 594, 597, 599, 601, 636, 639, 652, 653, 657, 664, 675, 704, 714, 718, 719, 745, 749, 750, 768, 776, 784, 788, 806, 809, 810, 816, 817, 859, 901, 907, 934, 978, 996, 1022, 1056, 1071, 1103, 1109, 1166, 1169, 1171, 1173, 1205, 1218, 1219, 1223, 1230, 1241, 1261, 1267, 1286, 1297], "singlecolselector": 173, "singleindexselector": [173, 911], "sinh": [788, 1286], "sink_csv": 901, "sink_ipc": 901, "sink_ndjson": 901, "sink_parquet": 901, "site_id": [313, 317], "six": [625, 788], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 190, 281, 313, 599, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 711, 744, 745, 764, 765, 788, 809, 901, 1049, 1171, 1181, 1286, 1316], "sizeunit": [190, 313, 370, 957, 1049, 1286], "skew": [615, 788, 1181, 1286], "skewtest": [633, 788, 1200, 1286], "skip": [129, 130, 134, 141, 143, 148, 219, 281, 313, 832, 901, 1142, 1286, 1302], "skip_empty_lin": 134, "skip_nul": [545, 788, 1142, 1286], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [275, 313], "slice": [42, 43, 44, 45, 48, 53, 54, 190, 206, 217, 264, 313, 514, 534, 545, 554, 556, 604, 605, 607, 609, 611, 613, 616, 618, 620, 652, 675, 788, 809, 810, 819, 837, 846, 857, 901, 905, 1049, 1072, 1112, 1132, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1218, 1241, 1258, 1286, 1308], "slice_pushdown": [42, 43, 44, 45, 53, 54, 809, 810, 819, 837, 846, 857, 901], "slide": [397, 788, 989, 1286], "slightli": [42, 43, 44, 45, 87, 466, 788, 901, 1309], "slot": [397, 401, 506, 788, 989, 992, 1104, 1286], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 148, 313, 397, 545, 604, 654, 788, 884, 901, 989, 1175, 1220, 1286], "slower": [120, 122, 134, 203, 223, 236, 283, 299, 313, 545, 750, 788, 826, 884, 901, 1142, 1286], "small": [11, 132, 431, 901, 1316], "smaller": [41, 45, 190, 313, 901, 1049, 1286], "smallest": [175, 276, 313, 381, 382, 697, 788, 804, 864, 901, 968, 1286, 1303, 1305], "smooth": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "snappi": [31, 41, 45, 313, 901], "snippet": [817, 901], "snowflak": [131, 132], "snowi": [660, 661], "so": [1, 36, 132, 143, 165, 202, 204, 220, 238, 245, 313, 339, 349, 400, 466, 482, 513, 536, 545, 603, 660, 661, 662, 669, 670, 671, 685, 788, 815, 827, 833, 850, 901, 907, 937, 1111, 1226, 1227, 1228, 1235, 1236, 1237], "softwar": [32, 128, 313], "solut": [34, 313], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 172, 187, 238, 248, 271, 313, 317, 784, 817, 901, 1082, 1286, 1316], "some_account": [648, 1214], "some_t": 1315, "someth": [544, 788], "sometim": [734, 787], "somewher": [648, 1214], "sort": [47, 48, 175, 204, 219, 230, 237, 238, 245, 254, 276, 283, 296, 307, 313, 338, 381, 382, 453, 462, 545, 583, 603, 626, 636, 696, 697, 702, 704, 714, 729, 732, 750, 788, 804, 819, 827, 832, 842, 845, 846, 850, 855, 857, 864, 881, 892, 901, 907, 926, 968, 1051, 1089, 1191, 1271, 1272, 1275, 1286, 1302, 1314, 1316], "sort_bi": 788, "sort_column": [238, 313], "sorted_asc": [1062, 1286], "sorted_desc": [1062, 1286], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 788, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286, 1291, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1313], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 313], "source_cha": 123, "source_channel_id": 123, "space": [20, 204, 313, 827, 901, 907], "spam": [226, 313, 648, 1214], "span": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "spanner": [313, 317], "spark": [41, 313], "sparklin": [36, 313], "speak": [633, 788, 1200, 1286], "spearman": 720, "speci": [313, 316], "special": [34, 129, 130, 132, 143, 275, 290, 313, 604, 648, 660, 661, 788, 875, 901, 1142, 1175, 1214, 1226, 1227, 1286], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 176, 216, 218, 265, 270, 313, 433, 436, 674, 676, 677, 681, 702, 788, 806, 831, 901, 906, 907, 1028, 1031, 1240, 1242, 1243, 1247, 1261, 1265, 1275, 1286, 1302, 1313, 1316], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 141, 143, 148, 160, 175, 176, 190, 191, 194, 199, 203, 204, 218, 236, 238, 245, 246, 248, 251, 252, 256, 259, 270, 276, 279, 287, 288, 292, 313, 382, 387, 452, 454, 455, 456, 461, 583, 596, 598, 605, 607, 609, 611, 613, 616, 618, 620, 627, 636, 689, 697, 714, 717, 718, 719, 729, 730, 732, 733, 734, 736, 766, 770, 775, 776, 784, 788, 804, 806, 820, 822, 826, 827, 831, 850, 852, 853, 856, 859, 864, 866, 871, 872, 877, 901, 907, 978, 1049, 1050, 1052, 1053, 1059, 1170, 1193, 1265, 1286, 1302, 1315], "speed": [45, 254, 313, 545, 788, 855, 901, 1316], "speedup": [47, 148, 216, 223, 313, 545, 788, 1142, 1286], "split": [1, 36, 41, 48, 217, 313, 646, 666, 667, 1212, 1232, 1233], "split_by_column_dtyp": 50, "split_inclus": 665, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 238, 313], "spring": [660, 661], "sql": [0, 34, 106, 107, 115, 131, 132, 218, 256, 313, 357, 529, 627, 747, 768, 788, 800, 856, 901, 945, 1127, 1193, 1286, 1295, 1296, 1298, 1300, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1314, 1315], "sql_expr": 1313, "sqlalchemi": [34, 131, 151, 313], "sqlcontext": [260, 313, 767, 860, 901, 1312], "sqlite": [34, 131, 313], "sqrt": [545, 633, 689, 788, 1142, 1200, 1286, 1306], "sqrt_x": 1307, "squar": [1, 51, 299, 494, 599, 637, 788, 884, 1092, 1171, 1203, 1286, 1307], "st": 1316, "stabil": [205, 313, 475, 788, 1071, 1286], "stabl": [141, 170, 181, 183, 184, 205, 249, 253, 260, 313, 400, 475, 541, 557, 788, 814, 815, 841, 854, 859, 860, 901, 909, 1071, 1286], "stack": [55, 208, 285, 313, 1296], "stai": [544, 629, 788], "standalon": [157, 907], "standard": [10, 36, 261, 270, 275, 313, 418, 454, 616, 617, 633, 638, 655, 769, 784, 788, 861, 901, 1009, 1047, 1052, 1154, 1200, 1204, 1221, 1286, 1303, 1316], "standardis": [36, 313], "start": [36, 127, 129, 130, 132, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 198, 203, 204, 221, 258, 283, 289, 290, 313, 366, 369, 371, 405, 413, 423, 428, 431, 444, 445, 456, 470, 512, 530, 602, 606, 608, 610, 612, 614, 617, 619, 621, 634, 640, 645, 648, 659, 664, 668, 669, 671, 672, 675, 684, 711, 716, 724, 728, 729, 730, 731, 732, 733, 736, 738, 744, 745, 775, 776, 778, 784, 788, 825, 826, 827, 846, 858, 874, 875, 901, 907, 958, 996, 998, 1001, 1004, 1006, 1007, 1013, 1015, 1017, 1018, 1021, 1023, 1026, 1030, 1039, 1040, 1065, 1110, 1128, 1174, 1201, 1211, 1214, 1225, 1230, 1234, 1235, 1237, 1241, 1250, 1286, 1302, 1308, 1316], "start_bi": [204, 313, 827, 901], "startbi": [204, 313, 827, 901], "starts_a": 1308, "starts_with": [48, 238, 313, 317, 366, 369, 551, 640, 645, 767, 860, 901, 907, 1211, 1306], "starts_with_expr": 371, "starts_with_lit": 371, "startup": [270, 313], "stat": [494, 633, 788, 1092, 1200, 1286], "state": [4, 5, 99, 724, 800, 819, 846, 857, 901, 1313], "statement": [583, 778, 788, 1300, 1314], "static": [82, 884], "statist": [41, 45, 129, 130, 141, 146, 148, 183, 313, 454, 455, 494, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 633, 788, 814, 901, 991, 1052, 1053, 1092, 1181, 1200, 1286], "std": [183, 313, 616, 617, 788, 814, 901, 991, 1182, 1286], "std_dev": [36, 313], "stddev": 1306, "stddev_samp": 1303, "stdev": [36, 313, 1303], "stdev_samp": 1303, "stdout": [168, 202, 313, 558], "step": [281, 313, 466, 711, 744, 745, 788], "steve": [230, 313, 842, 901], "still": [131, 132], "stock": [313, 316], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 606, 608, 610, 612, 614, 617, 619, 621, 788, 998, 1001, 1006, 1007, 1013, 1015, 1017, 1021, 1026, 1030], "storag": [35, 129, 133, 135, 137, 144, 145, 313], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 313], "store": [35, 129, 145, 192, 216, 247, 313, 384, 601, 788, 970, 1056, 1173, 1286], "store_id": [583, 788], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 175, 176, 180, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 199, 200, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 219, 220, 222, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 240, 242, 243, 244, 245, 246, 247, 249, 253, 254, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313, 322, 323, 324, 345, 350, 362, 366, 367, 368, 369, 371, 382, 384, 392, 398, 400, 402, 410, 427, 430, 431, 433, 436, 444, 453, 456, 462, 464, 468, 469, 472, 479, 482, 503, 504, 513, 514, 515, 530, 534, 536, 545, 554, 556, 557, 558, 560, 567, 568, 569, 570, 571, 572, 573, 574, 580, 583, 587, 590, 596, 597, 598, 600, 602, 603, 606, 608, 610, 612, 614, 617, 619, 621, 628, 635, 636, 685, 686, 687, 688, 697, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 784, 788, 795, 804, 806, 809, 810, 812, 814, 815, 816, 817, 819, 820, 823, 826, 827, 829, 831, 832, 833, 841, 842, 845, 846, 848, 849, 850, 854, 855, 857, 858, 859, 860, 864, 865, 866, 867, 868, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 901, 905, 906, 907, 913, 933, 938, 950, 955, 969, 970, 990, 991, 1001, 1022, 1025, 1026, 1028, 1031, 1039, 1051, 1059, 1062, 1101, 1102, 1113, 1134, 1150, 1151, 1152, 1163, 1168, 1169, 1170, 1190, 1251, 1253, 1254, 1262, 1263, 1264, 1265, 1275, 1286, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1308, 1309, 1313, 1314, 1316], "str_date": 1308, "str_timestamp": 1308, "strategi": [33, 42, 47, 55, 129, 148, 156, 157, 158, 159, 160, 161, 163, 194, 204, 218, 219, 233, 282, 313, 461, 536, 545, 788, 822, 827, 831, 832, 868, 901, 1059, 1134, 1286], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 203, 218, 278, 313, 544, 788, 809, 810, 819, 826, 831, 837, 841, 846, 857, 859, 865, 901], "streamabl": [837, 841, 867, 901], "strftime": [87, 436, 1031, 1306, 1308], "strict": [118, 119, 122, 126, 176, 185, 242, 313, 367, 383, 640, 643, 651, 674, 676, 677, 679, 681, 788, 806, 816, 848, 901, 907, 954, 969, 1206, 1209, 1217, 1240, 1242, 1243, 1245, 1247, 1286], "strictli": [33, 42, 46, 85, 313, 901], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 175, 176, 179, 184, 188, 190, 197, 199, 202, 203, 204, 219, 236, 238, 245, 248, 250, 251, 252, 253, 259, 269, 270, 276, 277, 281, 283, 287, 288, 292, 313, 322, 345, 350, 367, 368, 369, 382, 400, 427, 431, 433, 436, 444, 453, 456, 464, 468, 482, 515, 557, 558, 583, 587, 597, 598, 603, 606, 608, 610, 612, 614, 617, 619, 621, 636, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 689, 697, 705, 707, 709, 714, 717, 718, 719, 727, 729, 730, 732, 733, 739, 752, 754, 757, 766, 770, 772, 775, 776, 778, 784, 788, 800, 804, 806, 811, 815, 818, 819, 826, 827, 832, 850, 851, 852, 853, 854, 859, 864, 871, 872, 877, 901, 906, 907, 938, 954, 955, 956, 971, 1022, 1026, 1028, 1031, 1039, 1051, 1077, 1113, 1169, 1170, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1253, 1264, 1265, 1286, 1295, 1296, 1304, 1306, 1309, 1312, 1316], "stringcach": [84, 85, 218, 313, 800, 971, 972], "stringio": [138, 139, 468, 788], "strings_hex": 644, "strip": [28, 669, 670, 671, 672, 673, 1235, 1236, 1237, 1308], "strip_chars_end": [671, 673], "strip_chars_start": [670, 672], "strip_prefix": [671, 673], "strip_suffix": [670, 672], "strongli": [36, 165, 223, 246, 299, 313, 545, 788, 1142, 1286], "strpo": 1306, "strpost": 1308, "strptime": [245, 313, 430, 603, 788, 850, 901, 1025, 1306], "struct": [8, 112, 123, 234, 251, 274, 279, 287, 313, 362, 398, 477, 536, 544, 545, 568, 570, 572, 590, 601, 602, 649, 654, 666, 667, 702, 724, 725, 727, 749, 788, 852, 866, 871, 884, 901, 950, 990, 1134, 1142, 1163, 1173, 1215, 1220, 1232, 1233, 1267, 1286], "struct_col": [685, 687, 688], "struct_seri": 884, "structarrai": [190, 313, 1049, 1286], "structfieldnotfounderror": 687, "structur": [36, 37, 38, 93, 96, 110, 126, 192, 237, 248, 265, 271, 313, 587, 788, 845, 901, 1056, 1261, 1286, 1313], "student": [238, 313], "style": [7, 20, 36, 131, 238, 313], "sub": [299, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 364, 515, 522, 788, 931, 932, 933, 936, 937, 938, 939, 940, 941, 942, 943, 947, 948, 952, 1113, 1120], "subarrai": [341, 342, 929, 930], "subclass": [1, 313], "subexpress": [53, 54, 809, 810, 819, 846, 857, 901], "subject": [41, 238, 313], "sublist": [349, 501, 502, 504, 506, 510, 511, 512, 513, 514, 515, 516, 525, 530, 534, 536, 937, 1082, 1099, 1100, 1102, 1104, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1123, 1128, 1132, 1134, 1286], "subplan": [53, 54, 809, 810, 819, 846, 857, 901], "subsequ": [36, 141, 148, 241, 272, 313, 536, 767, 778, 819, 901, 1268, 1286, 1301], "subset": [187, 234, 278, 313, 817, 865, 901], "substr": [366, 369, 371, 640, 645, 651, 660, 661, 664, 665, 666, 667, 668, 907, 953, 956, 958, 1206, 1211, 1217, 1226, 1227, 1230, 1231, 1232, 1233, 1234, 1306], "subtl": [36, 313], "subtli": [466, 788], "subtract": [494, 690, 788, 1092, 1286], "succe": [129, 130, 143], "success": [642, 648, 1208, 1214], "successfulli": [809, 901], "suffix": [218, 219, 220, 251, 287, 292, 313, 324, 369, 382, 489, 490, 491, 492, 550, 567, 569, 572, 573, 574, 600, 645, 670, 673, 697, 788, 831, 832, 833, 852, 871, 873, 877, 901, 907, 956, 1211, 1239], "suffix_field": [568, 570], "sugar": [282, 313, 597, 598, 662, 706, 708, 710, 721, 723, 726, 736, 741, 742, 743, 751, 753, 755, 756, 758, 760, 761, 766, 769, 771, 773, 777, 779, 788, 868, 901, 1169, 1170, 1203, 1228, 1286], "suitabl": [47, 55, 131, 157, 223, 313, 545, 625, 788, 1142, 1189, 1286], "sum": [36, 190, 197, 203, 204, 214, 238, 245, 263, 292, 313, 395, 396, 400, 449, 462, 536, 545, 554, 556, 557, 558, 559, 597, 598, 603, 618, 619, 704, 706, 724, 726, 727, 738, 750, 762, 772, 788, 809, 810, 815, 819, 826, 827, 844, 846, 850, 854, 857, 877, 901, 905, 907, 987, 988, 1045, 1049, 1183, 1286, 1295, 1302, 1304, 1306, 1313], "sum_": [633, 788, 1200, 1286], "sum_a": [245, 313, 603, 788, 850, 901], "sum_horizont": [47, 313, 771], "summari": [183, 313, 814, 901, 991, 1286, 1302], "summer": [660, 661], "sun": [313, 316, 674, 1240], "sundai": [204, 313, 405, 433, 436, 446, 716, 827, 901, 996, 1028, 1031, 1041], "sunni": [660, 661, 1226, 1227], "supercast": [197, 313], "supertyp": [55, 194, 271, 275, 313, 328, 718, 788, 822, 901, 905, 1286], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 195, 246, 270, 313, 462, 587, 788, 823, 901, 1265, 1286], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 216, 217, 218, 219, 247, 248, 258, 259, 267, 272, 275, 313, 453, 530, 583, 597, 598, 634, 636, 641, 650, 652, 660, 661, 662, 664, 675, 784, 788, 794, 809, 831, 832, 858, 859, 901, 907, 1051, 1128, 1169, 1170, 1201, 1207, 1216, 1218, 1226, 1227, 1228, 1230, 1241, 1268, 1270, 1286, 1290, 1304, 1308, 1309, 1311, 1312, 1313], "supportsinterchang": 117, "suppos": [173, 238, 313, 545, 788, 1142, 1286], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 241, 313, 788, 905], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 901, "swap": [848, 901], "swim": 719, "switch": [406, 809, 901, 997], "sy": 168, "sydnei": 731, "symbol": [32, 33, 42, 313, 788, 901], "symmetr": [527, 907, 1125], "symmetri": [812, 818, 851, 870, 901], "synchron": 895, "syntact": [282, 313, 597, 598, 662, 706, 708, 710, 721, 723, 726, 736, 741, 742, 743, 751, 753, 755, 756, 758, 760, 761, 766, 769, 771, 773, 777, 779, 788, 868, 901, 1169, 1170, 1203, 1228, 1286], "syntax": [36, 107, 195, 223, 234, 313, 640, 647, 648, 651, 660, 661, 744, 745, 784, 823, 857, 901, 1206, 1213, 1214, 1217, 1226, 1227, 1286, 1309, 1311], "system": [32, 129, 130, 313, 410, 809, 901, 1001], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 204, 219, 223, 237, 278, 281, 313, 397, 406, 414, 430, 449, 452, 454, 455, 508, 545, 583, 587, 647, 651, 660, 661, 671, 674, 677, 682, 778, 788, 827, 832, 845, 865, 901, 907, 989, 1025, 1045, 1050, 1052, 1053, 1106, 1142, 1213, 1217, 1226, 1227, 1236, 1237, 1240, 1243, 1248, 1286, 1298, 1299, 1308], "t_": [279, 313, 453, 788, 866, 901, 1051, 1286], "t_0": [245, 313, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 788, 850, 901, 1051, 1286], "t_1": [245, 313, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 788, 850, 901, 1051, 1286], "t_a": [279, 313, 866, 901], "t_b": [279, 313, 866, 901], "t_c": [279, 313, 866, 901], "t_d": [279, 313, 866, 901], "t_i": [453, 788, 1051, 1286], "t_id": [220, 313, 833, 901], "t_n": [245, 313, 603, 606, 608, 610, 612, 614, 617, 619, 621, 788, 850, 901], "t_struct": [279, 313, 866, 901], "tab_spann": [313, 317], "tab_stub": [313, 317], "tab_styl": [313, 317], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 140, 144, 145, 218, 220, 238, 260, 265, 272, 281, 282, 313, 317, 767, 800, 831, 833, 860, 868, 901, 1296, 1297, 1298, 1299, 1301, 1302, 1312, 1313], "table_nam": [34, 36, 260, 313, 860, 901], "table_path": [35, 133, 144, 145, 313], "table_styl": [36, 313], "tablemerg": [35, 313], "tablenotfounderror": [35, 313], "tables_scale_100": [125, 130], "tail": [202, 206, 313, 328, 633, 788, 901, 1072, 1200, 1286], "take": [36, 126, 134, 140, 159, 160, 168, 197, 198, 204, 227, 230, 237, 238, 242, 313, 338, 405, 427, 462, 469, 470, 511, 512, 544, 568, 570, 572, 636, 714, 716, 735, 737, 746, 788, 825, 827, 842, 848, 901, 926, 996, 1022, 1064, 1065, 1109, 1110, 1277, 1286, 1304], "taken": [530, 664, 1128, 1230], "talkin": [682, 1248], "tan": [788, 1286, 1306], "tand": 1306, "tangent": [334, 335, 693, 694, 788, 922, 923, 1259, 1260, 1286, 1310], "tanh": [238, 313, 788, 1286], "target": [1, 34, 35, 36, 52, 134, 275, 313, 647, 674, 676, 677, 907, 1213, 1240, 1242, 1243, 1308], "target_alia": [35, 313], "target_t": [34, 313], "task": [54, 810, 901], "tau": [452, 453, 788, 1050, 1051, 1286], "tb": [152, 154, 190, 313, 370, 1049, 1286], "tbl": [125, 130, 1315], "tbl0": 1301, "tbl1": [1299, 1301], "tbl2": [1299, 1301], "tbl3": 1299, "tbl4": 1299, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 183, 313, 814, 901], "tbl_width_char": 734, "td1": 907, "td2": 907, "td3": 907, "tdf": [237, 313], "technic": 784, "tell": [641, 662, 1207, 1228], "tempor": [87, 176, 204, 216, 245, 247, 248, 267, 313, 387, 482, 603, 606, 608, 610, 612, 614, 617, 619, 621, 788, 800, 806, 827, 850, 901, 907, 978, 1077, 1286, 1306, 1312], "temporalliter": [387, 788, 978, 1011, 1012, 1286], "temporari": [34, 313], "temporarili": [165, 168, 204, 245, 313, 603, 788, 827, 850, 901], "tend": [152, 154], "tensor": [275, 313, 1270, 1286], "tensordataset": [275, 313], "term": [452, 454, 455, 652, 664, 675, 788, 1050, 1052, 1053, 1218, 1230, 1241, 1286], "termin": [33, 42, 313, 901], "test": [0, 34, 131, 132, 134, 140, 189, 238, 313, 800, 1048, 1286], "test1": 1301, "test2": 1301, "test3": 1301, "test_1": [238, 313], "test_1_math": [238, 313], "test_1_phys": [238, 313], "test_2": [238, 313], "test_2_math": [238, 313], "test_2_phys": [238, 313], "test_data": 131, "test_df_height": 159, "test_func": 749, "test_lf": [873, 901], "test_miscellan": 1316, "test_numer": 1316, "test_price_calcul": 1316, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1301, "text": [128, 131, 652, 656, 657, 660, 661, 663, 664, 675, 768, 1218, 1222, 1223, 1229, 1230, 1241, 1301, 1316], "texttt": [633, 788, 1200, 1286], "th": [198, 313, 470, 512, 525, 633, 652, 675, 788, 825, 901, 1065, 1110, 1123, 1200, 1218, 1241, 1286], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 177, 203, 216, 218, 219, 223, 236, 246, 247, 249, 281, 299, 313, 466, 468, 471, 473, 482, 496, 524, 543, 544, 545, 558, 590, 602, 624, 633, 652, 656, 658, 659, 667, 675, 684, 720, 750, 788, 809, 810, 826, 831, 832, 884, 901, 1077, 1122, 1142, 1163, 1174, 1187, 1200, 1218, 1222, 1224, 1225, 1233, 1241, 1250, 1267, 1286, 1316], "the_aws_access_key_id": [35, 133, 144, 145, 313], "the_aws_region": [35, 313], "the_aws_secret_access_kei": [35, 133, 144, 145, 313], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 219, 221, 248, 313, 583, 662, 670, 671, 788, 809, 832, 901, 905, 907, 1228], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 191, 192, 204, 219, 230, 238, 245, 275, 283, 313, 350, 453, 482, 515, 575, 576, 583, 603, 718, 729, 730, 732, 733, 775, 776, 788, 810, 820, 827, 832, 842, 850, 901, 907, 938, 1051, 1056, 1113, 1151, 1152, 1286, 1304, 1313], "therebi": [143, 146, 147], "therefor": [190, 313, 545, 778, 788, 1049, 1286], "theta": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "thi": [1, 4, 5, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 178, 179, 181, 183, 184, 187, 190, 192, 196, 197, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 258, 260, 261, 262, 265, 267, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 294, 299, 312, 313, 316, 317, 325, 328, 329, 338, 350, 356, 357, 358, 363, 381, 382, 384, 387, 397, 398, 400, 406, 407, 418, 424, 425, 427, 430, 431, 433, 436, 447, 451, 458, 468, 475, 477, 479, 480, 482, 486, 508, 509, 515, 524, 525, 526, 527, 528, 529, 531, 536, 537, 541, 542, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 583, 590, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 626, 627, 628, 629, 634, 635, 636, 639, 641, 647, 650, 653, 654, 658, 659, 662, 669, 670, 671, 672, 673, 678, 682, 684, 686, 689, 696, 697, 699, 700, 701, 702, 706, 710, 718, 721, 723, 724, 737, 738, 740, 742, 743, 746, 747, 750, 753, 755, 758, 760, 764, 765, 766, 769, 773, 777, 778, 779, 784, 788, 800, 803, 804, 805, 808, 809, 810, 811, 812, 814, 815, 817, 818, 819, 826, 827, 829, 831, 832, 833, 835, 837, 841, 842, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 879, 884, 898, 899, 900, 901, 905, 907, 909, 916, 917, 926, 938, 944, 945, 946, 951, 968, 970, 972, 973, 978, 979, 989, 990, 997, 998, 1000, 1009, 1019, 1020, 1022, 1025, 1026, 1028, 1031, 1042, 1044, 1047, 1049, 1055, 1056, 1065, 1067, 1071, 1073, 1082, 1091, 1106, 1107, 1113, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1135, 1140, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1154, 1157, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1201, 1202, 1204, 1205, 1207, 1213, 1216, 1219, 1220, 1224, 1225, 1228, 1235, 1236, 1237, 1244, 1248, 1250, 1251, 1253, 1256, 1257, 1261, 1263, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1274, 1275, 1276, 1286, 1291, 1295, 1296, 1297, 1301, 1308, 1311, 1312, 1313, 1314, 1316], "thing": [143, 150], "think": [424, 425, 1019, 1020], "third": [544, 788], "thoma": [230, 313, 842, 901], "those": [5, 30, 36, 129, 248, 272, 282, 313, 466, 593, 647, 750, 788, 868, 901, 907, 1165, 1213, 1268, 1286], "though": [34, 131, 204, 313, 784, 827, 901], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 259, 313, 508, 545, 636, 714, 788, 810, 859, 901, 946, 1106, 1129, 1202, 1286], "thread_loc": [545, 788], "thread_pool_s": 166, "threadpool": 53, "three": [36, 173, 245, 274, 313, 398, 590, 603, 625, 652, 675, 788, 850, 901, 950, 990, 1134, 1163, 1218, 1241, 1286], "threshold": [251, 313, 852, 901], "through": [117, 131, 784, 907, 1286, 1301], "throw": [35, 118, 119, 122, 176, 185, 242, 313, 654, 655, 806, 816, 848, 901, 1220, 1221, 1286], "thu": [36, 192, 313, 316, 720, 1056, 1286], "thursdai": [204, 313, 405, 716, 827, 901, 996], "ti": [593, 788, 1165, 1286], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 183, 192, 204, 219, 220, 245, 283, 313, 345, 381, 382, 406, 407, 409, 410, 411, 414, 415, 424, 425, 427, 430, 431, 433, 435, 436, 444, 447, 453, 503, 504, 536, 602, 603, 606, 608, 610, 612, 614, 617, 619, 621, 629, 674, 677, 681, 695, 696, 697, 718, 719, 729, 730, 731, 732, 733, 734, 740, 775, 776, 788, 809, 810, 814, 827, 832, 833, 846, 850, 901, 907, 933, 968, 997, 998, 1000, 1001, 1005, 1006, 1022, 1025, 1026, 1028, 1030, 1031, 1039, 1042, 1051, 1056, 1101, 1102, 1174, 1196, 1240, 1243, 1247, 1269, 1271, 1286, 1295, 1301, 1309, 1316], "time_column": [283, 313], "time_format": [33, 42, 313, 901], "time_unit": [62, 64, 407, 409, 415, 435, 447, 677, 731, 732, 733, 734, 740, 907, 998, 1000, 1006, 1030, 1042, 1243], "time_unit_m": [407, 998], "time_unit_n": [407, 998], "time_unit_u": 447, "time_zon": [62, 410, 412, 430, 677, 731, 732, 733, 907, 997, 1001, 1005, 1025, 1243], "timedelta": [204, 219, 245, 283, 313, 427, 431, 444, 453, 603, 606, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 729, 730, 732, 733, 775, 776, 788, 827, 832, 850, 901, 906, 907, 1010, 1016, 1022, 1026, 1039, 1051, 1151, 1152, 1204, 1276, 1286], "timeout": [54, 810, 901], "timestamp": [123, 133, 144, 204, 313, 430, 431, 444, 740, 827, 901, 1025, 1026, 1039, 1306], "timestamp_m": 435, "timestamp_n": 1030, "timestamp_u": [435, 1030], "timestep": 740, "timeunit": [33, 42, 62, 64, 313, 407, 409, 435, 447, 677, 731, 732, 733, 734, 901, 907, 998, 1000, 1030, 1042, 1243], "timezon": [62, 133, 144, 412, 907, 1309], "tip": [545, 788], "titl": [36, 313, 1295], "titlecas": [682, 1248], "tm": [409, 907, 1309], "to_arrow": [217, 313, 1267, 1286, 1313], "to_batch": [217, 313], "to_dict": [176, 313, 806, 901, 907], "to_dummi": [270, 275, 313, 1286], "to_fram": [384, 415, 431, 435, 444, 674, 990, 1163, 1188, 1190, 1232, 1233, 1240, 1286, 1291], "to_init_repr": [123, 313, 1286], "to_jax": [275, 313, 1286], "to_list": [123, 245, 313, 1206, 1217, 1286], "to_lowercas": 574, "to_numpi": [270, 275, 313, 544, 788, 1286], "to_panda": [313, 1286], "to_phys": [788, 972, 1286], "to_python": 906, "to_seri": [48, 199, 313, 674, 715, 763, 1240], "to_sql": [34, 313], "to_str": [433, 1028], "to_struct": [313, 648], "to_torch": [270, 313, 1286], "to_uppercas": [324, 573, 649, 788], "togeth": 1308, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 907], "tokyo_tz": 907, "toler": [152, 153, 154, 155, 219, 313, 832, 901], "tone": [36, 313], "tonight": [641, 662, 1207, 1228], "too": [14, 238, 313, 583, 788, 901], "tooltip": [313, 316, 1286, 1291], "toomanyrowsreturnederror": [246, 313], "top": [36, 260, 276, 313, 316, 697, 788, 860, 864, 901, 1286, 1291, 1313], "top_col": [36, 313], "top_k": [175, 313, 381, 382, 697, 788, 804, 901, 968, 1286], "top_k_bi": [381, 382, 696, 788], "top_row": [36, 313], "tor_id": 123, "torch": [151, 275, 313, 1270, 1286], "torchexporttyp": [275, 313], "tostructstrategi": [536, 1134], "total": [36, 190, 294, 313, 437, 438, 439, 440, 441, 442, 443, 497, 517, 788, 879, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1049, 1095, 1115, 1286], "total_gross": 1295, "toward": [294, 497, 517, 788, 879, 1095, 1115, 1286], "tp": [1, 50], "tpu": [270, 313, 1265, 1286], "traceback": [152, 153, 154, 155, 271, 313, 598, 788, 1170, 1267, 1286], "tracebacktyp": 1313, "track": [133, 144, 145, 223, 313, 536, 1313], "trail": [28, 202, 313, 669, 670, 1235, 1236], "train": [275, 313], "train_lf": [873, 901], "transfer": 132, "transferencod": [367, 368, 643, 644, 954, 955, 1209, 1210], "transform": [223, 260, 313, 544, 682, 767, 788, 860, 901, 1248], "transform_dens": [1286, 1291], "transit": [195, 313, 823, 901], "translat": 131, "transpar": [809, 901], "transpos": [238, 313], "travel": [133, 144], "travers": [605, 607, 609, 611, 613, 616, 618, 620, 788, 1176, 1177, 1179, 1182, 1183, 1184, 1286], "treat": [129, 130, 143, 170, 453, 640, 642, 651, 660, 661, 778, 788, 909, 1051, 1206, 1208, 1217, 1226, 1227, 1286], "tree": [558, 819, 901], "tree_format": [819, 901], "trend": [36, 313], "tri": [223, 313], "triangl": [299, 884], "trigger": [35, 221, 272, 313, 788, 905, 1268, 1286], "trigonometri": [1306, 1312], "trim": [123, 1308], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 172, 176, 177, 178, 183, 185, 189, 194, 195, 197, 199, 201, 202, 203, 204, 209, 211, 212, 213, 216, 218, 219, 220, 221, 226, 227, 233, 234, 236, 238, 239, 242, 246, 247, 248, 249, 251, 259, 260, 263, 266, 268, 270, 271, 272, 275, 277, 278, 279, 281, 282, 283, 287, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 313, 316, 323, 324, 325, 326, 327, 328, 339, 341, 342, 345, 349, 350, 358, 362, 366, 367, 369, 371, 382, 383, 392, 393, 394, 395, 396, 398, 405, 407, 410, 413, 415, 417, 424, 425, 427, 428, 430, 431, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 462, 469, 471, 472, 473, 474, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 504, 511, 513, 515, 531, 536, 543, 544, 545, 549, 550, 551, 552, 553, 554, 555, 558, 559, 577, 578, 580, 582, 585, 586, 590, 595, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 628, 629, 633, 635, 636, 639, 640, 641, 642, 643, 645, 650, 651, 653, 654, 655, 660, 661, 665, 666, 668, 674, 676, 677, 679, 681, 685, 687, 688, 697, 699, 702, 705, 706, 707, 708, 709, 711, 714, 715, 716, 720, 729, 732, 738, 744, 750, 760, 763, 767, 770, 775, 778, 779, 788, 806, 807, 808, 809, 810, 814, 816, 819, 822, 823, 826, 827, 831, 832, 833, 835, 837, 841, 846, 848, 852, 857, 859, 860, 865, 866, 867, 868, 871, 876, 878, 880, 882, 885, 886, 887, 888, 889, 890, 891, 900, 901, 905, 907, 914, 915, 927, 929, 930, 933, 937, 938, 946, 953, 954, 956, 958, 969, 971, 973, 976, 977, 990, 996, 997, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1047, 1048, 1050, 1052, 1053, 1060, 1069, 1073, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1097, 1098, 1102, 1109, 1111, 1113, 1129, 1142, 1148, 1154, 1156, 1159, 1160, 1163, 1166, 1167, 1181, 1200, 1202, 1205, 1206, 1207, 1208, 1209, 1211, 1216, 1217, 1219, 1220, 1221, 1226, 1227, 1231, 1232, 1234, 1240, 1242, 1243, 1245, 1247, 1262, 1267, 1268, 1275, 1277, 1286, 1291, 1295, 1296, 1298, 1300, 1304, 1305, 1308, 1313, 1316], "truediv": [466, 788], "truncat": [123, 129, 130, 143, 202, 204, 216, 247, 248, 267, 313, 827, 846, 901, 1312], "truncate_nod": [846, 901], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 444, "truncate_td": 444, "trust": [400, 788, 815, 901], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 809, 810, 819, 846, 857, 901], "try_cast": 1306, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [430, 1025], "tseri": [424, 425, 1019, 1020], "tstamp": 907, "tstamp_tokyo": 907, "tstamp_utc": 907, "tue": [313, 316], "tuesdai": [204, 313, 827, 901], "tupl": [36, 56, 132, 134, 140, 173, 216, 223, 236, 246, 247, 248, 255, 275, 291, 313, 599, 788, 846, 857, 901, 906, 907, 1171, 1192, 1286], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 218, 219, 313, 809, 810, 819, 831, 832, 837, 846, 901], "twice": [36, 313], "two": [36, 46, 84, 85, 118, 120, 122, 132, 173, 195, 197, 219, 220, 229, 230, 247, 274, 280, 293, 299, 313, 317, 323, 402, 409, 466, 469, 472, 536, 590, 635, 712, 713, 718, 720, 722, 729, 732, 764, 765, 767, 788, 823, 832, 833, 841, 842, 867, 878, 884, 901, 907, 950, 993, 1000, 1134, 1163, 1286, 1301, 1302, 1305, 1314], "two_a": 1313, "tworld": [671, 1235, 1237], "txt": [1, 12, 143, 640, 651, 1217], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 170, 173, 179, 188, 191, 197, 202, 204, 205, 217, 218, 223, 245, 250, 265, 270, 271, 274, 275, 278, 290, 313, 325, 327, 330, 331, 332, 333, 334, 335, 338, 343, 344, 345, 347, 350, 361, 362, 366, 367, 368, 369, 370, 371, 383, 384, 387, 388, 389, 390, 391, 398, 399, 405, 406, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 456, 458, 469, 472, 475, 482, 483, 484, 485, 486, 487, 488, 497, 501, 502, 504, 509, 515, 517, 535, 536, 544, 545, 590, 592, 596, 597, 598, 599, 601, 602, 603, 630, 631, 632, 639, 642, 643, 644, 646, 647, 648, 649, 652, 653, 655, 656, 657, 664, 665, 666, 667, 674, 675, 679, 693, 694, 695, 702, 711, 718, 721, 728, 729, 730, 731, 732, 733, 734, 736, 744, 745, 747, 748, 749, 750, 760, 763, 774, 775, 776, 779, 784, 788, 800, 809, 810, 818, 819, 820, 827, 831, 846, 850, 851, 857, 865, 875, 901, 906, 909, 914, 915, 927, 929, 930, 931, 932, 933, 935, 937, 938, 949, 950, 951, 953, 954, 955, 957, 969, 970, 978, 990, 991, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1051, 1055, 1071, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1097, 1098, 1099, 1100, 1102, 1107, 1113, 1115, 1133, 1134, 1156, 1163, 1169, 1170, 1171, 1173, 1174, 1195, 1197, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1218, 1219, 1221, 1222, 1223, 1230, 1231, 1232, 1233, 1240, 1241, 1245, 1266, 1267, 1269, 1277, 1286, 1295, 1302, 1306, 1308, 1312, 1313], "type_coercion": [42, 43, 44, 45, 53, 54, 809, 810, 819, 846, 857, 901], "typeerror": [35, 313], "typenam": [36, 313], "typic": [119, 131, 148, 223, 313, 414, 630, 788, 907, 1005, 1142, 1197, 1286], "tz": [677, 1243], "tzinfo": [133, 144, 907], "u": [36, 62, 64, 148, 161, 219, 313, 407, 409, 415, 435, 447, 674, 677, 707, 709, 731, 732, 733, 734, 740, 832, 901, 907, 998, 1000, 1006, 1030, 1042, 1240, 1243, 1299, 1309], "u1": [271, 313], "u16": [143, 1311, 1316], "u32": [12, 131, 174, 176, 182, 235, 289, 290, 294, 298, 304, 306, 313, 323, 329, 336, 337, 338, 339, 340, 343, 344, 346, 355, 370, 391, 392, 477, 497, 501, 502, 505, 517, 522, 565, 581, 593, 601, 602, 606, 608, 610, 612, 614, 617, 619, 621, 625, 642, 651, 656, 657, 695, 700, 702, 706, 710, 714, 715, 721, 723, 744, 747, 758, 788, 803, 806, 813, 844, 874, 875, 879, 883, 889, 891, 901, 907, 926, 927, 928, 931, 932, 934, 943, 969, 972, 984, 1073, 1099, 1100, 1103, 1115, 1120, 1165, 1173, 1174, 1189, 1208, 1217, 1222, 1223, 1269, 1273, 1275, 1286, 1295, 1303, 1304, 1308, 1313], "u64": [205, 290, 313, 475, 595, 788, 846, 875, 901, 907, 1071, 1167, 1286], "u8": [176, 268, 269, 281, 313, 598, 705, 788, 806, 901, 907, 1170, 1262, 1286, 1316], "udf": [165, 223, 237, 299, 313, 400, 545, 587, 750, 788, 815, 845, 884, 901, 1142, 1286], "ufunc": 90, "uid": 131, "uint": 1316, "uint16": [143, 395, 396, 691, 788, 907, 987, 988, 1257, 1267, 1270, 1286], "uint2": 1311, "uint32": [124, 151, 176, 190, 245, 290, 313, 338, 343, 344, 370, 391, 453, 469, 472, 497, 501, 502, 517, 596, 601, 602, 603, 642, 656, 657, 695, 721, 744, 747, 788, 806, 850, 875, 901, 907, 927, 931, 932, 957, 969, 1049, 1051, 1099, 1100, 1115, 1173, 1174, 1208, 1222, 1223, 1269, 1270, 1286], "uint4": 1313, "uint64": [124, 205, 245, 290, 313, 343, 344, 453, 475, 501, 502, 595, 603, 788, 850, 875, 901, 907, 931, 932, 1051, 1071, 1099, 1100, 1167, 1270, 1286], "uint8": [131, 176, 269, 270, 271, 281, 313, 395, 396, 598, 691, 705, 788, 806, 901, 907, 987, 988, 1170, 1257, 1270, 1286, 1316], "uint8_pair": 1316, "uit": [664, 1230], "uk": [648, 1214], "unabl": [92, 134], "unari": [579, 788], "unbias": [454, 455, 788, 1052, 1053, 1286], "unchang": [190, 313, 597, 695, 788, 837, 884, 901, 1049, 1169, 1269, 1286], "uncompress": [31, 37, 38, 41, 45, 135, 146, 313, 901], "undefin": [698, 788], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 238, 260, 313, 780, 781, 783, 784, 789, 790, 793, 795, 796, 797, 860, 901, 1278, 1280, 1282, 1287, 1292, 1293, 1294], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 191, 192, 216, 217, 247, 265, 271, 313, 367, 407, 408, 409, 413, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 430, 432, 445, 446, 447, 448, 595, 622, 640, 643, 651, 788, 820, 901, 907, 954, 972, 998, 999, 1000, 1004, 1007, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1025, 1027, 1040, 1041, 1042, 1043, 1056, 1167, 1185, 1195, 1206, 1209, 1217, 1261, 1267, 1286, 1313], "understood": 750, "undo": [559, 566, 567, 569, 571, 573, 574], "unexpect": [99, 108, 131, 544, 545, 788, 1142, 1286], "unhelpfulli": [152, 154], "unicod": [20, 652, 657, 664, 675, 907, 1218, 1223, 1230, 1241], "unifi": [36, 270, 275, 313, 907], "uniform": [36, 313, 590, 788, 1163, 1286], "unimod": [633, 788, 1200, 1286], "unintend": [195, 313, 823, 901], "union": [53, 54, 55, 528, 809, 810, 819, 846, 857, 901, 907, 1126, 1312, 1313], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 174, 213, 218, 234, 238, 248, 304, 313, 329, 340, 355, 398, 493, 522, 565, 590, 674, 676, 677, 681, 700, 702, 710, 758, 788, 803, 831, 889, 901, 905, 917, 928, 943, 990, 1090, 1120, 1149, 1163, 1240, 1242, 1243, 1247, 1273, 1275, 1286, 1302, 1304], "unique_column_valu": [238, 313], "unique_count": [788, 1286], "uniquekeepstrategi": [278, 313, 865, 901], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 190, 313, 370, 407, 409, 415, 435, 447, 453, 459, 542, 555, 674, 677, 701, 731, 732, 733, 734, 740, 788, 846, 901, 905, 907, 957, 998, 1000, 1006, 1030, 1042, 1049, 1051, 1057, 1140, 1240, 1243, 1274, 1286, 1316], "univers": [170, 909], "unix": [61, 62, 415, 740, 1006], "unknown": [647, 748, 1213], "unless": [36, 47, 118, 270, 275, 313, 669, 670, 763, 901, 1235, 1308], "unlik": [126, 204, 313, 827, 901], "unnam": [649, 1215], "unnest": [126, 313, 398, 590, 601, 648, 649, 666, 667, 687, 689, 702, 788, 901, 950, 990, 1134, 1163, 1173, 1232, 1233, 1286, 1306, 1312], "unpivot": [229, 313, 841, 901], "unregist": [1297, 1298, 1299, 1313, 1315], "unsaf": [788, 905], "unset": [34, 141, 146, 158, 298, 313, 374, 375, 376, 378, 379, 430, 536, 788, 883, 961, 962, 963, 965, 966, 1025, 1286, 1295], "unsign": [78, 79, 80, 81, 595, 788, 907, 1167, 1286], "unsigned_integ": 907, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 260, 270, 275, 281, 282, 313, 316, 317, 397, 398, 431, 477, 545, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 764, 765, 788, 809, 810, 819, 860, 868, 901, 973, 989, 990, 1026, 1073, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1265, 1270, 1286, 1291], "unstack": 313, "unstackdirect": [281, 313], "unsuit": 115, "unsupport": [35, 313], "until": [84, 204, 221, 313, 658, 659, 684, 827, 901, 1224, 1225, 1250], "up": [10, 36, 76, 132, 216, 219, 238, 247, 248, 254, 267, 313, 386, 545, 652, 675, 788, 831, 832, 837, 855, 901, 907, 975, 1218, 1241, 1286], "upcast": [328, 788], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 183, 313, 814, 901], "upgrad": 95, "upheld": [837, 901], "upon": 130, "upper": [129, 130, 131, 190, 204, 313, 387, 477, 482, 536, 568, 701, 711, 729, 730, 732, 733, 775, 776, 788, 827, 901, 978, 1049, 1073, 1077, 1140, 1274, 1286, 1304, 1306], "upper_bound": [204, 313, 387, 482, 536, 788, 827, 901, 978, 1077, 1140, 1286], "uppercas": [574, 683, 1249, 1308], "upsampl": [204, 313, 827, 901], "urandom": [370, 957], "uri": [34, 35, 131, 132, 133, 144, 145, 313], "url": [131, 132, 141, 146, 148, 647, 649, 1213, 1215], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 174, 175, 176, 179, 183, 185, 187, 193, 194, 195, 197, 203, 204, 211, 213, 215, 216, 217, 219, 223, 229, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 292, 299, 313, 323, 325, 327, 329, 338, 339, 362, 367, 368, 382, 397, 400, 403, 404, 412, 430, 431, 433, 436, 444, 447, 449, 452, 453, 454, 455, 456, 460, 461, 462, 466, 477, 480, 481, 482, 494, 508, 524, 532, 536, 538, 544, 545, 548, 566, 569, 571, 573, 574, 583, 590, 593, 595, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 624, 626, 628, 629, 633, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 656, 657, 660, 661, 662, 664, 666, 668, 670, 671, 672, 673, 674, 676, 677, 681, 684, 685, 689, 697, 703, 704, 706, 707, 708, 709, 710, 713, 714, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 740, 744, 745, 747, 748, 750, 751, 752, 754, 756, 757, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 784, 787, 788, 799, 800, 803, 804, 805, 806, 809, 810, 812, 814, 815, 816, 817, 818, 819, 821, 822, 823, 826, 827, 832, 835, 841, 850, 851, 852, 853, 855, 859, 860, 861, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 884, 901, 906, 907, 914, 915, 917, 946, 950, 954, 955, 973, 989, 991, 994, 995, 1003, 1011, 1012, 1025, 1026, 1028, 1031, 1039, 1042, 1045, 1050, 1051, 1052, 1053, 1058, 1059, 1064, 1070, 1073, 1075, 1076, 1077, 1092, 1106, 1122, 1129, 1134, 1142, 1163, 1165, 1167, 1169, 1171, 1173, 1174, 1175, 1187, 1188, 1190, 1191, 1194, 1200, 1202, 1204, 1205, 1206, 1207, 1209, 1210, 1212, 1213, 1214, 1216, 1217, 1222, 1223, 1226, 1227, 1228, 1230, 1232, 1240, 1242, 1243, 1247, 1250, 1261, 1262, 1264, 1267, 1268, 1276, 1286, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1308, 1309, 1313, 1316], "usag": [159, 163, 257, 313, 907, 1195, 1286], "usd": [202, 313, 1316], "use_pyarrow": [41, 45, 129, 135, 137, 141, 271, 313, 901, 1267, 1286], "use_pyarrow_extension_arrai": [272, 313, 1268, 1286], "use_pyarrow_write_to_dataset": [41, 313], "use_statist": [141, 148], "user": [34, 131, 132, 170, 223, 237, 299, 313, 544, 545, 587, 626, 750, 788, 845, 884, 901, 905, 909, 1142, 1191, 1286], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 275, 313, 406, 997], "utc": [133, 144, 406, 410, 412, 414, 430, 674, 677, 907, 997, 1001, 1005, 1025, 1240, 1243], "utc_tz": 907, "utf": [33, 42, 75, 313, 901], "utf8": [20, 129, 130, 143, 652, 664, 675, 1218, 1230, 1241], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [275, 313, 740, 901, 905], "uvw": [648, 1214], "v": [8, 9, 41, 190, 313, 625, 707, 709, 788, 1189, 1286, 1298, 1299], "v2": [8, 135, 146], "val": [36, 244, 313, 545, 587, 695, 778, 788, 849, 901], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 185, 190, 218, 242, 313, 397, 640, 642, 647, 648, 649, 651, 655, 660, 661, 778, 788, 816, 831, 848, 876, 901, 907, 989, 1049, 1206, 1208, 1213, 1214, 1215, 1217, 1221, 1226, 1227, 1286, 1295, 1296], "validate_output_schema": [837, 901], "vals_phys": [695, 788], "valu": [4, 5, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 172, 174, 175, 183, 187, 189, 192, 193, 194, 195, 199, 202, 204, 205, 206, 210, 214, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 238, 239, 240, 242, 245, 246, 247, 248, 249, 256, 259, 261, 262, 263, 264, 266, 267, 271, 272, 276, 277, 280, 281, 282, 283, 284, 291, 294, 295, 297, 300, 301, 303, 304, 313, 316, 317, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 381, 382, 383, 385, 386, 387, 388, 389, 390, 392, 393, 396, 397, 398, 401, 403, 404, 409, 413, 423, 428, 445, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 505, 506, 507, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 531, 532, 533, 534, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 561, 562, 563, 564, 565, 575, 576, 577, 578, 581, 583, 584, 587, 588, 590, 591, 593, 596, 597, 598, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 639, 640, 642, 643, 644, 645, 647, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 675, 684, 686, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 714, 717, 718, 719, 721, 723, 724, 725, 726, 727, 737, 738, 743, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 762, 763, 764, 765, 771, 772, 778, 788, 803, 804, 814, 817, 821, 822, 823, 827, 829, 830, 831, 832, 838, 839, 840, 841, 843, 844, 847, 848, 850, 856, 859, 861, 862, 864, 867, 868, 869, 879, 880, 882, 885, 886, 888, 889, 901, 907, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 951, 952, 954, 955, 956, 957, 958, 969, 975, 978, 980, 981, 982, 984, 989, 990, 991, 992, 994, 995, 1000, 1004, 1018, 1023, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1063, 1064, 1065, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1127, 1129, 1130, 1131, 1132, 1135, 1136, 1142, 1143, 1144, 1146, 1147, 1149, 1151, 1152, 1154, 1155, 1157, 1158, 1162, 1163, 1164, 1165, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1193, 1197, 1198, 1199, 1200, 1202, 1205, 1206, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1241, 1250, 1253, 1257, 1258, 1259, 1260, 1267, 1268, 1269, 1273, 1275, 1277, 1286, 1295, 1300, 1302, 1304, 1305, 1307, 1308, 1309, 1311, 1313, 1315, 1316], "value1": [636, 788], "value2": [636, 788], "value_a": 1313, "value_b": 1313, "value_count": [700, 788, 1286], "value_cum_sum": [396, 788], "value_cum_sum_all_fil": [396, 788], "value_nam": [229, 280, 313, 841, 867, 901], "value_var": [229, 280, 313, 841, 867, 901], "valueerror": [15, 20], "valueexcept": 748, "var": [36, 164, 313, 620, 621, 788, 901, 1286, 1303], "var_samp": 1303, "vari": [406, 997, 1316], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 229, 268, 280, 313, 841, 867, 901, 1262, 1286, 1296, 1298, 1313], "variable_nam": [229, 280, 313, 841, 867, 901], "variad": 131, "varianc": [284, 313, 455, 494, 620, 621, 703, 777, 788, 869, 901, 1053, 1092, 1184, 1276, 1286, 1306], "variou": [131, 173, 179, 313, 788, 811, 901, 906, 907, 1286], "vector": [605, 607, 609, 611, 613, 616, 618, 620, 788, 1176, 1177, 1179, 1182, 1183, 1184, 1286], "vectoris": [424, 425, 1019, 1020], "vein": 168, "verbos": [29, 152, 154, 168, 648, 1214], "veri": [131, 216, 277, 313, 545, 788, 884, 1307], "verifi": [219, 313, 832, 901], "versicolor": [313, 316], "version": [34, 35, 52, 129, 130, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 172, 174, 184, 205, 229, 253, 260, 270, 271, 275, 289, 294, 313, 316, 400, 412, 424, 425, 447, 468, 475, 551, 557, 560, 597, 639, 646, 689, 704, 713, 762, 767, 788, 803, 815, 819, 841, 854, 860, 873, 874, 879, 901, 907, 1003, 1011, 1012, 1019, 1020, 1042, 1070, 1071, 1169, 1205, 1212, 1265, 1267, 1270, 1286, 1291], "versu": [183, 313, 814, 901], "vertic": [55, 192, 281, 285, 313, 639, 653, 1205, 1219], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 171, 173, 184, 216, 247, 313, 400, 545, 649, 788, 815, 901, 910, 1215], "view": [545, 788], "visibl": [17, 190, 313, 1049, 1286], "visit": [397, 788, 989, 1286], "visual": [211, 213, 313, 857, 901], "volk": 126, "vote": [647, 649, 1213, 1215], "vowel": [660, 661, 1226, 1227], "vstack": [55, 192, 313], "w": [36, 131, 204, 248, 313, 642, 647, 649, 707, 709, 827, 901, 907, 1208, 1213, 1215, 1236, 1298, 1299, 1302], "w_i": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "wa": [34, 52, 91, 134, 184, 270, 271, 313, 316, 400, 598, 662, 734, 788, 815, 901, 907, 1170, 1228, 1267, 1286, 1291], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 203, 217, 237, 259, 292, 313, 431, 587, 636, 647, 721, 784, 788, 812, 818, 826, 845, 851, 859, 870, 877, 884, 901, 1026, 1213], "walk": 719, "want": [54, 119, 121, 134, 192, 223, 234, 245, 260, 313, 405, 462, 544, 545, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 629, 641, 656, 662, 716, 724, 729, 732, 738, 760, 763, 779, 788, 810, 860, 876, 901, 907, 996, 1056, 1142, 1207, 1222, 1228, 1286, 1301], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 583, 788, 1286], "watermark": [41, 313], "wb": [36, 313], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 173, 183, 184, 204, 219, 238, 245, 283, 313, 400, 427, 431, 444, 477, 508, 536, 544, 545, 603, 606, 608, 610, 612, 614, 617, 619, 621, 649, 679, 728, 729, 730, 731, 732, 733, 748, 775, 776, 778, 788, 814, 815, 827, 832, 837, 850, 901, 1022, 1026, 1039, 1073, 1106, 1142, 1215, 1245, 1286, 1298], "weather": [660, 661, 1226, 1227], "wed": [313, 316], "wednesdai": [204, 313, 433, 436, 827, 901, 1028, 1031], "week": [204, 219, 245, 283, 313, 405, 427, 431, 444, 446, 453, 603, 606, 608, 610, 612, 614, 617, 619, 621, 716, 729, 730, 732, 733, 734, 775, 776, 788, 827, 832, 850, 901, 907, 996, 1022, 1026, 1039, 1041, 1051, 1286, 1309], "week_mask": [405, 716, 996], "weekdai": [413, 428], "weekend": [405, 716, 996], "weekli": [204, 313, 444, 827, 901, 1039], "weghorst": [649, 1215], "weight": [126, 452, 453, 454, 455, 604, 605, 607, 609, 611, 613, 616, 618, 620, 633, 788, 1050, 1051, 1052, 1053, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1200, 1286], "wei\u00df": 1308, "well": [36, 129, 130, 131, 143, 313, 482, 767, 788, 1077, 1286, 1313], "were": [168, 597, 598, 784, 788, 1169, 1170, 1286], "west": [220, 313, 833, 901], "what": [173, 234, 313, 405, 544, 641, 662, 788, 996, 1207, 1228], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 175, 183, 188, 190, 192, 194, 197, 204, 218, 220, 223, 237, 242, 246, 248, 251, 252, 256, 259, 265, 268, 270, 271, 275, 276, 278, 282, 288, 313, 357, 387, 405, 452, 454, 455, 461, 529, 536, 555, 587, 597, 598, 627, 635, 636, 641, 646, 650, 652, 656, 657, 662, 664, 669, 670, 671, 674, 675, 714, 716, 724, 738, 788, 804, 814, 822, 827, 831, 833, 837, 848, 852, 853, 856, 859, 864, 865, 868, 872, 898, 901, 945, 978, 991, 996, 1049, 1050, 1052, 1053, 1056, 1059, 1127, 1169, 1170, 1188, 1190, 1193, 1207, 1212, 1216, 1218, 1222, 1223, 1228, 1230, 1235, 1236, 1237, 1240, 1241, 1261, 1262, 1267, 1286, 1301, 1313], "when_matched_update_al": [35, 313], "when_not_matched_insert_al": [35, 313], "where": [36, 47, 91, 131, 132, 134, 187, 192, 195, 204, 216, 220, 229, 238, 247, 260, 261, 270, 275, 280, 282, 284, 313, 339, 446, 449, 451, 453, 462, 532, 538, 544, 578, 596, 625, 633, 636, 638, 662, 682, 703, 715, 720, 722, 764, 765, 767, 769, 777, 778, 788, 817, 823, 827, 833, 841, 860, 861, 867, 868, 869, 901, 927, 1041, 1045, 1047, 1051, 1056, 1060, 1154, 1189, 1200, 1204, 1228, 1248, 1276, 1277, 1286, 1295, 1312, 1313, 1315], "wherea": [129, 143, 245, 313, 431, 444, 575, 576, 603, 788, 850, 901, 1026, 1039, 1151, 1152, 1286], "wherev": [36, 223, 299, 313, 545, 788, 1142, 1286], "whether": [33, 42, 120, 122, 126, 134, 140, 141, 146, 148, 163, 167, 189, 215, 219, 254, 259, 313, 325, 327, 341, 342, 417, 432, 474, 499, 500, 626, 636, 650, 714, 788, 832, 837, 855, 859, 901, 907, 914, 915, 929, 930, 971, 973, 1008, 1027, 1048, 1069, 1070, 1097, 1098, 1216, 1286, 1298, 1313], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 175, 176, 183, 184, 187, 192, 193, 203, 204, 209, 219, 238, 245, 253, 270, 271, 276, 278, 283, 313, 325, 362, 400, 405, 427, 431, 433, 444, 453, 459, 482, 484, 487, 489, 490, 491, 492, 536, 544, 545, 555, 557, 603, 606, 608, 610, 612, 614, 617, 619, 621, 679, 716, 729, 730, 732, 733, 734, 775, 776, 778, 788, 804, 806, 809, 812, 814, 815, 817, 818, 819, 827, 832, 850, 854, 864, 865, 870, 901, 907, 950, 996, 1022, 1026, 1028, 1039, 1051, 1056, 1057, 1077, 1080, 1083, 1085, 1086, 1087, 1088, 1134, 1190, 1245, 1265, 1267, 1286, 1296, 1302, 1313, 1316], "while": [35, 54, 130, 133, 134, 144, 148, 159, 163, 168, 216, 229, 277, 280, 282, 313, 597, 657, 788, 810, 841, 867, 868, 901, 1169, 1223, 1286], "white": [36, 313], "whitespac": [123, 669, 670, 671, 1235, 1236, 1237, 1308], "whole": [544, 635, 636, 647, 788, 884, 901, 1213], "whose": [47, 219, 238, 313, 456, 736, 788, 832, 901, 907], "why": [809, 901], "wide": [131, 202, 229, 238, 280, 281, 313, 841, 867, 901], "width": [26, 36, 56, 129, 130, 143, 313, 316, 535, 901, 1133], "wiki": 20, "wikipedia": 20, "wildcard": [456, 685, 724, 725, 738, 762, 784, 788, 905], "win_loss": [36, 313], "window": [129, 130, 143, 204, 245, 313, 397, 452, 454, 455, 545, 583, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 718, 764, 765, 788, 827, 850, 901, 989, 1050, 1052, 1053, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1286], "window_s": [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 764, 765, 788, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1286], "windowmappingstrategi": [583, 788], "winter": [650, 660, 661, 1216], "wise": [36, 47, 131, 197, 313, 330, 331, 332, 333, 334, 335, 388, 389, 390, 457, 540, 630, 631, 632, 693, 694, 738, 762, 788, 918, 919, 920, 921, 922, 923, 980, 981, 982, 1054, 1138, 1139, 1197, 1198, 1199, 1259, 1260, 1286], "wish": [175, 276, 313, 381, 382, 696, 697, 788, 804, 864, 901, 968, 1271, 1286], "with_column": [1, 12, 50, 53, 54, 204, 237, 245, 275, 281, 288, 313, 322, 324, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 355, 356, 357, 358, 362, 367, 368, 370, 383, 387, 392, 393, 394, 395, 396, 398, 401, 405, 406, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 446, 448, 450, 451, 453, 460, 461, 466, 471, 473, 475, 480, 481, 482, 485, 486, 488, 489, 490, 491, 492, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 562, 564, 566, 567, 569, 571, 573, 574, 577, 578, 579, 583, 584, 587, 588, 590, 593, 597, 598, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 623, 627, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 682, 683, 684, 686, 689, 690, 695, 698, 705, 707, 709, 712, 716, 717, 718, 719, 724, 725, 727, 728, 730, 731, 735, 745, 749, 752, 754, 757, 768, 772, 774, 776, 778, 784, 788, 809, 810, 819, 827, 829, 845, 846, 850, 857, 872, 901, 907, 990, 1025, 1163, 1286, 1313], "with_column_nam": 143, "with_columns_seq": [313, 901], "with_context": 901, "with_field": [545, 788], "with_replac": [249, 313, 524, 624, 788, 1122, 1187, 1286], "with_row_count": [313, 901], "with_row_index": [1, 245, 289, 313, 606, 608, 610, 612, 614, 617, 619, 621, 788, 874, 901, 1188, 1286, 1291], "within": [41, 56, 72, 152, 153, 154, 155, 203, 204, 205, 219, 245, 283, 313, 475, 593, 636, 788, 827, 832, 850, 901, 1071, 1286, 1313], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 220, 260, 270, 271, 275, 281, 282, 313, 316, 317, 397, 398, 431, 477, 545, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 641, 650, 662, 721, 764, 765, 766, 788, 809, 810, 819, 833, 860, 868, 901, 971, 973, 989, 990, 1026, 1073, 1163, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1207, 1216, 1228, 1265, 1267, 1270, 1286, 1291, 1315], "without_fil": [133, 144, 145], "wod": [671, 1237], "womp": [279, 313, 866, 901], "word": [132, 660, 661, 670, 671, 682, 1248], "work": [36, 63, 65, 130, 149, 252, 288, 313, 325, 327, 363, 386, 387, 456, 465, 508, 537, 544, 545, 566, 567, 569, 571, 573, 574, 583, 652, 656, 657, 664, 675, 699, 788, 853, 872, 901, 907, 914, 915, 951, 975, 978, 1063, 1106, 1135, 1218, 1222, 1223, 1230, 1241, 1272, 1286], "workaround": 313, "workbook": [36, 134, 140, 313], "working_with_conditional_format": [36, 313], "working_with_sparklin": [36, 313], "worksheet": [36, 134, 140, 313], "world": [1, 20, 641, 662, 669, 670, 671, 907, 1113, 1207, 1228, 1235, 1236, 1237, 1297, 1300], "wors": [859, 901], "worth": [508, 1106], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 173, 271, 275, 313, 316, 338, 349, 405, 513, 544, 545, 554, 583, 593, 714, 716, 788, 926, 937, 996, 1111, 1165, 1267, 1286, 1291, 1311], "wrap": [74, 123, 383, 482, 544, 788, 969, 1286], "wrap_numer": [383, 788, 969, 1286], "wrapper": [54, 810, 901], "writabl": [31, 33, 37, 38, 39, 40, 41, 253, 271, 313, 1267, 1286], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 179, 313, 387, 560, 788, 835, 857, 901, 907, 978, 1286], "write_ascii_frame_to_stdout": 168, "write_avro": 313, "write_clipboard": [128, 313], "write_csv": [32, 130, 143, 313], "write_databas": 313, "write_delta": 313, "write_excel": 313, "write_ipc": [135, 313], "write_ipc_stream": 313, "write_json": 313, "write_ndjson": [39, 313], "write_parquet": 313, "write_t": [41, 313], "write_to_dataset": [41, 313], "writeabl": [271, 313, 1267, 1286], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 253, 313, 557, 854, 901], "ww": [1308, 1315], "www": 687, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 134, 140, 143, 156, 157, 159, 172, 190, 208, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 392, 399, 450, 451, 466, 471, 473, 475, 496, 503, 515, 541, 543, 544, 545, 562, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 582, 588, 596, 597, 598, 602, 630, 633, 666, 689, 690, 695, 698, 705, 707, 709, 712, 713, 718, 724, 725, 727, 738, 748, 749, 752, 754, 757, 762, 767, 772, 778, 788, 831, 837, 858, 860, 867, 901, 906, 907, 938, 972, 984, 1059, 1142, 1169, 1170, 1197, 1200, 1232, 1265, 1269, 1270, 1286, 1291, 1298, 1299, 1302, 1307, 1313, 1315], "x00": [366, 367, 368, 369, 371, 643, 953, 954, 955, 956, 958, 1209], "x00fvalu": [253, 313], "x07": 370, "x1": 370, "x80": 370, "x81": 557, "x82": [253, 313], "x83": [253, 313, 370], "x88": 370, "x8e": 370, "x99": 370, "x_": [453, 788, 1051, 1286], "x_0": [281, 313, 452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286], "x_1": [281, 313, 453, 788, 1051, 1286], "x_2": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "x_i": [453, 788, 1051, 1286], "x_invers": [588, 788], "x_pow_8": 1307, "x_round": 1307, "x_round_1": 1307, "x_squar": [588, 788], "x_t": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "x_uniqu": [565, 788], "x_y": [350, 515], "xa1cagg": 557, "xa1csum": 557, "xa1fcolumncfoolpartition_bi": 557, "xa1fwindow": 557, "xa1gcolumn": [253, 313], "xa4dnamecfoohdatatypeeint64lbit_set": [253, 313], "xa4hfunct": 557, "xb": 370, "xb9neq": 370, "xbd": 370, "xc14": 370, "xd3": 370, "xdist": 1316, "xee": 370, "xf4v": 370, "xf9": 370, "xfb": 370, "xff": [366, 367, 368, 369, 371, 643, 953, 954, 955, 956, 958, 1209], "xi": [648, 1214], "xl": 134, "xlog2": [564, 588, 788], "xlsb": 134, "xlsx": [36, 134, 313], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 313], "xor": [380, 788, 967, 1286], "xor_xi": [705, 788], "xx": [10, 48, 50, 163, 183, 260, 313, 814, 901, 907, 1302, 1308, 1315], "xxx": 687, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 322, 642, 648, 788, 1208, 1214, 1263, 1286], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 172, 190, 211, 213, 218, 238, 247, 248, 277, 280, 281, 313, 316, 322, 324, 326, 345, 350, 370, 433, 436, 450, 451, 471, 473, 496, 503, 515, 543, 545, 565, 567, 569, 571, 573, 574, 577, 578, 582, 596, 597, 598, 602, 674, 676, 677, 689, 698, 705, 707, 709, 712, 713, 727, 734, 748, 752, 754, 757, 767, 772, 788, 831, 858, 860, 867, 901, 906, 907, 938, 972, 1028, 1031, 1169, 1170, 1240, 1242, 1243, 1286, 1291, 1302, 1308, 1309, 1315], "y_": [452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286], "y_0": [281, 313, 452, 453, 454, 455, 788, 1050, 1051, 1052, 1053, 1286], "y_1": [281, 313], "y_i": [453, 788, 1051, 1286], "y_mul": 689, "y_t": [452, 454, 455, 788, 1050, 1052, 1053, 1286], "y_uniqu": [565, 788], "ya": [664, 1230], "ya29": 145, "year": [133, 144, 204, 219, 245, 260, 283, 313, 405, 417, 418, 427, 428, 431, 444, 445, 603, 606, 608, 610, 612, 614, 617, 619, 621, 716, 728, 729, 730, 731, 732, 733, 775, 776, 788, 827, 832, 850, 901, 907, 996, 1008, 1009, 1022, 1023, 1026, 1039, 1040, 1309], "yellow": [313, 317, 366, 367, 368, 369, 371], "yield": [120, 122, 129, 130, 131, 143, 190, 192, 215, 277, 313, 466, 544, 583, 788, 901, 1049, 1056, 1286], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 175, 192, 195, 204, 215, 216, 219, 223, 234, 238, 245, 246, 247, 248, 260, 267, 270, 276, 277, 278, 280, 299, 313, 316, 381, 382, 405, 424, 425, 427, 430, 433, 436, 456, 462, 482, 508, 536, 544, 545, 583, 588, 595, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 629, 641, 656, 660, 661, 662, 682, 685, 696, 697, 716, 724, 729, 732, 734, 738, 750, 760, 763, 767, 779, 788, 804, 810, 817, 823, 827, 832, 850, 857, 860, 864, 865, 867, 876, 884, 901, 905, 907, 968, 996, 1019, 1020, 1025, 1028, 1031, 1056, 1077, 1106, 1142, 1161, 1167, 1207, 1222, 1226, 1227, 1228, 1248, 1265, 1271, 1286, 1291, 1296, 1301, 1316], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 216, 223, 247, 248, 251, 267, 287, 292, 299, 313, 316, 410, 453, 468, 545, 649, 674, 676, 677, 684, 750, 788, 837, 852, 871, 877, 884, 901, 1001, 1051, 1142, 1215, 1240, 1242, 1243, 1250, 1286, 1291, 1316], "yy": [10, 48, 50, 163, 183, 260, 313, 814, 901, 907, 1302, 1308, 1315], "yyi": 687, "yyyi": [36, 313], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 190, 211, 213, 218, 247, 248, 277, 280, 281, 313, 322, 324, 326, 475, 503, 545, 567, 569, 571, 573, 574, 582, 596, 597, 598, 641, 648, 650, 662, 674, 677, 707, 709, 727, 752, 754, 757, 763, 767, 772, 788, 831, 858, 860, 867, 901, 906, 907, 1059, 1169, 1170, 1207, 1214, 1216, 1228, 1240, 1243, 1286, 1298, 1302, 1313, 1315], "z_0": [281, 313], "z_1": [281, 313], "zap": 907, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 172, 194, 204, 216, 246, 260, 265, 271, 272, 313, 461, 536, 541, 625, 633, 684, 698, 788, 807, 822, 827, 901, 977, 1059, 1134, 1200, 1250, 1261, 1267, 1268, 1286, 1307, 1313], "zero_copy_onli": [1267, 1286], "zfill": [659, 705, 788, 1225], "zip": 1316, "zip_with": [197, 313, 1286], "zone": [62, 159, 160, 163, 406, 410, 430, 453, 677, 731, 732, 733, 788, 907, 997, 1001, 1025, 1051, 1243, 1286], "zoneinfo": [62, 907], "zoom": [36, 313], "zstd": [37, 38, 41, 43, 45, 313, 901], "zz": [163, 183, 260, 313, 814, 901, 1302, 1308, 1315], "zzz": 687, "\u03bc": [123, 176, 204, 216, 245, 247, 248, 267, 283, 313, 406, 407, 409, 410, 411, 412, 414, 416, 419, 421, 422, 424, 425, 426, 427, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 603, 606, 608, 610, 612, 614, 617, 619, 621, 674, 677, 731, 732, 733, 734, 740, 788, 806, 827, 850, 901, 907, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1013, 1017, 1019, 1020, 1021, 1022, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1240, 1243, 1308], "\u0441\u0438\u043d\u0438\u0439": 1308, "\u0967\u096f\u096f\u096f": 907, "\u0968\u0966\u096d\u096d": 907, "\u4eac\u90fd": 907, "\u5927\u962a": 907, "\u6771\u4eac": [656, 657, 907, 1222, 1223], "\u90fd\u5e02": 907, "\ud835\udf0b": 1307}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1302, 1314], "IF": 1305, "__array__": [170, 909], "__arrow_c_stream__": [171, 910], "__dataframe__": 172, "__getitem__": [173, 911], "__iter__": 291, "ab": [321, 912, 1307], "aco": 1310, "acosd": 1310, "add": 322, "add_business_dai": [405, 996], "agg": [292, 877], "agg_group": 323, "aggreg": [169, 320, 802, 908, 1303], "alia": [324, 913], "alias": [1303, 1307, 1308], "align_fram": 47, "all": [293, 325, 341, 499, 706, 878, 914, 929, 1097, 1314], "all_horizont": 707, "and_": 326, "ani": [327, 342, 500, 708, 915, 930, 1098], "any_horizont": 709, "api": [1, 48, 49, 50, 51, 800, 1313], "append": [328, 916], "approx_n_uniqu": [174, 329, 710, 803, 917], "arang": 711, "arcco": [330, 918], "arccosh": [331, 919], "arcsin": [332, 920], "arcsinh": [333, 921], "arctan": [334, 922], "arctan2": 712, "arctan2d": 713, "arctanh": [335, 923], "arg_max": [336, 343, 501, 924, 931, 1099], "arg_min": [337, 344, 502, 925, 932, 1100], "arg_sort": [338, 926], "arg_sort_bi": 714, "arg_tru": [339, 927], "arg_uniqu": [340, 928], "arg_wher": 715, "arr": [341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952], "arrai": [56, 780, 1278, 1304], "array_agg": 1304, "array_contain": 1304, "array_get": 1304, "array_length": 1304, "array_low": 1304, "array_mean": 1304, "array_revers": 1304, "array_sum": 1304, "array_to_str": 1304, "array_uniqu": 1304, "array_upp": 1304, "asin": 1310, "asind": 1310, "assert": 1316, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1310, "atan2": 1310, "atan2d": 1310, "atand": 1310, "attribut": [308, 896, 1279], "avail": 1, "avg": 1303, "avro": 801, "backward_fil": 365, "base_utc_offset": [406, 997], "batched_read": 125, "batchedcsvread": 125, "bin": [366, 367, 368, 369, 370, 371, 953, 954, 955, 956, 957, 958], "binari": [57, 781, 794, 1280], "bit_length": 1308, "bitwise_and": [372, 959], "bitwise_count_on": [373, 960], "bitwise_count_zero": [374, 961], "bitwise_leading_on": [375, 962], "bitwise_leading_zero": [376, 963], "bitwise_or": [377, 964], "bitwise_trailing_on": [378, 965], "bitwise_trailing_zero": [379, 966], "bitwise_xor": [380, 967], "boolean": [58, 782, 1281], "bottom_k": [175, 381, 804, 968], "bottom_k_bi": 382, "build_info": 52, "business_day_count": 716, "cach": 805, "cancel": 893, "cast": [176, 383, 806, 969, 1311], "cast_time_unit": [407, 998], "cat": [384, 970, 971, 972, 973], "categor": 59, "categori": [783, 1282], "categoricalremappingwarn": 86, "cbrt": [385, 974, 1307], "ceil": [386, 975, 1307], "centuri": [408, 999], "chronoformatwarn": 87, "chunk_length": 976, "claus": 1302, "clear": [177, 807, 977], "clip": [387, 978], "clipboard": 801, "clone": [178, 808, 979], "co": [388, 980, 1310], "coalesc": [717, 1305], "col": 784, "collect": 809, "collect_al": 53, "collect_all_async": 54, "collect_async": 810, "collect_schema": [179, 811], "column": [156, 157, 180, 785, 812], "columnnotfounderror": 88, "combin": [409, 1000], "comparison": [794, 1290], "comput": [309, 786, 1283], "computeerror": 89, "concat": [55, 503, 639, 1101, 1205, 1308], "concat_list": 718, "concat_str": 719, "concat_w": 1308, "condit": 1305, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 794, "contain": [345, 366, 504, 640, 933, 953, 1102, 1206], "contains_ani": [641, 1207], "context": 168, "convers": 799, "convert_time_zon": [410, 1001], "corr": [181, 720], "cosd": 1310, "cosh": [389, 981], "cot": [390, 982, 1310], "cotd": 1310, "count": [182, 294, 391, 721, 813, 879, 983, 1303], "count_match": [346, 505, 642, 934, 1103, 1208], "cov": 722, "creat": 1315, "create_list_strategi": 158, "csv": [125, 801], "cum_count": [392, 723, 984], "cum_fold": 724, "cum_max": [393, 985], "cum_min": [394, 986], "cum_prod": [395, 987], "cum_reduc": 725, "cum_sum": [396, 726, 988], "cum_sum_horizont": 727, "cumulative_ev": [397, 989], "customufuncwarn": 90, "cut": [398, 990], "dai": [413, 1004], "data": 318, "databas": 801, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 313], "dataorientationwarn": 91, "dataset": 801, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 318], "date": [61, 411, 728, 1002, 1308], "date_part": 1309, "date_rang": [729, 730], "datetim": [62, 412, 731, 1003], "datetime_rang": [732, 733], "decim": 63, "decod": [367, 643, 954, 1209], "decor": 168, "degre": [399, 1310], "delta": 801, "describ": [183, 814, 991], "descript": [310, 897, 1284], "deseri": [184, 400, 815], "diff": [401, 506, 992, 1104], "disable_string_cach": 84, "distinct": 1302, "div": 1307, "document": 1313, "dot": [402, 993], "drop": [185, 816, 1315], "drop_in_plac": 186, "drop_nan": [403, 994], "drop_nul": [187, 404, 507, 817, 995, 1105], "dst_offset": [414, 1005], "dt": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dtype": [160, 188, 818, 1044], "duplicateerror": 92, "durat": [64, 734], "element": 735, "enable_string_cach": 85, "encod": [368, 644, 955, 1210], "ends_with": [369, 645, 956, 1211, 1308], "engine_config": 876, "entropi": [449, 1045], "enum": 65, "epoch": [415, 1006], "eq": [450, 549, 1046], "eq_miss": [451, 1047], "equal": [189, 1048], "error": 319, "estimated_s": [190, 1049], "eval": [508, 1106], "ewm_mean": [452, 1050], "ewm_mean_bi": [453, 1051], "ewm_std": [454, 1052], "ewm_var": [455, 1053], "exampl": [1, 907, 1316], "excel": 801, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 319, 1314], "exclud": [456, 736], "execut": 1295, "execute_glob": 1296, "exp": [457, 1054, 1307], "explain": [819, 1315], "explod": [191, 347, 458, 509, 646, 820, 935, 1055, 1107, 1212], "export": [311, 1285], "expr": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705], "express": [788, 1313], "extend": [1, 192, 1056], "extend_const": [459, 1057], "extract": [647, 1213, 1309], "extract_al": [648, 1214], "extract_group": [649, 1215], "extract_mani": [650, 1216], "feather": 801, "fetch": 894, "fetch_block": 895, "field": [685, 1251, 1252], "fill_nan": [193, 460, 821, 1058], "fill_nul": [194, 461, 822, 1059], "filter": [195, 462, 823, 1060], "find": [651, 1217], "first": [295, 348, 463, 510, 737, 824, 880, 936, 1061, 1108, 1303], "flag": [196, 1062], "flatten": 464, "float32": 66, "float64": 67, "floor": [465, 1063, 1307], "floordiv": 466, "fold": [197, 738], "format": 739, "forward_fil": 467, "frame": 1313, "from": 1302, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 740, "from_json": 468, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 787, 799, 907, 1306], "gather": [469, 511, 1064, 1109], "gather_everi": [198, 470, 512, 825, 1065, 1110], "ge": [471, 1066], "get": [349, 472, 513, 937, 1111], "get_categori": [384, 970], "get_chunk": 1067, "get_column": [199, 201], "get_column_index": 200, "get_index_typ": 124, "glimps": 202, "global": 1313, "gpuengin": [876, 898], "greatest": 1305, "group": [741, 1302], "group_bi": [203, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 826, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "group_by_dynam": [204, 827], "groupbi": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 899], "gt": [473, 1068], "has_multiple_output": 550, "has_nul": [474, 1069], "has_valid": 1070, "hash": [475, 1071], "hash_row": 205, "have": 1302, "head": [206, 296, 476, 514, 652, 742, 828, 881, 1072, 1112, 1218], "height": 207, "helper": 1316, "hist": [477, 1073], "hour": [416, 1007], "hstack": 208, "iceberg": 801, "ifnul": 1305, "implod": [478, 743, 1074], "import": 907, "in_process": [893, 894, 895], "index": 0, "initcap": 1308, "inprocessqueri": [893, 894, 895, 900], "input": 801, "insert_column": 209, "inspect": [479, 829], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [744, 745], "interfac": 1312, "interpol": [210, 480, 830, 1075], "interpolate_bi": [481, 1076], "intersect": 1314, "introduct": 1313, "invalidoperationerror": 93, "io": 125, "ipc": 801, "is_between": [482, 1077], "is_column_select": 551, "is_dupl": [211, 483, 1078], "is_empti": [212, 1079], "is_finit": [484, 1080], "is_first_distinct": [485, 1081], "is_in": [486, 1082], "is_infinit": [487, 1083], "is_last_distinct": [488, 1084], "is_leap_year": [417, 1008], "is_loc": 971, "is_nan": [489, 1085], "is_not_nan": [490, 1086], "is_not_nul": [491, 1087], "is_nul": [492, 1088], "is_regex_project": 552, "is_sort": 1089, "is_uniqu": [213, 493, 1090], "iso_year": [418, 1009], "item": [214, 1091], "iter_column": 215, "iter_row": 216, "iter_slic": 217, "join": [218, 350, 515, 653, 831, 938, 1113, 1219, 1302], "join_asof": [219, 832], "join_wher": [220, 833], "json": 801, "json_decod": [654, 1220], "json_encod": [686, 1253], "json_norm": 126, "json_path_match": [655, 1221], "keep": 566, "kurtosi": [494, 1092], "lake": 801, "last": [297, 351, 495, 516, 746, 834, 882, 939, 1093, 1114, 1303], "lazi": [221, 835], "lazyfram": [42, 43, 44, 45, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901], "lazygroupbi": [877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "le": [496, 1094], "least": 1305, "left": 1308, "len": [298, 497, 517, 747, 883, 1095, 1115], "len_byt": [656, 1222], "len_char": [657, 1223], "length": 1308, "limit": [222, 498, 836, 1096, 1302], "list": [72, 161, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 789, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1287], "lit": 748, "ln": 1307, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [539, 1137, 1307], "log10": [540, 1138, 1307], "log1p": [541, 1139, 1307], "log2": 1307, "lower": 1308, "lower_bound": [542, 1140], "lt": [543, 1141], "ltrim": 1308, "manag": 168, "manipul": [315, 792, 903, 1289], "map": 567, "map_batch": [544, 749, 837], "map_el": [545, 1142], "map_field": 568, "map_group": [299, 750, 884], "map_row": 223, "mapwithoutreturndtypewarn": 94, "math": 1307, "max": [224, 300, 352, 518, 546, 751, 838, 885, 940, 1010, 1116, 1143, 1303], "max_horizont": [225, 752], "mean": [226, 301, 519, 547, 753, 839, 886, 1011, 1117, 1144], "mean_horizont": [227, 754], "median": [228, 302, 353, 520, 548, 755, 840, 887, 941, 1012, 1118, 1145, 1303], "melt": [229, 841], "merge_sort": [230, 842], "meta": [549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 790], "metadata": 904, "method": 1313, "microsecond": [419, 1013], "millennium": [420, 1014], "millisecond": [421, 1015], "min": [231, 303, 354, 521, 561, 756, 843, 888, 942, 1016, 1119, 1146, 1303], "min_horizont": [232, 757], "minut": [422, 1017], "miscellan": [314, 791, 799, 902, 1288], "mod": [562, 1307], "mode": [563, 1147], "moduleupgraderequirederror": 95, "month": [423, 1018], "month_end": [424, 1019], "month_start": [425, 1020], "mul": 564, "n_chunk": [233, 1148], "n_uniqu": [234, 304, 355, 522, 565, 758, 889, 943, 1120, 1149], "name": [566, 567, 568, 569, 570, 571, 572, 573, 574, 785, 793, 1150, 1314], "nan_max": [575, 1151], "nan_min": [576, 1152], "nanosecond": [426, 1021], "ne": [553, 577, 1153], "ne_miss": [578, 1154], "neg": 579, "nest": 318, "new": 1, "new_from_index": 1155, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [580, 1156], "nth": 759, "null": 73, "null_count": [235, 581, 844, 1157], "nullif": 1305, "numer": [318, 794, 1290], "object": 74, "octet_length": 1308, "od": 801, "offset": 1302, "offset_bi": [427, 1022], "ones": 760, "oper": [794, 907, 1290, 1314, 1315], "option": 168, "or_": 582, "order": 1302, "ordinal_dai": [428, 1023], "other": 318, "outofboundserror": 98, "output": 801, "output_nam": 554, "over": 583, "pad_end": [658, 1224], "pad_start": [659, 1225], "panic": 319, "panicexcept": 99, "parallel": 799, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1316], "parquet": 801, "partition_bi": 236, "pct_chang": [584, 1158], "peak_max": [585, 1159], "peak_min": [586, 1160], "performancewarn": 101, "pi": 1307, "pipe": [237, 587, 845], "pivot": 238, "plot": [316, 1291], "plugin": 905, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 784, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1316], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 555, "pow": [588, 1161, 1307], "prefix": 569, "prefix_field": 570, "product": [239, 589, 1162], "profil": [846, 1316], "provid": 1, "pyarrow": 801, "python": [800, 1313], "qcut": [590, 1163], "quantil": [240, 305, 591, 761, 847, 890, 1164], "quarter": [429, 1024], "queri": 1313, "radian": [592, 1310], "random": 799, "rank": [593, 1165], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [241, 594, 1166], "reduc": 762, "refer": 800, "regexp_lik": 1308, "regist": 1297, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1298, "register_lazyframe_namespac": 50, "register_mani": 1299, "register_series_namespac": 51, "registr": 1, "reinterpret": [595, 1167], "renam": [242, 848, 1168], "rename_field": [687, 1254], "repeat": 763, "repeat_bi": 596, "replac": [597, 660, 1169, 1226, 1308], "replace_al": [661, 1227], "replace_column": 243, "replace_mani": [662, 1228], "replace_strict": [598, 1170], "replace_time_zon": [430, 1025], "reshap": [599, 1171], "restore_default": 4, "revers": [244, 356, 523, 600, 663, 849, 944, 1121, 1172, 1229, 1308], "right": 1308, "rle": [601, 1173], "rle_id": [602, 1174], "roll": [245, 603, 850], "rolling_corr": 764, "rolling_cov": 765, "rolling_map": [604, 1175], "rolling_max": [605, 1176], "rolling_max_bi": 606, "rolling_mean": [607, 1177], "rolling_mean_bi": 608, "rolling_median": [609, 1178], "rolling_median_bi": 610, "rolling_min": [611, 1179], "rolling_min_bi": 612, "rolling_quantil": [613, 1180], "rolling_quantile_bi": 614, "rolling_skew": [615, 1181], "rolling_std": [616, 1182], "rolling_std_bi": 617, "rolling_sum": [618, 1183], "rolling_sum_bi": 619, "rolling_var": [620, 1184], "rolling_var_bi": 621, "root_nam": 556, "round": [431, 622, 1026, 1185, 1307], "round_sig_fig": [623, 1186], "row": [246, 247], "rows_by_kei": 248, "rowserror": 105, "rtrim": 1308, "sampl": [249, 524, 624, 1122, 1187], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1188, "schema": [250, 851, 906, 1255], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [625, 1189], "second": [432, 1027], "select": [251, 315, 766, 792, 852, 903, 1289, 1302], "select_seq": [252, 853], "selector": 907, "seri": [163, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1286], "serial": [253, 314, 557, 854, 902], "set": [907, 1190, 1314], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [525, 1123], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [526, 1124], "set_profil": 164, "set_random_se": 150, "set_sort": [254, 626, 855, 1191], "set_streaming_chunk_s": 14, "set_symmetric_differ": [527, 1125], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [528, 1126], "set_verbos": 29, "shape": [255, 1192], "shapeerror": 110, "shift": [256, 357, 529, 627, 856, 945, 1127, 1193], "show": 1315, "show_graph": 857, "show_vers": 151, "shrink_dtyp": [628, 1194], "shrink_to_fit": [257, 1195], "shuffl": [629, 1196], "sign": [630, 1197, 1307], "sin": [631, 1198, 1310], "sind": 1310, "sinh": [632, 1199], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [370, 957], "skew": [633, 1200], "slice": [258, 530, 634, 664, 858, 1128, 1201, 1230], "sort": [259, 358, 531, 635, 859, 946, 1129, 1202], "sort_bi": 636, "split": [665, 1231], "split_exact": [666, 1232], "splitn": [667, 1233], "sql": [260, 767, 860, 1302, 1306, 1312, 1313], "sql_expr": 768, "sqlcontext": [1295, 1296, 1297, 1298, 1299, 1300, 1301, 1313], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [637, 1203, 1307], "starts_with": [371, 668, 958, 1234, 1308], "state": [30, 168], "std": [261, 359, 532, 638, 769, 861, 947, 1130, 1204], "stddev": 1303, "str": [639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250], "strategi": 1316, "strftime": [433, 1028, 1309], "string": [75, 318, 795, 1292, 1308], "stringcach": [46, 799], "stringcachemismatcherror": 111, "strip_char": [669, 1235], "strip_chars_end": [670, 1236], "strip_chars_start": [671, 1237], "strip_prefix": [672, 1238], "strip_suffix": [673, 1239], "strpo": 1308, "strptime": [674, 1240, 1308], "struct": [76, 685, 686, 687, 688, 689, 770, 796, 1251, 1252, 1253, 1254, 1255, 1256, 1293], "structfieldnotfounderror": 112, "style": 317, "sub": 690, "substr": 1308, "suffix": 571, "suffix_field": 572, "sum": [262, 306, 360, 533, 691, 771, 862, 891, 948, 1131, 1257, 1303], "sum_horizont": [263, 772], "tabl": [1300, 1315], "tail": [264, 307, 534, 675, 692, 773, 863, 892, 1132, 1241, 1258], "tan": [693, 1259, 1310], "tand": 1310, "tanh": [694, 1260], "tempor": [318, 797, 1294, 1309], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1316], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 434, 774, 1029], "time_rang": [775, 776], "timestamp": [435, 1030, 1308], "to_arrai": [535, 1133], "to_arrow": [265, 1261], "to_dat": [676, 1242], "to_datetim": [677, 1243], "to_decim": [678, 1244], "to_dict": [266, 267], "to_dummi": [268, 1262], "to_fram": 1263, "to_init_repr": [269, 1264], "to_integ": [679, 1245], "to_jax": [270, 1265], "to_list": [361, 949, 1266], "to_loc": 972, "to_lowercas": [573, 680, 1246], "to_numpi": [271, 1267], "to_panda": [272, 1268], "to_phys": [695, 1269], "to_seri": 273, "to_str": [436, 1031], "to_struct": [274, 362, 536, 950, 1134], "to_tim": [681, 1247], "to_titlecas": [682, 1248], "to_torch": [275, 1270], "to_uppercas": [574, 683, 1249], "toomanyrowsreturnederror": 113, "top_k": [276, 696, 864, 1271], "top_k_bi": 697, "total_dai": [437, 1032], "total_hour": [438, 1033], "total_microsecond": [439, 1034], "total_millisecond": [440, 1035], "total_minut": [441, 1036], "total_nanosecond": [442, 1037], "total_second": [443, 1038], "transpos": 277, "tree_format": 558, "trigonometri": 1310, "truediv": 698, "truncat": [444, 1039, 1315], "try_cast": 1311, "type": [318, 1311], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 559, "union": 1314, "uniqu": [278, 363, 537, 699, 865, 951, 1135, 1272], "unique_count": [700, 1273], "unknown": 82, "unnest": [279, 688, 866, 1256, 1304, 1315], "unpivot": [280, 867], "unregist": 1301, "unstablewarn": 114, "unstack": 281, "unsuitablesqlerror": 115, "updat": [282, 868], "upper": 1308, "upper_bound": [701, 1274], "upsampl": 283, "us": 168, "uses_lexical_ord": 973, "using_string_cach": 167, "utf8": 83, "value_count": [702, 1275], "var": [284, 364, 538, 703, 777, 869, 952, 1136, 1276], "varianc": 1303, "vstack": 285, "warn": 319, "week": [445, 1040], "weekdai": [446, 1041], "when": 778, "where": [704, 1302], "width": [286, 870], "window": 798, "with_column": [287, 871], "with_columns_seq": [288, 872], "with_context": 873, "with_field": 689, "with_row_count": [289, 874], "with_row_index": [290, 875], "with_time_unit": [447, 1042], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 560], "write_ndjson": 40, "write_parquet": 41, "xor": 705, "year": [448, 1043], "zero": 779, "zfill": [684, 1250], "zip_with": 1277}})